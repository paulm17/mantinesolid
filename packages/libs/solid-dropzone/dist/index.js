!function(i,a){"object"==typeof exports&&"undefined"!=typeof module?a(exports):"function"==typeof define&&define.amd?define(["exports"],a):a((i="undefined"!=typeof globalThis?globalThis:i||self).reactDropzone={})}(this,(function(i){"use strict";function a(i,a){var t=Object.keys(i);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(i);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(i,a).enumerable}))),t.push.apply(t,n)}return t}function t(i){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?a(Object(e),!0).forEach((function(a){n(i,a,e[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(i,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(a){Object.defineProperty(i,a,Object.getOwnPropertyDescriptor(e,a))}))}return i}function n(i,a,t){return a in i?Object.defineProperty(i,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):i[a]=t,i}function e(i,a){if(null==i)return{};var t,n,e=function(i,a){if(null==i)return{};var t,n,e={},p=Object.keys(i);for(n=0;n<p.length;n++)t=p[n],a.indexOf(t)>=0||(e[t]=i[t]);return e}(i,a);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(i);for(n=0;n<p.length;n++)t=p[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(i,t)&&(e[t]=i[t])}return e}function p(i,a){return function(i){if(Array.isArray(i))return i}(i)||function(i,a){var t=null==i?null:"undefined"!=typeof Symbol&&i[Symbol.iterator]||i["@@iterator"];if(null==t)return;var n,e,p=[],o=!0,l=!1;try{for(t=t.call(i);!(o=(n=t.next()).done)&&(p.push(n.value),!a||p.length!==a);o=!0);}catch(i){l=!0,e=i}finally{try{o||null==t.return||t.return()}finally{if(l)throw e}}return p}(i,a)||l(i,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(i){return function(i){if(Array.isArray(i))return c(i)}(i)||function(i){if("undefined"!=typeof Symbol&&null!=i[Symbol.iterator]||null!=i["@@iterator"])return Array.from(i)}(i)||l(i)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(i,a){if(i){if("string"==typeof i)return c(i,a);var t=Object.prototype.toString.call(i).slice(8,-1);return"Object"===t&&i.constructor&&(t=i.constructor.name),"Map"===t||"Set"===t?Array.from(i):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?c(i,a):void 0}}function c(i,a){(null==a||a>i.length)&&(a=i.length);for(var t=0,n=new Array(a);t<a;t++)n[t]=i[t];return n}const r=Symbol("solid-proxy"),s="function"==typeof Proxy,d=Symbol("solid-track"),m={equals:(i,a)=>i===a};let v=L;const u={owned:null,cleanups:null,context:null,owner:null};var x=null;let f,g=null,h=null,b=null,y=null,w=0;function k(i,a){const t={value:i,observers:null,observerSlots:null,comparator:(a=a?Object.assign({},m,a):m).equals||void 0};return[q.bind(t),i=>("function"==typeof i&&(i=i(t.value)),F(t,i))]}function j(i,a,t){v=R;const n=S(i,a,!1,1),e=f;t&&t.render||(n.user=!0),y?y.push(n):E(n)}function z(i,a,t){t=t?Object.assign({},m,t):m;const n=S(i,a,!0,0);return n.observers=null,n.observerSlots=null,n.comparator=t.equals||void 0,E(n),q.bind(n)}function O(i){if(null===h)return i();const a=h;h=null;try{return i()}finally{h=a}}function D(i){j((()=>O(i)))}function A(i){return null===x||(null===x.cleanups?x.cleanups=[i]:x.cleanups.push(i)),i}function P(){return h}function q(){if(this.sources&&this.state)if(1===this.state)E(this);else{const i=b;b=null,_((()=>T(this)),!1),b=i}if(h){const i=this.observers?this.observers.length:0;h.sources?(h.sources.push(this),h.sourceSlots.push(i)):(h.sources=[this],h.sourceSlots=[i]),this.observers?(this.observers.push(h),this.observerSlots.push(h.sources.length-1)):(this.observers=[h],this.observerSlots=[h.sources.length-1])}return this.value}function F(i,a,t){let n=i.value;return i.comparator&&i.comparator(n,a)||(i.value=a,i.observers&&i.observers.length&&_((()=>{for(let a=0;a<i.observers.length;a+=1){const t=i.observers[a],n=g;n&&g.disposed.has(t),(n?t.tState:t.state)||(t.pure?b.push(t):y.push(t),t.observers&&$(t)),n||(t.state=1)}if(b.length>1e6)throw b=[],new Error}),!1)),a}function E(i){if(!i.fn)return;I(i);const a=w;!function(i,a,t){let n;const e=x,p=h;h=x=i;try{n=i.fn(a)}catch(a){return i.pure&&(i.state=1,i.owned&&i.owned.forEach(I),i.owned=null),i.updatedAt=t+1,B(a)}finally{h=p,x=e}(!i.updatedAt||i.updatedAt<=t)&&(null!=i.updatedAt&&"observers"in i?F(i,n):i.value=n,i.updatedAt=t)}(i,i.value,a)}function S(i,a,t,n=1,e){const p={fn:i,state:n,updatedAt:null,owned:null,sources:null,sourceSlots:null,cleanups:null,value:a,owner:x,context:x?x.context:null,pure:t};return null===x||x!==u&&(x.owned?x.owned.push(p):x.owned=[p]),p}function C(i){if(0===i.state)return;if(2===i.state)return T(i);if(i.suspense&&O(i.suspense.inFallback))return i.suspense.effects.push(i);const a=[i];for(;(i=i.owner)&&(!i.updatedAt||i.updatedAt<w);)i.state&&a.push(i);for(let t=a.length-1;t>=0;t--)if(1===(i=a[t]).state)E(i);else if(2===i.state){const t=b;b=null,_((()=>T(i,a[0])),!1),b=t}}function _(i,a){if(b)return i();let t=!1;a||(b=[]),y?t=!0:y=[],w++;try{const a=i();return function(i){b&&(L(b),b=null);if(i)return;const a=y;y=null,a.length&&_((()=>v(a)),!1)}(t),a}catch(i){t||(y=null),b=null,B(i)}}function L(i){for(let a=0;a<i.length;a++)C(i[a])}function R(i){let a,t=0;for(a=0;a<i.length;a++){const n=i[a];n.user?i[t++]=n:C(n)}for(a=0;a<t;a++)C(i[a])}function T(i,a){i.state=0;for(let t=0;t<i.sources.length;t+=1){const n=i.sources[t];if(n.sources){const i=n.state;1===i?n!==a&&(!n.updatedAt||n.updatedAt<w)&&C(n):2===i&&T(n,a)}}}function $(i){for(let a=0;a<i.observers.length;a+=1){const t=i.observers[a];t.state||(t.state=2,t.pure?b.push(t):y.push(t),t.observers&&$(t))}}function I(i){let a;if(i.sources)for(;i.sources.length;){const a=i.sources.pop(),t=i.sourceSlots.pop(),n=a.observers;if(n&&n.length){const i=n.pop(),e=a.observerSlots.pop();t<n.length&&(i.sourceSlots[e]=t,n[t]=i,a.observerSlots[t]=e)}}if(i.tOwned){for(a=i.tOwned.length-1;a>=0;a--)I(i.tOwned[a]);delete i.tOwned}if(i.owned){for(a=i.owned.length-1;a>=0;a--)I(i.owned[a]);i.owned=null}if(i.cleanups){for(a=i.cleanups.length-1;a>=0;a--)i.cleanups[a]();i.cleanups=null}i.state=0}function B(i,a=x){const t=function(i){return i instanceof Error?i:new Error("string"==typeof i?i:"Unknown error",{cause:i})}(i);throw t}function K(){return!0}const M={get:(i,a,t)=>a===r?t:i.get(a),has:(i,a)=>a===r||i.has(a),set:K,deleteProperty:K,getOwnPropertyDescriptor:(i,a)=>({configurable:!0,enumerable:!0,get:()=>i.get(a),set:K,deleteProperty:K}),ownKeys:i=>i.keys()};function N(i){return(i="function"==typeof i?i():i)?i:{}}function W(){for(let i=0,a=this.length;i<a;++i){const a=this[i]();if(void 0!==a)return a}}function G(...i){let a=!1;for(let t=0;t<i.length;t++){const n=i[t];a=a||!!n&&r in n,i[t]="function"==typeof n?(a=!0,z(n)):n}if(s&&a)return new Proxy({get(a){for(let t=i.length-1;t>=0;t--){const n=N(i[t])[a];if(void 0!==n)return n}},has(a){for(let t=i.length-1;t>=0;t--)if(a in N(i[t]))return!0;return!1},keys(){const a=[];for(let t=0;t<i.length;t++)a.push(...Object.keys(N(i[t])));return[...new Set(a)]}},M);const t={},n=Object.create(null);for(let a=i.length-1;a>=0;a--){const e=i[a];if(!e)continue;const p=Object.getOwnPropertyNames(e);for(let i=p.length-1;i>=0;i--){const a=p[i];if("__proto__"===a||"constructor"===a)continue;const o=Object.getOwnPropertyDescriptor(e,a);if(n[a]){const i=t[a];i&&(o.get?i.push(o.get.bind(e)):void 0!==o.value&&i.push((()=>o.value)))}else n[a]=o.get?{enumerable:!0,configurable:!0,get:W.bind(t[a]=[o.get.bind(e)])}:void 0!==o.value?o:void 0}}const e={},p=Object.keys(n);for(let i=p.length-1;i>=0;i--){const a=p[i],t=n[a];t&&t.get?Object.defineProperty(e,a,t):e[a]=t?t.value:void 0}return e}function H(i,...a){if(s&&r in i){const t=new Set(a.length>1?a.flat():a[0]),n=a.map((a=>new Proxy({get:t=>a.includes(t)?i[t]:void 0,has:t=>a.includes(t)&&t in i,keys:()=>a.filter((a=>a in i))},M)));return n.push(new Proxy({get:a=>t.has(a)?void 0:i[a],has:a=>!t.has(a)&&a in i,keys:()=>Object.keys(i).filter((i=>!t.has(i)))},M)),n}const t={},n=a.map((()=>({})));for(const e of Object.getOwnPropertyNames(i)){const p=Object.getOwnPropertyDescriptor(i,e),o=!p.get&&!p.set&&p.enumerable&&p.writable&&p.configurable;let l=!1,c=0;for(const i of a)i.includes(e)&&(l=!0,o?n[c][e]=p.value:Object.defineProperty(n[c],e,p)),++c;l||(o?t[e]=p.value:Object.defineProperty(t,e,p))}return[...n,t]}const U=Symbol("store-raw"),J=Symbol("store-node"),Q=Symbol("store-has"),V=Symbol("store-self");function X(i){let a=i[r];if(!a&&(Object.defineProperty(i,r,{value:a=new Proxy(i,ni)}),!Array.isArray(i))){const t=Object.keys(i),n=Object.getOwnPropertyDescriptors(i);for(let e=0,p=t.length;e<p;e++){const p=t[e];n[p].get&&Object.defineProperty(i,p,{enumerable:n[p].enumerable,get:n[p].get.bind(a)})}}return a}function Y(i){let a;return null!=i&&"object"==typeof i&&(i[r]||!(a=Object.getPrototypeOf(i))||a===Object.prototype||Array.isArray(i))}function Z(i,a=new Set){let t,n,e,p;if(t=null!=i&&i[U])return t;if(!Y(i)||a.has(i))return i;if(Array.isArray(i)){Object.isFrozen(i)?i=i.slice(0):a.add(i);for(let t=0,p=i.length;t<p;t++)e=i[t],(n=Z(e,a))!==e&&(i[t]=n)}else{Object.isFrozen(i)?i=Object.assign({},i):a.add(i);const t=Object.keys(i),o=Object.getOwnPropertyDescriptors(i);for(let l=0,c=t.length;l<c;l++)p=t[l],o[p].get||(e=i[p],(n=Z(e,a))!==e&&(i[p]=n))}return i}function ii(i,a){let t=i[a];return t||Object.defineProperty(i,a,{value:t=Object.create(null)}),t}function ai(i,a,t){if(i[a])return i[a];const[n,e]=k(t,{equals:!1,internal:!0});return n.$=e,i[a]=n}function ti(i){P()&&ai(ii(i,J),V)()}const ni={get(i,a,t){if(a===U)return i;if(a===r)return t;if(a===d)return ti(i),t;const n=ii(i,J),e=n[a];let p=e?e():i[a];if(a===J||a===Q||"__proto__"===a)return p;if(!e){const t=Object.getOwnPropertyDescriptor(i,a);!P()||"function"==typeof p&&!i.hasOwnProperty(a)||t&&t.get||(p=ai(n,a,p)())}return Y(p)?X(p):p},has:(i,a)=>a===U||a===r||a===d||a===J||a===Q||"__proto__"===a||(P()&&ai(ii(i,Q),a)(),a in i),set:()=>!0,deleteProperty:()=>!0,ownKeys:function(i){return ti(i),Reflect.ownKeys(i)},getOwnPropertyDescriptor:function(i,a){const t=Reflect.getOwnPropertyDescriptor(i,a);return t&&!t.get&&t.configurable&&a!==r&&a!==J?(delete t.value,delete t.writable,t.get=()=>i[r][a],t):t}};function ei(i,a,t,n=!1){if(!n&&i[a]===t)return;const e=i[a],p=i.length;void 0===t?(delete i[a],i[Q]&&i[Q][a]&&void 0!==e&&i[Q][a].$()):(i[a]=t,i[Q]&&i[Q][a]&&void 0===e&&i[Q][a].$());let o,l=ii(i,J);if((o=ai(l,a,e))&&o.$((()=>t)),Array.isArray(i)&&i.length!==p){for(let a=i.length;a<p;a++)(o=l[a])&&o.$();(o=ai(l,"length",p))&&o.$(i.length)}(o=l[V])&&o.$()}function pi(i,a){const t=Object.keys(a);for(let n=0;n<t.length;n+=1){const e=t[n];ei(i,e,a[e])}}function oi(i,a,t=[]){let n,e=i;if(a.length>1){n=a.shift();const p=typeof n,o=Array.isArray(i);if(Array.isArray(n)){for(let e=0;e<n.length;e++)oi(i,[n[e]].concat(a),t);return}if(o&&"function"===p){for(let e=0;e<i.length;e++)n(i[e],e)&&oi(i,[e].concat(a),t);return}if(o&&"object"===p){const{from:e=0,to:p=i.length-1,by:o=1}=n;for(let n=e;n<=p;n+=o)oi(i,[n].concat(a),t);return}if(a.length>1)return void oi(i[n],a,[n].concat(t));e=i[n],t=[n].concat(t)}let p=a[0];"function"==typeof p&&(p=p(e,t),p===e)||void 0===n&&null==p||(p=Z(p),void 0===n||Y(e)&&Y(p)&&!Array.isArray(p)?pi(e,p):ei(i,n,p))}function li(...[i,a]){const t=Z(i||{}),n=Array.isArray(t);return[X(t),function(...i){_((()=>{n&&1===i.length?function(i,a){if("function"==typeof a&&(a=a(i)),a=Z(a),Array.isArray(a)){if(i===a)return;let t=0,n=a.length;for(;t<n;t++){const n=a[t];i[t]!==n&&ei(i,t,n)}ei(i,"length",n)}else pi(i,a)}(t,i[0]):oi(t,i)}),!1)}]}const ci=new WeakMap,ri={get(i,a){if(a===U)return i;const t=i[a];let n;return Y(t)?ci.get(t)||(ci.set(t,n=new Proxy(t,ri)),n):t},set:(i,a,t)=>(ei(i,a,Z(t)),!0),deleteProperty:(i,a)=>(ei(i,a,void 0,!0),!0)};function si(i){return a=>{if(Y(a)){let t;(t=ci.get(a))||ci.set(a,t=new Proxy(a,ri)),i(t)}return a}}function di(i,a,t,n){return new(t||(t=Promise))((function(e,p){function o(i){try{c(n.next(i))}catch(i){p(i)}}function l(i){try{c(n.throw(i))}catch(i){p(i)}}function c(i){var a;i.done?e(i.value):(a=i.value,a instanceof t?a:new t((function(i){i(a)}))).then(o,l)}c((n=n.apply(i,a||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError;const mi=new Map([["1km","application/vnd.1000minds.decision-model+xml"],["3dml","text/vnd.in3d.3dml"],["3ds","image/x-3ds"],["3g2","video/3gpp2"],["3gp","video/3gp"],["3gpp","video/3gpp"],["3mf","model/3mf"],["7z","application/x-7z-compressed"],["7zip","application/x-7z-compressed"],["123","application/vnd.lotus-1-2-3"],["aab","application/x-authorware-bin"],["aac","audio/x-acc"],["aam","application/x-authorware-map"],["aas","application/x-authorware-seg"],["abw","application/x-abiword"],["ac","application/vnd.nokia.n-gage.ac+xml"],["ac3","audio/ac3"],["acc","application/vnd.americandynamics.acc"],["ace","application/x-ace-compressed"],["acu","application/vnd.acucobol"],["acutc","application/vnd.acucorp"],["adp","audio/adpcm"],["aep","application/vnd.audiograph"],["afm","application/x-font-type1"],["afp","application/vnd.ibm.modcap"],["ahead","application/vnd.ahead.space"],["ai","application/pdf"],["aif","audio/x-aiff"],["aifc","audio/x-aiff"],["aiff","audio/x-aiff"],["air","application/vnd.adobe.air-application-installer-package+zip"],["ait","application/vnd.dvb.ait"],["ami","application/vnd.amiga.ami"],["amr","audio/amr"],["apk","application/vnd.android.package-archive"],["apng","image/apng"],["appcache","text/cache-manifest"],["application","application/x-ms-application"],["apr","application/vnd.lotus-approach"],["arc","application/x-freearc"],["arj","application/x-arj"],["asc","application/pgp-signature"],["asf","video/x-ms-asf"],["asm","text/x-asm"],["aso","application/vnd.accpac.simply.aso"],["asx","video/x-ms-asf"],["atc","application/vnd.acucorp"],["atom","application/atom+xml"],["atomcat","application/atomcat+xml"],["atomdeleted","application/atomdeleted+xml"],["atomsvc","application/atomsvc+xml"],["atx","application/vnd.antix.game-component"],["au","audio/x-au"],["avi","video/x-msvideo"],["avif","image/avif"],["aw","application/applixware"],["azf","application/vnd.airzip.filesecure.azf"],["azs","application/vnd.airzip.filesecure.azs"],["azv","image/vnd.airzip.accelerator.azv"],["azw","application/vnd.amazon.ebook"],["b16","image/vnd.pco.b16"],["bat","application/x-msdownload"],["bcpio","application/x-bcpio"],["bdf","application/x-font-bdf"],["bdm","application/vnd.syncml.dm+wbxml"],["bdoc","application/x-bdoc"],["bed","application/vnd.realvnc.bed"],["bh2","application/vnd.fujitsu.oasysprs"],["bin","application/octet-stream"],["blb","application/x-blorb"],["blorb","application/x-blorb"],["bmi","application/vnd.bmi"],["bmml","application/vnd.balsamiq.bmml+xml"],["bmp","image/bmp"],["book","application/vnd.framemaker"],["box","application/vnd.previewsystems.box"],["boz","application/x-bzip2"],["bpk","application/octet-stream"],["bpmn","application/octet-stream"],["bsp","model/vnd.valve.source.compiled-map"],["btif","image/prs.btif"],["buffer","application/octet-stream"],["bz","application/x-bzip"],["bz2","application/x-bzip2"],["c","text/x-c"],["c4d","application/vnd.clonk.c4group"],["c4f","application/vnd.clonk.c4group"],["c4g","application/vnd.clonk.c4group"],["c4p","application/vnd.clonk.c4group"],["c4u","application/vnd.clonk.c4group"],["c11amc","application/vnd.cluetrust.cartomobile-config"],["c11amz","application/vnd.cluetrust.cartomobile-config-pkg"],["cab","application/vnd.ms-cab-compressed"],["caf","audio/x-caf"],["cap","application/vnd.tcpdump.pcap"],["car","application/vnd.curl.car"],["cat","application/vnd.ms-pki.seccat"],["cb7","application/x-cbr"],["cba","application/x-cbr"],["cbr","application/x-cbr"],["cbt","application/x-cbr"],["cbz","application/x-cbr"],["cc","text/x-c"],["cco","application/x-cocoa"],["cct","application/x-director"],["ccxml","application/ccxml+xml"],["cdbcmsg","application/vnd.contact.cmsg"],["cda","application/x-cdf"],["cdf","application/x-netcdf"],["cdfx","application/cdfx+xml"],["cdkey","application/vnd.mediastation.cdkey"],["cdmia","application/cdmi-capability"],["cdmic","application/cdmi-container"],["cdmid","application/cdmi-domain"],["cdmio","application/cdmi-object"],["cdmiq","application/cdmi-queue"],["cdr","application/cdr"],["cdx","chemical/x-cdx"],["cdxml","application/vnd.chemdraw+xml"],["cdy","application/vnd.cinderella"],["cer","application/pkix-cert"],["cfs","application/x-cfs-compressed"],["cgm","image/cgm"],["chat","application/x-chat"],["chm","application/vnd.ms-htmlhelp"],["chrt","application/vnd.kde.kchart"],["cif","chemical/x-cif"],["cii","application/vnd.anser-web-certificate-issue-initiation"],["cil","application/vnd.ms-artgalry"],["cjs","application/node"],["cla","application/vnd.claymore"],["class","application/octet-stream"],["clkk","application/vnd.crick.clicker.keyboard"],["clkp","application/vnd.crick.clicker.palette"],["clkt","application/vnd.crick.clicker.template"],["clkw","application/vnd.crick.clicker.wordbank"],["clkx","application/vnd.crick.clicker"],["clp","application/x-msclip"],["cmc","application/vnd.cosmocaller"],["cmdf","chemical/x-cmdf"],["cml","chemical/x-cml"],["cmp","application/vnd.yellowriver-custom-menu"],["cmx","image/x-cmx"],["cod","application/vnd.rim.cod"],["coffee","text/coffeescript"],["com","application/x-msdownload"],["conf","text/plain"],["cpio","application/x-cpio"],["cpp","text/x-c"],["cpt","application/mac-compactpro"],["crd","application/x-mscardfile"],["crl","application/pkix-crl"],["crt","application/x-x509-ca-cert"],["crx","application/x-chrome-extension"],["cryptonote","application/vnd.rig.cryptonote"],["csh","application/x-csh"],["csl","application/vnd.citationstyles.style+xml"],["csml","chemical/x-csml"],["csp","application/vnd.commonspace"],["csr","application/octet-stream"],["css","text/css"],["cst","application/x-director"],["csv","text/csv"],["cu","application/cu-seeme"],["curl","text/vnd.curl"],["cww","application/prs.cww"],["cxt","application/x-director"],["cxx","text/x-c"],["dae","model/vnd.collada+xml"],["daf","application/vnd.mobius.daf"],["dart","application/vnd.dart"],["dataless","application/vnd.fdsn.seed"],["davmount","application/davmount+xml"],["dbf","application/vnd.dbf"],["dbk","application/docbook+xml"],["dcr","application/x-director"],["dcurl","text/vnd.curl.dcurl"],["dd2","application/vnd.oma.dd2+xml"],["ddd","application/vnd.fujixerox.ddd"],["ddf","application/vnd.syncml.dmddf+xml"],["dds","image/vnd.ms-dds"],["deb","application/x-debian-package"],["def","text/plain"],["deploy","application/octet-stream"],["der","application/x-x509-ca-cert"],["dfac","application/vnd.dreamfactory"],["dgc","application/x-dgc-compressed"],["dic","text/x-c"],["dir","application/x-director"],["dis","application/vnd.mobius.dis"],["disposition-notification","message/disposition-notification"],["dist","application/octet-stream"],["distz","application/octet-stream"],["djv","image/vnd.djvu"],["djvu","image/vnd.djvu"],["dll","application/octet-stream"],["dmg","application/x-apple-diskimage"],["dmn","application/octet-stream"],["dmp","application/vnd.tcpdump.pcap"],["dms","application/octet-stream"],["dna","application/vnd.dna"],["doc","application/msword"],["docm","application/vnd.ms-word.template.macroEnabled.12"],["docx","application/vnd.openxmlformats-officedocument.wordprocessingml.document"],["dot","application/msword"],["dotm","application/vnd.ms-word.template.macroEnabled.12"],["dotx","application/vnd.openxmlformats-officedocument.wordprocessingml.template"],["dp","application/vnd.osgi.dp"],["dpg","application/vnd.dpgraph"],["dra","audio/vnd.dra"],["drle","image/dicom-rle"],["dsc","text/prs.lines.tag"],["dssc","application/dssc+der"],["dtb","application/x-dtbook+xml"],["dtd","application/xml-dtd"],["dts","audio/vnd.dts"],["dtshd","audio/vnd.dts.hd"],["dump","application/octet-stream"],["dvb","video/vnd.dvb.file"],["dvi","application/x-dvi"],["dwd","application/atsc-dwd+xml"],["dwf","model/vnd.dwf"],["dwg","image/vnd.dwg"],["dxf","image/vnd.dxf"],["dxp","application/vnd.spotfire.dxp"],["dxr","application/x-director"],["ear","application/java-archive"],["ecelp4800","audio/vnd.nuera.ecelp4800"],["ecelp7470","audio/vnd.nuera.ecelp7470"],["ecelp9600","audio/vnd.nuera.ecelp9600"],["ecma","application/ecmascript"],["edm","application/vnd.novadigm.edm"],["edx","application/vnd.novadigm.edx"],["efif","application/vnd.picsel"],["ei6","application/vnd.pg.osasli"],["elc","application/octet-stream"],["emf","image/emf"],["eml","message/rfc822"],["emma","application/emma+xml"],["emotionml","application/emotionml+xml"],["emz","application/x-msmetafile"],["eol","audio/vnd.digital-winds"],["eot","application/vnd.ms-fontobject"],["eps","application/postscript"],["epub","application/epub+zip"],["es","application/ecmascript"],["es3","application/vnd.eszigno3+xml"],["esa","application/vnd.osgi.subsystem"],["esf","application/vnd.epson.esf"],["et3","application/vnd.eszigno3+xml"],["etx","text/x-setext"],["eva","application/x-eva"],["evy","application/x-envoy"],["exe","application/octet-stream"],["exi","application/exi"],["exp","application/express"],["exr","image/aces"],["ext","application/vnd.novadigm.ext"],["ez","application/andrew-inset"],["ez2","application/vnd.ezpix-album"],["ez3","application/vnd.ezpix-package"],["f","text/x-fortran"],["f4v","video/mp4"],["f77","text/x-fortran"],["f90","text/x-fortran"],["fbs","image/vnd.fastbidsheet"],["fcdt","application/vnd.adobe.formscentral.fcdt"],["fcs","application/vnd.isac.fcs"],["fdf","application/vnd.fdf"],["fdt","application/fdt+xml"],["fe_launch","application/vnd.denovo.fcselayout-link"],["fg5","application/vnd.fujitsu.oasysgp"],["fgd","application/x-director"],["fh","image/x-freehand"],["fh4","image/x-freehand"],["fh5","image/x-freehand"],["fh7","image/x-freehand"],["fhc","image/x-freehand"],["fig","application/x-xfig"],["fits","image/fits"],["flac","audio/x-flac"],["fli","video/x-fli"],["flo","application/vnd.micrografx.flo"],["flv","video/x-flv"],["flw","application/vnd.kde.kivio"],["flx","text/vnd.fmi.flexstor"],["fly","text/vnd.fly"],["fm","application/vnd.framemaker"],["fnc","application/vnd.frogans.fnc"],["fo","application/vnd.software602.filler.form+xml"],["for","text/x-fortran"],["fpx","image/vnd.fpx"],["frame","application/vnd.framemaker"],["fsc","application/vnd.fsc.weblaunch"],["fst","image/vnd.fst"],["ftc","application/vnd.fluxtime.clip"],["fti","application/vnd.anser-web-funds-transfer-initiation"],["fvt","video/vnd.fvt"],["fxp","application/vnd.adobe.fxp"],["fxpl","application/vnd.adobe.fxp"],["fzs","application/vnd.fuzzysheet"],["g2w","application/vnd.geoplan"],["g3","image/g3fax"],["g3w","application/vnd.geospace"],["gac","application/vnd.groove-account"],["gam","application/x-tads"],["gbr","application/rpki-ghostbusters"],["gca","application/x-gca-compressed"],["gdl","model/vnd.gdl"],["gdoc","application/vnd.google-apps.document"],["geo","application/vnd.dynageo"],["geojson","application/geo+json"],["gex","application/vnd.geometry-explorer"],["ggb","application/vnd.geogebra.file"],["ggt","application/vnd.geogebra.tool"],["ghf","application/vnd.groove-help"],["gif","image/gif"],["gim","application/vnd.groove-identity-message"],["glb","model/gltf-binary"],["gltf","model/gltf+json"],["gml","application/gml+xml"],["gmx","application/vnd.gmx"],["gnumeric","application/x-gnumeric"],["gpg","application/gpg-keys"],["gph","application/vnd.flographit"],["gpx","application/gpx+xml"],["gqf","application/vnd.grafeq"],["gqs","application/vnd.grafeq"],["gram","application/srgs"],["gramps","application/x-gramps-xml"],["gre","application/vnd.geometry-explorer"],["grv","application/vnd.groove-injector"],["grxml","application/srgs+xml"],["gsf","application/x-font-ghostscript"],["gsheet","application/vnd.google-apps.spreadsheet"],["gslides","application/vnd.google-apps.presentation"],["gtar","application/x-gtar"],["gtm","application/vnd.groove-tool-message"],["gtw","model/vnd.gtw"],["gv","text/vnd.graphviz"],["gxf","application/gxf"],["gxt","application/vnd.geonext"],["gz","application/gzip"],["gzip","application/gzip"],["h","text/x-c"],["h261","video/h261"],["h263","video/h263"],["h264","video/h264"],["hal","application/vnd.hal+xml"],["hbci","application/vnd.hbci"],["hbs","text/x-handlebars-template"],["hdd","application/x-virtualbox-hdd"],["hdf","application/x-hdf"],["heic","image/heic"],["heics","image/heic-sequence"],["heif","image/heif"],["heifs","image/heif-sequence"],["hej2","image/hej2k"],["held","application/atsc-held+xml"],["hh","text/x-c"],["hjson","application/hjson"],["hlp","application/winhlp"],["hpgl","application/vnd.hp-hpgl"],["hpid","application/vnd.hp-hpid"],["hps","application/vnd.hp-hps"],["hqx","application/mac-binhex40"],["hsj2","image/hsj2"],["htc","text/x-component"],["htke","application/vnd.kenameaapp"],["htm","text/html"],["html","text/html"],["hvd","application/vnd.yamaha.hv-dic"],["hvp","application/vnd.yamaha.hv-voice"],["hvs","application/vnd.yamaha.hv-script"],["i2g","application/vnd.intergeo"],["icc","application/vnd.iccprofile"],["ice","x-conference/x-cooltalk"],["icm","application/vnd.iccprofile"],["ico","image/x-icon"],["ics","text/calendar"],["ief","image/ief"],["ifb","text/calendar"],["ifm","application/vnd.shana.informed.formdata"],["iges","model/iges"],["igl","application/vnd.igloader"],["igm","application/vnd.insors.igm"],["igs","model/iges"],["igx","application/vnd.micrografx.igx"],["iif","application/vnd.shana.informed.interchange"],["img","application/octet-stream"],["imp","application/vnd.accpac.simply.imp"],["ims","application/vnd.ms-ims"],["in","text/plain"],["ini","text/plain"],["ink","application/inkml+xml"],["inkml","application/inkml+xml"],["install","application/x-install-instructions"],["iota","application/vnd.astraea-software.iota"],["ipfix","application/ipfix"],["ipk","application/vnd.shana.informed.package"],["irm","application/vnd.ibm.rights-management"],["irp","application/vnd.irepository.package+xml"],["iso","application/x-iso9660-image"],["itp","application/vnd.shana.informed.formtemplate"],["its","application/its+xml"],["ivp","application/vnd.immervision-ivp"],["ivu","application/vnd.immervision-ivu"],["jad","text/vnd.sun.j2me.app-descriptor"],["jade","text/jade"],["jam","application/vnd.jam"],["jar","application/java-archive"],["jardiff","application/x-java-archive-diff"],["java","text/x-java-source"],["jhc","image/jphc"],["jisp","application/vnd.jisp"],["jls","image/jls"],["jlt","application/vnd.hp-jlyt"],["jng","image/x-jng"],["jnlp","application/x-java-jnlp-file"],["joda","application/vnd.joost.joda-archive"],["jp2","image/jp2"],["jpe","image/jpeg"],["jpeg","image/jpeg"],["jpf","image/jpx"],["jpg","image/jpeg"],["jpg2","image/jp2"],["jpgm","video/jpm"],["jpgv","video/jpeg"],["jph","image/jph"],["jpm","video/jpm"],["jpx","image/jpx"],["js","application/javascript"],["json","application/json"],["json5","application/json5"],["jsonld","application/ld+json"],["jsonl","application/jsonl"],["jsonml","application/jsonml+json"],["jsx","text/jsx"],["jxr","image/jxr"],["jxra","image/jxra"],["jxrs","image/jxrs"],["jxs","image/jxs"],["jxsc","image/jxsc"],["jxsi","image/jxsi"],["jxss","image/jxss"],["kar","audio/midi"],["karbon","application/vnd.kde.karbon"],["kdb","application/octet-stream"],["kdbx","application/x-keepass2"],["key","application/x-iwork-keynote-sffkey"],["kfo","application/vnd.kde.kformula"],["kia","application/vnd.kidspiration"],["kml","application/vnd.google-earth.kml+xml"],["kmz","application/vnd.google-earth.kmz"],["kne","application/vnd.kinar"],["knp","application/vnd.kinar"],["kon","application/vnd.kde.kontour"],["kpr","application/vnd.kde.kpresenter"],["kpt","application/vnd.kde.kpresenter"],["kpxx","application/vnd.ds-keypoint"],["ksp","application/vnd.kde.kspread"],["ktr","application/vnd.kahootz"],["ktx","image/ktx"],["ktx2","image/ktx2"],["ktz","application/vnd.kahootz"],["kwd","application/vnd.kde.kword"],["kwt","application/vnd.kde.kword"],["lasxml","application/vnd.las.las+xml"],["latex","application/x-latex"],["lbd","application/vnd.llamagraphics.life-balance.desktop"],["lbe","application/vnd.llamagraphics.life-balance.exchange+xml"],["les","application/vnd.hhe.lesson-player"],["less","text/less"],["lgr","application/lgr+xml"],["lha","application/octet-stream"],["link66","application/vnd.route66.link66+xml"],["list","text/plain"],["list3820","application/vnd.ibm.modcap"],["listafp","application/vnd.ibm.modcap"],["litcoffee","text/coffeescript"],["lnk","application/x-ms-shortcut"],["log","text/plain"],["lostxml","application/lost+xml"],["lrf","application/octet-stream"],["lrm","application/vnd.ms-lrm"],["ltf","application/vnd.frogans.ltf"],["lua","text/x-lua"],["luac","application/x-lua-bytecode"],["lvp","audio/vnd.lucent.voice"],["lwp","application/vnd.lotus-wordpro"],["lzh","application/octet-stream"],["m1v","video/mpeg"],["m2a","audio/mpeg"],["m2v","video/mpeg"],["m3a","audio/mpeg"],["m3u","text/plain"],["m3u8","application/vnd.apple.mpegurl"],["m4a","audio/x-m4a"],["m4p","application/mp4"],["m4s","video/iso.segment"],["m4u","application/vnd.mpegurl"],["m4v","video/x-m4v"],["m13","application/x-msmediaview"],["m14","application/x-msmediaview"],["m21","application/mp21"],["ma","application/mathematica"],["mads","application/mads+xml"],["maei","application/mmt-aei+xml"],["mag","application/vnd.ecowin.chart"],["maker","application/vnd.framemaker"],["man","text/troff"],["manifest","text/cache-manifest"],["map","application/json"],["mar","application/octet-stream"],["markdown","text/markdown"],["mathml","application/mathml+xml"],["mb","application/mathematica"],["mbk","application/vnd.mobius.mbk"],["mbox","application/mbox"],["mc1","application/vnd.medcalcdata"],["mcd","application/vnd.mcd"],["mcurl","text/vnd.curl.mcurl"],["md","text/markdown"],["mdb","application/x-msaccess"],["mdi","image/vnd.ms-modi"],["mdx","text/mdx"],["me","text/troff"],["mesh","model/mesh"],["meta4","application/metalink4+xml"],["metalink","application/metalink+xml"],["mets","application/mets+xml"],["mfm","application/vnd.mfmp"],["mft","application/rpki-manifest"],["mgp","application/vnd.osgeo.mapguide.package"],["mgz","application/vnd.proteus.magazine"],["mid","audio/midi"],["midi","audio/midi"],["mie","application/x-mie"],["mif","application/vnd.mif"],["mime","message/rfc822"],["mj2","video/mj2"],["mjp2","video/mj2"],["mjs","application/javascript"],["mk3d","video/x-matroska"],["mka","audio/x-matroska"],["mkd","text/x-markdown"],["mks","video/x-matroska"],["mkv","video/x-matroska"],["mlp","application/vnd.dolby.mlp"],["mmd","application/vnd.chipnuts.karaoke-mmd"],["mmf","application/vnd.smaf"],["mml","text/mathml"],["mmr","image/vnd.fujixerox.edmics-mmr"],["mng","video/x-mng"],["mny","application/x-msmoney"],["mobi","application/x-mobipocket-ebook"],["mods","application/mods+xml"],["mov","video/quicktime"],["movie","video/x-sgi-movie"],["mp2","audio/mpeg"],["mp2a","audio/mpeg"],["mp3","audio/mpeg"],["mp4","video/mp4"],["mp4a","audio/mp4"],["mp4s","application/mp4"],["mp4v","video/mp4"],["mp21","application/mp21"],["mpc","application/vnd.mophun.certificate"],["mpd","application/dash+xml"],["mpe","video/mpeg"],["mpeg","video/mpeg"],["mpg","video/mpeg"],["mpg4","video/mp4"],["mpga","audio/mpeg"],["mpkg","application/vnd.apple.installer+xml"],["mpm","application/vnd.blueice.multipass"],["mpn","application/vnd.mophun.application"],["mpp","application/vnd.ms-project"],["mpt","application/vnd.ms-project"],["mpy","application/vnd.ibm.minipay"],["mqy","application/vnd.mobius.mqy"],["mrc","application/marc"],["mrcx","application/marcxml+xml"],["ms","text/troff"],["mscml","application/mediaservercontrol+xml"],["mseed","application/vnd.fdsn.mseed"],["mseq","application/vnd.mseq"],["msf","application/vnd.epson.msf"],["msg","application/vnd.ms-outlook"],["msh","model/mesh"],["msi","application/x-msdownload"],["msl","application/vnd.mobius.msl"],["msm","application/octet-stream"],["msp","application/octet-stream"],["msty","application/vnd.muvee.style"],["mtl","model/mtl"],["mts","model/vnd.mts"],["mus","application/vnd.musician"],["musd","application/mmt-usd+xml"],["musicxml","application/vnd.recordare.musicxml+xml"],["mvb","application/x-msmediaview"],["mvt","application/vnd.mapbox-vector-tile"],["mwf","application/vnd.mfer"],["mxf","application/mxf"],["mxl","application/vnd.recordare.musicxml"],["mxmf","audio/mobile-xmf"],["mxml","application/xv+xml"],["mxs","application/vnd.triscape.mxs"],["mxu","video/vnd.mpegurl"],["n-gage","application/vnd.nokia.n-gage.symbian.install"],["n3","text/n3"],["nb","application/mathematica"],["nbp","application/vnd.wolfram.player"],["nc","application/x-netcdf"],["ncx","application/x-dtbncx+xml"],["nfo","text/x-nfo"],["ngdat","application/vnd.nokia.n-gage.data"],["nitf","application/vnd.nitf"],["nlu","application/vnd.neurolanguage.nlu"],["nml","application/vnd.enliven"],["nnd","application/vnd.noblenet-directory"],["nns","application/vnd.noblenet-sealer"],["nnw","application/vnd.noblenet-web"],["npx","image/vnd.net-fpx"],["nq","application/n-quads"],["nsc","application/x-conference"],["nsf","application/vnd.lotus-notes"],["nt","application/n-triples"],["ntf","application/vnd.nitf"],["numbers","application/x-iwork-numbers-sffnumbers"],["nzb","application/x-nzb"],["oa2","application/vnd.fujitsu.oasys2"],["oa3","application/vnd.fujitsu.oasys3"],["oas","application/vnd.fujitsu.oasys"],["obd","application/x-msbinder"],["obgx","application/vnd.openblox.game+xml"],["obj","model/obj"],["oda","application/oda"],["odb","application/vnd.oasis.opendocument.database"],["odc","application/vnd.oasis.opendocument.chart"],["odf","application/vnd.oasis.opendocument.formula"],["odft","application/vnd.oasis.opendocument.formula-template"],["odg","application/vnd.oasis.opendocument.graphics"],["odi","application/vnd.oasis.opendocument.image"],["odm","application/vnd.oasis.opendocument.text-master"],["odp","application/vnd.oasis.opendocument.presentation"],["ods","application/vnd.oasis.opendocument.spreadsheet"],["odt","application/vnd.oasis.opendocument.text"],["oga","audio/ogg"],["ogex","model/vnd.opengex"],["ogg","audio/ogg"],["ogv","video/ogg"],["ogx","application/ogg"],["omdoc","application/omdoc+xml"],["onepkg","application/onenote"],["onetmp","application/onenote"],["onetoc","application/onenote"],["onetoc2","application/onenote"],["opf","application/oebps-package+xml"],["opml","text/x-opml"],["oprc","application/vnd.palm"],["opus","audio/ogg"],["org","text/x-org"],["osf","application/vnd.yamaha.openscoreformat"],["osfpvg","application/vnd.yamaha.openscoreformat.osfpvg+xml"],["osm","application/vnd.openstreetmap.data+xml"],["otc","application/vnd.oasis.opendocument.chart-template"],["otf","font/otf"],["otg","application/vnd.oasis.opendocument.graphics-template"],["oth","application/vnd.oasis.opendocument.text-web"],["oti","application/vnd.oasis.opendocument.image-template"],["otp","application/vnd.oasis.opendocument.presentation-template"],["ots","application/vnd.oasis.opendocument.spreadsheet-template"],["ott","application/vnd.oasis.opendocument.text-template"],["ova","application/x-virtualbox-ova"],["ovf","application/x-virtualbox-ovf"],["owl","application/rdf+xml"],["oxps","application/oxps"],["oxt","application/vnd.openofficeorg.extension"],["p","text/x-pascal"],["p7a","application/x-pkcs7-signature"],["p7b","application/x-pkcs7-certificates"],["p7c","application/pkcs7-mime"],["p7m","application/pkcs7-mime"],["p7r","application/x-pkcs7-certreqresp"],["p7s","application/pkcs7-signature"],["p8","application/pkcs8"],["p10","application/x-pkcs10"],["p12","application/x-pkcs12"],["pac","application/x-ns-proxy-autoconfig"],["pages","application/x-iwork-pages-sffpages"],["pas","text/x-pascal"],["paw","application/vnd.pawaafile"],["pbd","application/vnd.powerbuilder6"],["pbm","image/x-portable-bitmap"],["pcap","application/vnd.tcpdump.pcap"],["pcf","application/x-font-pcf"],["pcl","application/vnd.hp-pcl"],["pclxl","application/vnd.hp-pclxl"],["pct","image/x-pict"],["pcurl","application/vnd.curl.pcurl"],["pcx","image/x-pcx"],["pdb","application/x-pilot"],["pde","text/x-processing"],["pdf","application/pdf"],["pem","application/x-x509-user-cert"],["pfa","application/x-font-type1"],["pfb","application/x-font-type1"],["pfm","application/x-font-type1"],["pfr","application/font-tdpfr"],["pfx","application/x-pkcs12"],["pgm","image/x-portable-graymap"],["pgn","application/x-chess-pgn"],["pgp","application/pgp"],["php","application/x-httpd-php"],["php3","application/x-httpd-php"],["php4","application/x-httpd-php"],["phps","application/x-httpd-php-source"],["phtml","application/x-httpd-php"],["pic","image/x-pict"],["pkg","application/octet-stream"],["pki","application/pkixcmp"],["pkipath","application/pkix-pkipath"],["pkpass","application/vnd.apple.pkpass"],["pl","application/x-perl"],["plb","application/vnd.3gpp.pic-bw-large"],["plc","application/vnd.mobius.plc"],["plf","application/vnd.pocketlearn"],["pls","application/pls+xml"],["pm","application/x-perl"],["pml","application/vnd.ctc-posml"],["png","image/png"],["pnm","image/x-portable-anymap"],["portpkg","application/vnd.macports.portpkg"],["pot","application/vnd.ms-powerpoint"],["potm","application/vnd.ms-powerpoint.presentation.macroEnabled.12"],["potx","application/vnd.openxmlformats-officedocument.presentationml.template"],["ppa","application/vnd.ms-powerpoint"],["ppam","application/vnd.ms-powerpoint.addin.macroEnabled.12"],["ppd","application/vnd.cups-ppd"],["ppm","image/x-portable-pixmap"],["pps","application/vnd.ms-powerpoint"],["ppsm","application/vnd.ms-powerpoint.slideshow.macroEnabled.12"],["ppsx","application/vnd.openxmlformats-officedocument.presentationml.slideshow"],["ppt","application/powerpoint"],["pptm","application/vnd.ms-powerpoint.presentation.macroEnabled.12"],["pptx","application/vnd.openxmlformats-officedocument.presentationml.presentation"],["pqa","application/vnd.palm"],["prc","application/x-pilot"],["pre","application/vnd.lotus-freelance"],["prf","application/pics-rules"],["provx","application/provenance+xml"],["ps","application/postscript"],["psb","application/vnd.3gpp.pic-bw-small"],["psd","application/x-photoshop"],["psf","application/x-font-linux-psf"],["pskcxml","application/pskc+xml"],["pti","image/prs.pti"],["ptid","application/vnd.pvi.ptid1"],["pub","application/x-mspublisher"],["pvb","application/vnd.3gpp.pic-bw-var"],["pwn","application/vnd.3m.post-it-notes"],["pya","audio/vnd.ms-playready.media.pya"],["pyv","video/vnd.ms-playready.media.pyv"],["qam","application/vnd.epson.quickanime"],["qbo","application/vnd.intu.qbo"],["qfx","application/vnd.intu.qfx"],["qps","application/vnd.publishare-delta-tree"],["qt","video/quicktime"],["qwd","application/vnd.quark.quarkxpress"],["qwt","application/vnd.quark.quarkxpress"],["qxb","application/vnd.quark.quarkxpress"],["qxd","application/vnd.quark.quarkxpress"],["qxl","application/vnd.quark.quarkxpress"],["qxt","application/vnd.quark.quarkxpress"],["ra","audio/x-realaudio"],["ram","audio/x-pn-realaudio"],["raml","application/raml+yaml"],["rapd","application/route-apd+xml"],["rar","application/x-rar"],["ras","image/x-cmu-raster"],["rcprofile","application/vnd.ipunplugged.rcprofile"],["rdf","application/rdf+xml"],["rdz","application/vnd.data-vision.rdz"],["relo","application/p2p-overlay+xml"],["rep","application/vnd.businessobjects"],["res","application/x-dtbresource+xml"],["rgb","image/x-rgb"],["rif","application/reginfo+xml"],["rip","audio/vnd.rip"],["ris","application/x-research-info-systems"],["rl","application/resource-lists+xml"],["rlc","image/vnd.fujixerox.edmics-rlc"],["rld","application/resource-lists-diff+xml"],["rm","audio/x-pn-realaudio"],["rmi","audio/midi"],["rmp","audio/x-pn-realaudio-plugin"],["rms","application/vnd.jcp.javame.midlet-rms"],["rmvb","application/vnd.rn-realmedia-vbr"],["rnc","application/relax-ng-compact-syntax"],["rng","application/xml"],["roa","application/rpki-roa"],["roff","text/troff"],["rp9","application/vnd.cloanto.rp9"],["rpm","audio/x-pn-realaudio-plugin"],["rpss","application/vnd.nokia.radio-presets"],["rpst","application/vnd.nokia.radio-preset"],["rq","application/sparql-query"],["rs","application/rls-services+xml"],["rsa","application/x-pkcs7"],["rsat","application/atsc-rsat+xml"],["rsd","application/rsd+xml"],["rsheet","application/urc-ressheet+xml"],["rss","application/rss+xml"],["rtf","text/rtf"],["rtx","text/richtext"],["run","application/x-makeself"],["rusd","application/route-usd+xml"],["rv","video/vnd.rn-realvideo"],["s","text/x-asm"],["s3m","audio/s3m"],["saf","application/vnd.yamaha.smaf-audio"],["sass","text/x-sass"],["sbml","application/sbml+xml"],["sc","application/vnd.ibm.secure-container"],["scd","application/x-msschedule"],["scm","application/vnd.lotus-screencam"],["scq","application/scvp-cv-request"],["scs","application/scvp-cv-response"],["scss","text/x-scss"],["scurl","text/vnd.curl.scurl"],["sda","application/vnd.stardivision.draw"],["sdc","application/vnd.stardivision.calc"],["sdd","application/vnd.stardivision.impress"],["sdkd","application/vnd.solent.sdkm+xml"],["sdkm","application/vnd.solent.sdkm+xml"],["sdp","application/sdp"],["sdw","application/vnd.stardivision.writer"],["sea","application/octet-stream"],["see","application/vnd.seemail"],["seed","application/vnd.fdsn.seed"],["sema","application/vnd.sema"],["semd","application/vnd.semd"],["semf","application/vnd.semf"],["senmlx","application/senml+xml"],["sensmlx","application/sensml+xml"],["ser","application/java-serialized-object"],["setpay","application/set-payment-initiation"],["setreg","application/set-registration-initiation"],["sfd-hdstx","application/vnd.hydrostatix.sof-data"],["sfs","application/vnd.spotfire.sfs"],["sfv","text/x-sfv"],["sgi","image/sgi"],["sgl","application/vnd.stardivision.writer-global"],["sgm","text/sgml"],["sgml","text/sgml"],["sh","application/x-sh"],["shar","application/x-shar"],["shex","text/shex"],["shf","application/shf+xml"],["shtml","text/html"],["sid","image/x-mrsid-image"],["sieve","application/sieve"],["sig","application/pgp-signature"],["sil","audio/silk"],["silo","model/mesh"],["sis","application/vnd.symbian.install"],["sisx","application/vnd.symbian.install"],["sit","application/x-stuffit"],["sitx","application/x-stuffitx"],["siv","application/sieve"],["skd","application/vnd.koan"],["skm","application/vnd.koan"],["skp","application/vnd.koan"],["skt","application/vnd.koan"],["sldm","application/vnd.ms-powerpoint.slide.macroenabled.12"],["sldx","application/vnd.openxmlformats-officedocument.presentationml.slide"],["slim","text/slim"],["slm","text/slim"],["sls","application/route-s-tsid+xml"],["slt","application/vnd.epson.salt"],["sm","application/vnd.stepmania.stepchart"],["smf","application/vnd.stardivision.math"],["smi","application/smil"],["smil","application/smil"],["smv","video/x-smv"],["smzip","application/vnd.stepmania.package"],["snd","audio/basic"],["snf","application/x-font-snf"],["so","application/octet-stream"],["spc","application/x-pkcs7-certificates"],["spdx","text/spdx"],["spf","application/vnd.yamaha.smaf-phrase"],["spl","application/x-futuresplash"],["spot","text/vnd.in3d.spot"],["spp","application/scvp-vp-response"],["spq","application/scvp-vp-request"],["spx","audio/ogg"],["sql","application/x-sql"],["src","application/x-wais-source"],["srt","application/x-subrip"],["sru","application/sru+xml"],["srx","application/sparql-results+xml"],["ssdl","application/ssdl+xml"],["sse","application/vnd.kodak-descriptor"],["ssf","application/vnd.epson.ssf"],["ssml","application/ssml+xml"],["sst","application/octet-stream"],["st","application/vnd.sailingtracker.track"],["stc","application/vnd.sun.xml.calc.template"],["std","application/vnd.sun.xml.draw.template"],["stf","application/vnd.wt.stf"],["sti","application/vnd.sun.xml.impress.template"],["stk","application/hyperstudio"],["stl","model/stl"],["stpx","model/step+xml"],["stpxz","model/step-xml+zip"],["stpz","model/step+zip"],["str","application/vnd.pg.format"],["stw","application/vnd.sun.xml.writer.template"],["styl","text/stylus"],["stylus","text/stylus"],["sub","text/vnd.dvb.subtitle"],["sus","application/vnd.sus-calendar"],["susp","application/vnd.sus-calendar"],["sv4cpio","application/x-sv4cpio"],["sv4crc","application/x-sv4crc"],["svc","application/vnd.dvb.service"],["svd","application/vnd.svd"],["svg","image/svg+xml"],["svgz","image/svg+xml"],["swa","application/x-director"],["swf","application/x-shockwave-flash"],["swi","application/vnd.aristanetworks.swi"],["swidtag","application/swid+xml"],["sxc","application/vnd.sun.xml.calc"],["sxd","application/vnd.sun.xml.draw"],["sxg","application/vnd.sun.xml.writer.global"],["sxi","application/vnd.sun.xml.impress"],["sxm","application/vnd.sun.xml.math"],["sxw","application/vnd.sun.xml.writer"],["t","text/troff"],["t3","application/x-t3vm-image"],["t38","image/t38"],["taglet","application/vnd.mynfc"],["tao","application/vnd.tao.intent-module-archive"],["tap","image/vnd.tencent.tap"],["tar","application/x-tar"],["tcap","application/vnd.3gpp2.tcap"],["tcl","application/x-tcl"],["td","application/urc-targetdesc+xml"],["teacher","application/vnd.smart.teacher"],["tei","application/tei+xml"],["teicorpus","application/tei+xml"],["tex","application/x-tex"],["texi","application/x-texinfo"],["texinfo","application/x-texinfo"],["text","text/plain"],["tfi","application/thraud+xml"],["tfm","application/x-tex-tfm"],["tfx","image/tiff-fx"],["tga","image/x-tga"],["tgz","application/x-tar"],["thmx","application/vnd.ms-officetheme"],["tif","image/tiff"],["tiff","image/tiff"],["tk","application/x-tcl"],["tmo","application/vnd.tmobile-livetv"],["toml","application/toml"],["torrent","application/x-bittorrent"],["tpl","application/vnd.groove-tool-template"],["tpt","application/vnd.trid.tpt"],["tr","text/troff"],["tra","application/vnd.trueapp"],["trig","application/trig"],["trm","application/x-msterminal"],["ts","video/mp2t"],["tsd","application/timestamped-data"],["tsv","text/tab-separated-values"],["ttc","font/collection"],["ttf","font/ttf"],["ttl","text/turtle"],["ttml","application/ttml+xml"],["twd","application/vnd.simtech-mindmapper"],["twds","application/vnd.simtech-mindmapper"],["txd","application/vnd.genomatix.tuxedo"],["txf","application/vnd.mobius.txf"],["txt","text/plain"],["u8dsn","message/global-delivery-status"],["u8hdr","message/global-headers"],["u8mdn","message/global-disposition-notification"],["u8msg","message/global"],["u32","application/x-authorware-bin"],["ubj","application/ubjson"],["udeb","application/x-debian-package"],["ufd","application/vnd.ufdl"],["ufdl","application/vnd.ufdl"],["ulx","application/x-glulx"],["umj","application/vnd.umajin"],["unityweb","application/vnd.unity"],["uoml","application/vnd.uoml+xml"],["uri","text/uri-list"],["uris","text/uri-list"],["urls","text/uri-list"],["usdz","model/vnd.usdz+zip"],["ustar","application/x-ustar"],["utz","application/vnd.uiq.theme"],["uu","text/x-uuencode"],["uva","audio/vnd.dece.audio"],["uvd","application/vnd.dece.data"],["uvf","application/vnd.dece.data"],["uvg","image/vnd.dece.graphic"],["uvh","video/vnd.dece.hd"],["uvi","image/vnd.dece.graphic"],["uvm","video/vnd.dece.mobile"],["uvp","video/vnd.dece.pd"],["uvs","video/vnd.dece.sd"],["uvt","application/vnd.dece.ttml+xml"],["uvu","video/vnd.uvvu.mp4"],["uvv","video/vnd.dece.video"],["uvva","audio/vnd.dece.audio"],["uvvd","application/vnd.dece.data"],["uvvf","application/vnd.dece.data"],["uvvg","image/vnd.dece.graphic"],["uvvh","video/vnd.dece.hd"],["uvvi","image/vnd.dece.graphic"],["uvvm","video/vnd.dece.mobile"],["uvvp","video/vnd.dece.pd"],["uvvs","video/vnd.dece.sd"],["uvvt","application/vnd.dece.ttml+xml"],["uvvu","video/vnd.uvvu.mp4"],["uvvv","video/vnd.dece.video"],["uvvx","application/vnd.dece.unspecified"],["uvvz","application/vnd.dece.zip"],["uvx","application/vnd.dece.unspecified"],["uvz","application/vnd.dece.zip"],["vbox","application/x-virtualbox-vbox"],["vbox-extpack","application/x-virtualbox-vbox-extpack"],["vcard","text/vcard"],["vcd","application/x-cdlink"],["vcf","text/x-vcard"],["vcg","application/vnd.groove-vcard"],["vcs","text/x-vcalendar"],["vcx","application/vnd.vcx"],["vdi","application/x-virtualbox-vdi"],["vds","model/vnd.sap.vds"],["vhd","application/x-virtualbox-vhd"],["vis","application/vnd.visionary"],["viv","video/vnd.vivo"],["vlc","application/videolan"],["vmdk","application/x-virtualbox-vmdk"],["vob","video/x-ms-vob"],["vor","application/vnd.stardivision.writer"],["vox","application/x-authorware-bin"],["vrml","model/vrml"],["vsd","application/vnd.visio"],["vsf","application/vnd.vsf"],["vss","application/vnd.visio"],["vst","application/vnd.visio"],["vsw","application/vnd.visio"],["vtf","image/vnd.valve.source.texture"],["vtt","text/vtt"],["vtu","model/vnd.vtu"],["vxml","application/voicexml+xml"],["w3d","application/x-director"],["wad","application/x-doom"],["wadl","application/vnd.sun.wadl+xml"],["war","application/java-archive"],["wasm","application/wasm"],["wav","audio/x-wav"],["wax","audio/x-ms-wax"],["wbmp","image/vnd.wap.wbmp"],["wbs","application/vnd.criticaltools.wbs+xml"],["wbxml","application/wbxml"],["wcm","application/vnd.ms-works"],["wdb","application/vnd.ms-works"],["wdp","image/vnd.ms-photo"],["weba","audio/webm"],["webapp","application/x-web-app-manifest+json"],["webm","video/webm"],["webmanifest","application/manifest+json"],["webp","image/webp"],["wg","application/vnd.pmi.widget"],["wgt","application/widget"],["wks","application/vnd.ms-works"],["wm","video/x-ms-wm"],["wma","audio/x-ms-wma"],["wmd","application/x-ms-wmd"],["wmf","image/wmf"],["wml","text/vnd.wap.wml"],["wmlc","application/wmlc"],["wmls","text/vnd.wap.wmlscript"],["wmlsc","application/vnd.wap.wmlscriptc"],["wmv","video/x-ms-wmv"],["wmx","video/x-ms-wmx"],["wmz","application/x-msmetafile"],["woff","font/woff"],["woff2","font/woff2"],["word","application/msword"],["wpd","application/vnd.wordperfect"],["wpl","application/vnd.ms-wpl"],["wps","application/vnd.ms-works"],["wqd","application/vnd.wqd"],["wri","application/x-mswrite"],["wrl","model/vrml"],["wsc","message/vnd.wfa.wsc"],["wsdl","application/wsdl+xml"],["wspolicy","application/wspolicy+xml"],["wtb","application/vnd.webturbo"],["wvx","video/x-ms-wvx"],["x3d","model/x3d+xml"],["x3db","model/x3d+fastinfoset"],["x3dbz","model/x3d+binary"],["x3dv","model/x3d-vrml"],["x3dvz","model/x3d+vrml"],["x3dz","model/x3d+xml"],["x32","application/x-authorware-bin"],["x_b","model/vnd.parasolid.transmit.binary"],["x_t","model/vnd.parasolid.transmit.text"],["xaml","application/xaml+xml"],["xap","application/x-silverlight-app"],["xar","application/vnd.xara"],["xav","application/xcap-att+xml"],["xbap","application/x-ms-xbap"],["xbd","application/vnd.fujixerox.docuworks.binder"],["xbm","image/x-xbitmap"],["xca","application/xcap-caps+xml"],["xcs","application/calendar+xml"],["xdf","application/xcap-diff+xml"],["xdm","application/vnd.syncml.dm+xml"],["xdp","application/vnd.adobe.xdp+xml"],["xdssc","application/dssc+xml"],["xdw","application/vnd.fujixerox.docuworks"],["xel","application/xcap-el+xml"],["xenc","application/xenc+xml"],["xer","application/patch-ops-error+xml"],["xfdf","application/vnd.adobe.xfdf"],["xfdl","application/vnd.xfdl"],["xht","application/xhtml+xml"],["xhtml","application/xhtml+xml"],["xhvml","application/xv+xml"],["xif","image/vnd.xiff"],["xl","application/excel"],["xla","application/vnd.ms-excel"],["xlam","application/vnd.ms-excel.addin.macroEnabled.12"],["xlc","application/vnd.ms-excel"],["xlf","application/xliff+xml"],["xlm","application/vnd.ms-excel"],["xls","application/vnd.ms-excel"],["xlsb","application/vnd.ms-excel.sheet.binary.macroEnabled.12"],["xlsm","application/vnd.ms-excel.sheet.macroEnabled.12"],["xlsx","application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"],["xlt","application/vnd.ms-excel"],["xltm","application/vnd.ms-excel.template.macroEnabled.12"],["xltx","application/vnd.openxmlformats-officedocument.spreadsheetml.template"],["xlw","application/vnd.ms-excel"],["xm","audio/xm"],["xml","application/xml"],["xns","application/xcap-ns+xml"],["xo","application/vnd.olpc-sugar"],["xop","application/xop+xml"],["xpi","application/x-xpinstall"],["xpl","application/xproc+xml"],["xpm","image/x-xpixmap"],["xpr","application/vnd.is-xpr"],["xps","application/vnd.ms-xpsdocument"],["xpw","application/vnd.intercon.formnet"],["xpx","application/vnd.intercon.formnet"],["xsd","application/xml"],["xsl","application/xml"],["xslt","application/xslt+xml"],["xsm","application/vnd.syncml+xml"],["xspf","application/xspf+xml"],["xul","application/vnd.mozilla.xul+xml"],["xvm","application/xv+xml"],["xvml","application/xv+xml"],["xwd","image/x-xwindowdump"],["xyz","chemical/x-xyz"],["xz","application/x-xz"],["yaml","text/yaml"],["yang","application/yang"],["yin","application/yin+xml"],["yml","text/yaml"],["ymp","text/x-suse-ymp"],["z","application/x-compress"],["z1","application/x-zmachine"],["z2","application/x-zmachine"],["z3","application/x-zmachine"],["z4","application/x-zmachine"],["z5","application/x-zmachine"],["z6","application/x-zmachine"],["z7","application/x-zmachine"],["z8","application/x-zmachine"],["zaz","application/vnd.zzazz.deck+xml"],["zip","application/zip"],["zir","application/vnd.zul"],["zirz","application/vnd.zul"],["zmm","application/vnd.handheld-entertainment+xml"],["zsh","text/x-scriptzsh"]]);function vi(i,a,t){const n=function(i){const{name:a}=i;if(a&&-1!==a.lastIndexOf(".")&&!i.type){const t=a.split(".").pop().toLowerCase(),n=mi.get(t);n&&Object.defineProperty(i,"type",{value:n,writable:!1,configurable:!1,enumerable:!0})}return i}(i),{webkitRelativePath:e}=i,p="string"==typeof a?a:"string"==typeof e&&e.length>0?e:`./${i.name}`;return"string"!=typeof n.path&&ui(n,"path",p),void 0!==t&&Object.defineProperty(n,"handle",{value:t,writable:!1,configurable:!1,enumerable:!0}),ui(n,"relativePath",p),n}function ui(i,a,t){Object.defineProperty(i,a,{value:t,writable:!1,configurable:!1,enumerable:!0})}const xi=[".DS_Store","Thumbs.db"];function fi(i){return"object"==typeof i&&null!==i}function gi(i){return i.filter((i=>-1===xi.indexOf(i.name)))}function hi(i){if(null===i)return[];const a=[];for(let t=0;t<i.length;t++){const n=i[t];a.push(n)}return a}function bi(i){if("function"!=typeof i.webkitGetAsEntry)return wi(i);const a=i.webkitGetAsEntry();return a&&a.isDirectory?ji(a):wi(i,a)}function yi(i){return i.reduce(((i,a)=>[...i,...Array.isArray(a)?yi(a):[a]]),[])}function wi(i,a){var t;if("function"==typeof i.getAsFileSystemHandle)return i.getAsFileSystemHandle().then((i=>di(this,void 0,void 0,(function*(){const a=yield i.getFile();return a.handle=i,vi(a)}))));const n=i.getAsFile();if(!n)return Promise.reject(`${i} is not a File`);const e=vi(n,null!==(t=null==a?void 0:a.fullPath)&&void 0!==t?t:void 0);return Promise.resolve(e)}function ki(i){return di(this,void 0,void 0,(function*(){return i.isDirectory?ji(i):function(i){return di(this,void 0,void 0,(function*(){return new Promise(((a,t)=>{i.file((t=>{const n=vi(t,i.fullPath);a(n)}),(i=>{t(i)}))}))}))}(i)}))}function ji(i){const a=i.createReader();return new Promise(((i,t)=>{const n=[];!function e(){a.readEntries((a=>di(this,void 0,void 0,(function*(){if(a.length){const i=Promise.all(a.map(ki));n.push(i),e()}else try{const a=yield Promise.all(n);i(a)}catch(i){t(i)}}))),(i=>{t(i)}))}()}))}var zi="file-invalid-type",Oi="file-too-large",Di="file-too-small",Ai={code:"too-many-files",message:"Too many files"};function Pi(i,a){var t="application/x-moz-file"===i.type||function(i,a){if(i&&a){var t=Array.isArray(a)?a:a.split(","),n=i.name||"",e=(i.type||"").toLowerCase(),p=e.replace(/\/.*$/,"");return t.some((function(i){var a=i.trim().toLowerCase();return"."===a.charAt(0)?n.toLowerCase().endsWith(a):a.endsWith("/*")?p===a.replace(/\/.*$/,""):e===a}))}return!0}(i,a);return[t,t?null:{code:zi,message:"File type must be ".concat(a)}]}function qi(i,a,t){if(Fi(i.size))if(Fi(a)&&Fi(t)){if(i.size>t)return[!1,{code:Oi,message:"File is larger than ".concat(t," bytes")}];if(i.size<a)return[!1,{code:Di,message:"File is smaller than ".concat(a," bytes")}]}else{if(Fi(a)&&i.size<a)return[!1,{code:Di,message:"File is smaller than ".concat(a," bytes")}];if(Fi(t)&&i.size>t)return[!1,{code:Oi,message:"File is larger than ".concat(t," bytes")}]}return[!0,null]}function Fi(i){return null!=i}function Ei(i){var a=i.files,t=i.accept,n=i.minSize,e=i.maxSize,o=i.multiple,l=i.maxFiles,c=i.validator;return!(!o&&a.length>1||o&&l>=1&&a.length>l)&&a.every((function(i){var a=p(Pi(i,t),1)[0],o=p(qi(i,n,e),1)[0],l=c?c(i):null;return a&&o&&!l}))}function Si(i){if(void 0!==i)return Object.entries(i).reduce((function(i,a){var t=p(a,2),n=t[0],e=t[1];return[].concat(o(i),[n],o(e))}),[]).join(",")}function Ci(i){if(void 0!==i)return Object.entries(i).map((function(i){var a=p(i,2);return{description:"Files",accept:n({},a[0],a[1])}}))}function _i(){for(var i=arguments.length,a=new Array(i),t=0;t<i;t++)a[t]=arguments[t];return function(i){for(var t=arguments.length,n=new Array(t>1?t-1:0),e=1;e<t;e++)n[e-1]=arguments[e];return a.some((function(a){return a&&a.apply(void 0,[i].concat(n)),i.defaultPrevented||i.propagationStopped}))}}function Li(i){return i.dataTransfer?Array.prototype.some.call(i.dataTransfer.types,(function(i){return"Files"===i||"application/x-moz-file"===i})):!!i.target&&!!i.target.files}function Ri(i){return"function"==typeof i.isPropagationStopped?i.isPropagationStopped():void 0!==i.cancelBubble&&i.cancelBubble}var Ti=function(i){i.preventDefault()};function $i(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.navigator.userAgent;return i.indexOf("MSIE ")>0||i.indexOf("Trident/")>0||i.indexOf("Edge/")>0}function Ii(){return"showOpenFilePicker"in window}function Bi(i){return"AbortError"===i.name}function Ki(i){return"SecurityError"===i.name}var Mi=["open"],Ni={disabled:!1,getFilesFromEvent:function(i){return di(this,void 0,void 0,(function*(){return fi(i)&&fi(i.dataTransfer)?function(i,a){return di(this,void 0,void 0,(function*(){if(i.items){const t=hi(i.items).filter((i=>"file"===i.kind));if("drop"!==a)return t;return gi(yi(yield Promise.all(t.map(bi))))}return gi(hi(i.files).map((i=>vi(i))))}))}(i.dataTransfer,i.type):function(i){return fi(i)&&fi(i.target)}(i)?function(i){return hi(i.target.files).map((i=>vi(i)))}(i):Array.isArray(i)&&i.every((i=>"getFile"in i&&"function"==typeof i.getFile))?function(i){return di(this,void 0,void 0,(function*(){return(yield Promise.all(i.map((i=>i.getFile())))).map((i=>vi(i)))}))}(i):[]}))},maxSize:1/0,minSize:0,multiple:!0,maxFiles:0,preventDropOnDocument:!0,noClick:!1,noKeyboard:!1,noDrag:!1,noDragEventsBubbling:!1,validator:null,useFsAccessApi:!1,autoFocus:!1},Wi={isFocused:!1,isFileDialogActive:!1,isDragActive:!1,isDragAccept:!1,isDragReject:!1,acceptedFiles:[],fileRejections:[]};function Gi(){var i,a,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=G(Ni,n),l=[],c=li(Wi),r=p(c,2),s=r[0],d=r[1],m="undefined"!=typeof window&&window.isSecureContext&&e.useFsAccessApi&&Ii(),v=k(m),u=p(v,2),x=u[0],f=u[1],g=z((function(){return Si(e.accept)})),h=z((function(){return Ci(e.accept)})),b=function(){"function"==typeof e.onFileDialogOpen&&e.onFileDialogOpen()},y=function(){"function"==typeof e.onFileDialogCancel&&e.onFileDialogCancel()},w=function(){!x()&&s.isFileDialogActive&&setTimeout((function(){a&&(a.files.length||(d("isFileDialogActive",!1),y()))}),300)};j((function(){window.addEventListener("focus",w,!1),A((function(){window.removeEventListener("focus",w,!1)}))}));var O=function(a){i&&i.contains(a.target)||(a.preventDefault(),l=[])};j((function(){e.preventDropOnDocument&&(document.addEventListener("dragover",Ti,!1),document.addEventListener("drop",O,!1)),A((function(){e.preventDropOnDocument&&(document.removeEventListener("dragover",Ti),document.removeEventListener("drop",O))}))})),D((function(){!e.disabled&&e.autoFocus&&i&&i.focus()}));var P=function(i){e.onError?e.onError(i):console.error(i)},q=function(i){i.preventDefault(),M(i),l=[].concat(o(l),[i.target]),Li(i)&&Promise.resolve(e.getFilesFromEvent(i)).then((function(a){if(!Ri(i)||e.noDragEventsBubbling){var t=a.length,n=t>0&&Ei({files:a,accept:g(),minSize:e.minSize,maxSize:e.maxSize,multiple:e.multiple,maxFiles:e.maxFiles,validator:e.validator}),p=t>0&&!n;d(si((function(i){i.isDragActive=!0,i.isDragAccept=n,i.isDragReject=p}))),e.onDragEnter&&e.onDragEnter(i)}})).catch((function(i){return P(i)}))},F=function(i){i.preventDefault(),M(i);var a=Li(i);if(a&&i.dataTransfer)try{i.dataTransfer.dropEffect="copy"}catch(i){}return a&&e.onDragOver&&e.onDragOver(i),!1},E=function(a){a.preventDefault(),M(a);var t=l.filter((function(a){return i&&i.contains(a)})),n=t.indexOf(a.target);-1!==n&&t.splice(n,1),l=t,t.length>0||(d(si((function(i){i.isDragActive=!1,i.isDragAccept=!1,i.isDragReject=!1}))),Li(a)&&e.onDragLeave&&e.onDragLeave(a))},S=function(i,a){var t=[],n=[];i.forEach((function(i){var a=p(Pi(i,g()),2),o=a[0],l=a[1],c=p(qi(i,e.minSize,e.maxSize),2),r=c[0],s=c[1],d=e.validator?e.validator(i):null;if(o&&r&&!d)t.push(i);else{var m=[l,s];d&&(m=m.concat(d)),n.push({file:i,errors:m.filter((function(i){return i}))})}})),(!e.multiple&&t.length>1||e.multiple&&e.maxFiles>=1&&t.length>e.maxFiles)&&(t.forEach((function(i){n.push({file:i,errors:[Ai]})})),t.splice(0)),d(si((function(i){i.acceptedFiles=t,i.fileRejections=n,i.isDragReject=n.length>0}))),e.onDrop&&e.onDrop(t,n,a),n.length>0&&e.onDropRejected&&e.onDropRejected(n,a),t.length>0&&e.onDropAccepted&&e.onDropAccepted(t,a)},C=function(i){i.preventDefault(),M(i),l=[],Li(i)&&Promise.resolve(e.getFilesFromEvent(i)).then((function(a){Ri(i)&&!e.noDragEventsBubbling||S(a,i)})).catch((function(i){return P(i)})),d(si((function(i){return Object.assign(i,Wi)})))},_=function(){if(x()){d("isFileDialogActive",!0),b();var i={multiple:e.multiple,types:h()};window.showOpenFilePicker(i).then((function(i){return e.getFilesFromEvent(i)})).then((function(i){S(i,null),d("isFileDialogActive",!1)})).catch((function(i){Bi(i)?(y(),d("isFileDialogActive",!1)):Ki(i)?(f(!1),a?(a.value=null,a.click()):P(new Error("Cannot open the file picker because the File System Access API is not supported and no <input> was provided."))):P(i)}))}else a&&(d("isFileDialogActive",!0),b(),a.value=null,a.click())},L=function(a){i&&i.isEqualNode(a.target)&&(" "!==a.key&&"Enter"!==a.key||(a.preventDefault(),_()))},R=function(){return d("isFocused",!0)},T=function(){return d("isFocused",!1)},$=function(){e.noClick||($i()?setTimeout(_,0):_())},I=function(i){return e.disabled?null:i},B=function(i){return e.noKeyboard?null:I(i)},K=function(i){return e.noDrag?null:I(i)},M=function(i){e.noDragEventsBubbling&&i.stopPropagation()},N=z((function(){return function(){var a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=H(a,["ref","role","onKeyDown","onFocus","onBlur","onClick","onDragEnter","onDragOver","onDragLeave","onDrop"]),o=p(n,2);o[0];var l=o[1];return t(t({onKeyDown:B(_i(a.onKeyDown,L)),onFocus:B(_i(a.onFocus,R)),onBlur:B(_i(a.onBlur,T)),onClick:I(_i(a.onClick,$)),onDragEnter:K(_i(a.onDragEnter,q)),onDragOver:K(_i(a.onDragOver,F)),onDragLeave:K(_i(a.onDragLeave,E)),onDrop:K(_i(a.onDrop,C)),role:"string"==typeof a.role&&""!==a.role?a.role:"presentation",ref:function(a){return i=a}},e.disabled||e.noKeyboard?{}:{tabindex:0}),l)}})),W=function(i){i.stopPropagation()},U=z((function(){return function(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=H(i,["ref","onChange","onClick"]),o=p(n,2);o[0];var l=o[1],c={accept:g(),multiple:e.multiple,type:"file",style:{border:0,clip:"rect(0, 0, 0, 0)","clip-path":"inset(50%)",height:"1px",margin:"0 -1px -1px 0",overflow:"hidden",padding:0,position:"absolute",width:"1px","white-space":"nowrap"},onChange:I(_i(i.onChange,C)),onClick:I(_i(i.onClick,W)),tabIndex:-1,ref:function(i){return a=i}};return t(t({},c),l)}})),J=z((function(){return s.isFocused&&!e.disabled}));return t(t({},s),{},{get isFocused(){return J()},getRootProps:N,getInputProps:U,get open(){return I(_)}})}i.createDropzone=Gi,i.default=function(i){var a=p(H(i,["children","ref"]),2),n=a[0],o=Gi(a[1]),l=o.open,c=e(o,Mi);return j((function(){var i=n.ref;i&&("function"==typeof i?i({open:l}):i.open=l)})),React.createElement(React.Fragment,null,n.children(t(t({},c),{},{open:l})))},Object.defineProperty(i,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zb2xpZC1qcy9kaXN0L3NvbGlkLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3NvbGlkLWpzL3N0b3JlL2Rpc3Qvc3RvcmUuanMiLCIuLi9ub2RlX21vZHVsZXMvZmlsZS1zZWxlY3Rvci9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2Lm1qcyIsIi4uL25vZGVfbW9kdWxlcy9maWxlLXNlbGVjdG9yL2Rpc3QvZXMyMDE1L2ZpbGUuanMiLCIuLi9ub2RlX21vZHVsZXMvZmlsZS1zZWxlY3Rvci9kaXN0L2VzMjAxNS9maWxlLXNlbGVjdG9yLmpzIiwiLi4vc3JjL3V0aWxzL2luZGV4LmpzIiwiLi4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImxldCB0YXNrSWRDb3VudGVyID0gMSxcbiAgaXNDYWxsYmFja1NjaGVkdWxlZCA9IGZhbHNlLFxuICBpc1BlcmZvcm1pbmdXb3JrID0gZmFsc2UsXG4gIHRhc2tRdWV1ZSA9IFtdLFxuICBjdXJyZW50VGFzayA9IG51bGwsXG4gIHNob3VsZFlpZWxkVG9Ib3N0ID0gbnVsbCxcbiAgeWllbGRJbnRlcnZhbCA9IDUsXG4gIGRlYWRsaW5lID0gMCxcbiAgbWF4WWllbGRJbnRlcnZhbCA9IDMwMCxcbiAgc2NoZWR1bGVDYWxsYmFjayA9IG51bGwsXG4gIHNjaGVkdWxlZENhbGxiYWNrID0gbnVsbDtcbmNvbnN0IG1heFNpZ25lZDMxQml0SW50ID0gMTA3Mzc0MTgyMztcbmZ1bmN0aW9uIHNldHVwU2NoZWR1bGVyKCkge1xuICBjb25zdCBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCksXG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gIHNjaGVkdWxlQ2FsbGJhY2sgPSAoKSA9PiBwb3J0LnBvc3RNZXNzYWdlKG51bGwpO1xuICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9ICgpID0+IHtcbiAgICBpZiAoc2NoZWR1bGVkQ2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICBkZWFkbGluZSA9IGN1cnJlbnRUaW1lICsgeWllbGRJbnRlcnZhbDtcbiAgICAgIGNvbnN0IGhhc1RpbWVSZW1haW5pbmcgPSB0cnVlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaGFzTW9yZVdvcmsgPSBzY2hlZHVsZWRDYWxsYmFjayhoYXNUaW1lUmVtYWluaW5nLCBjdXJyZW50VGltZSk7XG4gICAgICAgIGlmICghaGFzTW9yZVdvcmspIHtcbiAgICAgICAgICBzY2hlZHVsZWRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBwb3J0LnBvc3RNZXNzYWdlKG51bGwpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcG9ydC5wb3N0TWVzc2FnZShudWxsKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBpZiAobmF2aWdhdG9yICYmIG5hdmlnYXRvci5zY2hlZHVsaW5nICYmIG5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nKSB7XG4gICAgY29uc3Qgc2NoZWR1bGluZyA9IG5hdmlnYXRvci5zY2hlZHVsaW5nO1xuICAgIHNob3VsZFlpZWxkVG9Ib3N0ID0gKCkgPT4ge1xuICAgICAgY29uc3QgY3VycmVudFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIGlmIChjdXJyZW50VGltZSA+PSBkZWFkbGluZSkge1xuICAgICAgICBpZiAoc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZygpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN1cnJlbnRUaW1lID49IG1heFlpZWxkSW50ZXJ2YWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBzaG91bGRZaWVsZFRvSG9zdCA9ICgpID0+IHBlcmZvcm1hbmNlLm5vdygpID49IGRlYWRsaW5lO1xuICB9XG59XG5mdW5jdGlvbiBlbnF1ZXVlKHRhc2tRdWV1ZSwgdGFzaykge1xuICBmdW5jdGlvbiBmaW5kSW5kZXgoKSB7XG4gICAgbGV0IG0gPSAwO1xuICAgIGxldCBuID0gdGFza1F1ZXVlLmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKG0gPD0gbikge1xuICAgICAgY29uc3QgayA9IG4gKyBtID4+IDE7XG4gICAgICBjb25zdCBjbXAgPSB0YXNrLmV4cGlyYXRpb25UaW1lIC0gdGFza1F1ZXVlW2tdLmV4cGlyYXRpb25UaW1lO1xuICAgICAgaWYgKGNtcCA+IDApIG0gPSBrICsgMTtlbHNlIGlmIChjbXAgPCAwKSBuID0gayAtIDE7ZWxzZSByZXR1cm4gaztcbiAgICB9XG4gICAgcmV0dXJuIG07XG4gIH1cbiAgdGFza1F1ZXVlLnNwbGljZShmaW5kSW5kZXgoKSwgMCwgdGFzayk7XG59XG5mdW5jdGlvbiByZXF1ZXN0Q2FsbGJhY2soZm4sIG9wdGlvbnMpIHtcbiAgaWYgKCFzY2hlZHVsZUNhbGxiYWNrKSBzZXR1cFNjaGVkdWxlcigpO1xuICBsZXQgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCksXG4gICAgdGltZW91dCA9IG1heFNpZ25lZDMxQml0SW50O1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRpbWVvdXQpIHRpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQ7XG4gIGNvbnN0IG5ld1Rhc2sgPSB7XG4gICAgaWQ6IHRhc2tJZENvdW50ZXIrKyxcbiAgICBmbixcbiAgICBzdGFydFRpbWUsXG4gICAgZXhwaXJhdGlvblRpbWU6IHN0YXJ0VGltZSArIHRpbWVvdXRcbiAgfTtcbiAgZW5xdWV1ZSh0YXNrUXVldWUsIG5ld1Rhc2spO1xuICBpZiAoIWlzQ2FsbGJhY2tTY2hlZHVsZWQgJiYgIWlzUGVyZm9ybWluZ1dvcmspIHtcbiAgICBpc0NhbGxiYWNrU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBzY2hlZHVsZWRDYWxsYmFjayA9IGZsdXNoV29yaztcbiAgICBzY2hlZHVsZUNhbGxiYWNrKCk7XG4gIH1cbiAgcmV0dXJuIG5ld1Rhc2s7XG59XG5mdW5jdGlvbiBjYW5jZWxDYWxsYmFjayh0YXNrKSB7XG4gIHRhc2suZm4gPSBudWxsO1xufVxuZnVuY3Rpb24gZmx1c2hXb3JrKGhhc1RpbWVSZW1haW5pbmcsIGluaXRpYWxUaW1lKSB7XG4gIGlzQ2FsbGJhY2tTY2hlZHVsZWQgPSBmYWxzZTtcbiAgaXNQZXJmb3JtaW5nV29yayA9IHRydWU7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdvcmtMb29wKGhhc1RpbWVSZW1haW5pbmcsIGluaXRpYWxUaW1lKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBjdXJyZW50VGFzayA9IG51bGw7XG4gICAgaXNQZXJmb3JtaW5nV29yayA9IGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiB3b3JrTG9vcChoYXNUaW1lUmVtYWluaW5nLCBpbml0aWFsVGltZSkge1xuICBsZXQgY3VycmVudFRpbWUgPSBpbml0aWFsVGltZTtcbiAgY3VycmVudFRhc2sgPSB0YXNrUXVldWVbMF0gfHwgbnVsbDtcbiAgd2hpbGUgKGN1cnJlbnRUYXNrICE9PSBudWxsKSB7XG4gICAgaWYgKGN1cnJlbnRUYXNrLmV4cGlyYXRpb25UaW1lID4gY3VycmVudFRpbWUgJiYgKCFoYXNUaW1lUmVtYWluaW5nIHx8IHNob3VsZFlpZWxkVG9Ib3N0KCkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY29uc3QgY2FsbGJhY2sgPSBjdXJyZW50VGFzay5mbjtcbiAgICBpZiAoY2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIGN1cnJlbnRUYXNrLmZuID0gbnVsbDtcbiAgICAgIGNvbnN0IGRpZFVzZXJDYWxsYmFja1RpbWVvdXQgPSBjdXJyZW50VGFzay5leHBpcmF0aW9uVGltZSA8PSBjdXJyZW50VGltZTtcbiAgICAgIGNhbGxiYWNrKGRpZFVzZXJDYWxsYmFja1RpbWVvdXQpO1xuICAgICAgY3VycmVudFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIGlmIChjdXJyZW50VGFzayA9PT0gdGFza1F1ZXVlWzBdKSB7XG4gICAgICAgIHRhc2tRdWV1ZS5zaGlmdCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB0YXNrUXVldWUuc2hpZnQoKTtcbiAgICBjdXJyZW50VGFzayA9IHRhc2tRdWV1ZVswXSB8fCBudWxsO1xuICB9XG4gIHJldHVybiBjdXJyZW50VGFzayAhPT0gbnVsbDtcbn1cblxuY29uc3Qgc2hhcmVkQ29uZmlnID0ge1xuICBjb250ZXh0OiB1bmRlZmluZWQsXG4gIHJlZ2lzdHJ5OiB1bmRlZmluZWQsXG4gIGVmZmVjdHM6IHVuZGVmaW5lZCxcbiAgZG9uZTogZmFsc2UsXG4gIGdldENvbnRleHRJZCgpIHtcbiAgICByZXR1cm4gZ2V0Q29udGV4dElkKHRoaXMuY29udGV4dC5jb3VudCk7XG4gIH0sXG4gIGdldE5leHRDb250ZXh0SWQoKSB7XG4gICAgcmV0dXJuIGdldENvbnRleHRJZCh0aGlzLmNvbnRleHQuY291bnQrKyk7XG4gIH1cbn07XG5mdW5jdGlvbiBnZXRDb250ZXh0SWQoY291bnQpIHtcbiAgY29uc3QgbnVtID0gU3RyaW5nKGNvdW50KSxcbiAgICBsZW4gPSBudW0ubGVuZ3RoIC0gMTtcbiAgcmV0dXJuIHNoYXJlZENvbmZpZy5jb250ZXh0LmlkICsgKGxlbiA/IFN0cmluZy5mcm9tQ2hhckNvZGUoOTYgKyBsZW4pIDogXCJcIikgKyBudW07XG59XG5mdW5jdGlvbiBzZXRIeWRyYXRlQ29udGV4dChjb250ZXh0KSB7XG4gIHNoYXJlZENvbmZpZy5jb250ZXh0ID0gY29udGV4dDtcbn1cbmZ1bmN0aW9uIG5leHRIeWRyYXRlQ29udGV4dCgpIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5zaGFyZWRDb25maWcuY29udGV4dCxcbiAgICBpZDogc2hhcmVkQ29uZmlnLmdldE5leHRDb250ZXh0SWQoKSxcbiAgICBjb3VudDogMFxuICB9O1xufVxuXG5jb25zdCBJU19ERVYgPSBmYWxzZTtcbmNvbnN0IGVxdWFsRm4gPSAoYSwgYikgPT4gYSA9PT0gYjtcbmNvbnN0ICRQUk9YWSA9IFN5bWJvbChcInNvbGlkLXByb3h5XCIpO1xuY29uc3QgU1VQUE9SVFNfUFJPWFkgPSB0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIjtcbmNvbnN0ICRUUkFDSyA9IFN5bWJvbChcInNvbGlkLXRyYWNrXCIpO1xuY29uc3QgJERFVkNPTVAgPSBTeW1ib2woXCJzb2xpZC1kZXYtY29tcG9uZW50XCIpO1xuY29uc3Qgc2lnbmFsT3B0aW9ucyA9IHtcbiAgZXF1YWxzOiBlcXVhbEZuXG59O1xubGV0IEVSUk9SID0gbnVsbDtcbmxldCBydW5FZmZlY3RzID0gcnVuUXVldWU7XG5jb25zdCBTVEFMRSA9IDE7XG5jb25zdCBQRU5ESU5HID0gMjtcbmNvbnN0IFVOT1dORUQgPSB7XG4gIG93bmVkOiBudWxsLFxuICBjbGVhbnVwczogbnVsbCxcbiAgY29udGV4dDogbnVsbCxcbiAgb3duZXI6IG51bGxcbn07XG5jb25zdCBOT19JTklUID0ge307XG52YXIgT3duZXIgPSBudWxsO1xubGV0IFRyYW5zaXRpb24gPSBudWxsO1xubGV0IFNjaGVkdWxlciA9IG51bGw7XG5sZXQgRXh0ZXJuYWxTb3VyY2VDb25maWcgPSBudWxsO1xubGV0IExpc3RlbmVyID0gbnVsbDtcbmxldCBVcGRhdGVzID0gbnVsbDtcbmxldCBFZmZlY3RzID0gbnVsbDtcbmxldCBFeGVjQ291bnQgPSAwO1xuZnVuY3Rpb24gY3JlYXRlUm9vdChmbiwgZGV0YWNoZWRPd25lcikge1xuICBjb25zdCBsaXN0ZW5lciA9IExpc3RlbmVyLFxuICAgIG93bmVyID0gT3duZXIsXG4gICAgdW5vd25lZCA9IGZuLmxlbmd0aCA9PT0gMCxcbiAgICBjdXJyZW50ID0gZGV0YWNoZWRPd25lciA9PT0gdW5kZWZpbmVkID8gb3duZXIgOiBkZXRhY2hlZE93bmVyLFxuICAgIHJvb3QgPSB1bm93bmVkID8gVU5PV05FRCA6IHtcbiAgICAgIG93bmVkOiBudWxsLFxuICAgICAgY2xlYW51cHM6IG51bGwsXG4gICAgICBjb250ZXh0OiBjdXJyZW50ID8gY3VycmVudC5jb250ZXh0IDogbnVsbCxcbiAgICAgIG93bmVyOiBjdXJyZW50XG4gICAgfSxcbiAgICB1cGRhdGVGbiA9IHVub3duZWQgPyBmbiA6ICgpID0+IGZuKCgpID0+IHVudHJhY2soKCkgPT4gY2xlYW5Ob2RlKHJvb3QpKSk7XG4gIE93bmVyID0gcm9vdDtcbiAgTGlzdGVuZXIgPSBudWxsO1xuICB0cnkge1xuICAgIHJldHVybiBydW5VcGRhdGVzKHVwZGF0ZUZuLCB0cnVlKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBMaXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgIE93bmVyID0gb3duZXI7XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVNpZ25hbCh2YWx1ZSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyA/IE9iamVjdC5hc3NpZ24oe30sIHNpZ25hbE9wdGlvbnMsIG9wdGlvbnMpIDogc2lnbmFsT3B0aW9ucztcbiAgY29uc3QgcyA9IHtcbiAgICB2YWx1ZSxcbiAgICBvYnNlcnZlcnM6IG51bGwsXG4gICAgb2JzZXJ2ZXJTbG90czogbnVsbCxcbiAgICBjb21wYXJhdG9yOiBvcHRpb25zLmVxdWFscyB8fCB1bmRlZmluZWRcbiAgfTtcbiAgY29uc3Qgc2V0dGVyID0gdmFsdWUgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgaWYgKFRyYW5zaXRpb24gJiYgVHJhbnNpdGlvbi5ydW5uaW5nICYmIFRyYW5zaXRpb24uc291cmNlcy5oYXMocykpIHZhbHVlID0gdmFsdWUocy50VmFsdWUpO2Vsc2UgdmFsdWUgPSB2YWx1ZShzLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlU2lnbmFsKHMsIHZhbHVlKTtcbiAgfTtcbiAgcmV0dXJuIFtyZWFkU2lnbmFsLmJpbmQocyksIHNldHRlcl07XG59XG5mdW5jdGlvbiBjcmVhdGVDb21wdXRlZChmbiwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgY29uc3QgYyA9IGNyZWF0ZUNvbXB1dGF0aW9uKGZuLCB2YWx1ZSwgdHJ1ZSwgU1RBTEUpO1xuICBpZiAoU2NoZWR1bGVyICYmIFRyYW5zaXRpb24gJiYgVHJhbnNpdGlvbi5ydW5uaW5nKSBVcGRhdGVzLnB1c2goYyk7ZWxzZSB1cGRhdGVDb21wdXRhdGlvbihjKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlbmRlckVmZmVjdChmbiwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgY29uc3QgYyA9IGNyZWF0ZUNvbXB1dGF0aW9uKGZuLCB2YWx1ZSwgZmFsc2UsIFNUQUxFKTtcbiAgaWYgKFNjaGVkdWxlciAmJiBUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZykgVXBkYXRlcy5wdXNoKGMpO2Vsc2UgdXBkYXRlQ29tcHV0YXRpb24oYyk7XG59XG5mdW5jdGlvbiBjcmVhdGVFZmZlY3QoZm4sIHZhbHVlLCBvcHRpb25zKSB7XG4gIHJ1bkVmZmVjdHMgPSBydW5Vc2VyRWZmZWN0cztcbiAgY29uc3QgYyA9IGNyZWF0ZUNvbXB1dGF0aW9uKGZuLCB2YWx1ZSwgZmFsc2UsIFNUQUxFKSxcbiAgICBzID0gU3VzcGVuc2VDb250ZXh0ICYmIHVzZUNvbnRleHQoU3VzcGVuc2VDb250ZXh0KTtcbiAgaWYgKHMpIGMuc3VzcGVuc2UgPSBzO1xuICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMucmVuZGVyKSBjLnVzZXIgPSB0cnVlO1xuICBFZmZlY3RzID8gRWZmZWN0cy5wdXNoKGMpIDogdXBkYXRlQ29tcHV0YXRpb24oYyk7XG59XG5mdW5jdGlvbiBjcmVhdGVSZWFjdGlvbihvbkludmFsaWRhdGUsIG9wdGlvbnMpIHtcbiAgbGV0IGZuO1xuICBjb25zdCBjID0gY3JlYXRlQ29tcHV0YXRpb24oKCkgPT4ge1xuICAgICAgZm4gPyBmbigpIDogdW50cmFjayhvbkludmFsaWRhdGUpO1xuICAgICAgZm4gPSB1bmRlZmluZWQ7XG4gICAgfSwgdW5kZWZpbmVkLCBmYWxzZSwgMCksXG4gICAgcyA9IFN1c3BlbnNlQ29udGV4dCAmJiB1c2VDb250ZXh0KFN1c3BlbnNlQ29udGV4dCk7XG4gIGlmIChzKSBjLnN1c3BlbnNlID0gcztcbiAgYy51c2VyID0gdHJ1ZTtcbiAgcmV0dXJuIHRyYWNraW5nID0+IHtcbiAgICBmbiA9IHRyYWNraW5nO1xuICAgIHVwZGF0ZUNvbXB1dGF0aW9uKGMpO1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlTWVtbyhmbiwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgPyBPYmplY3QuYXNzaWduKHt9LCBzaWduYWxPcHRpb25zLCBvcHRpb25zKSA6IHNpZ25hbE9wdGlvbnM7XG4gIGNvbnN0IGMgPSBjcmVhdGVDb21wdXRhdGlvbihmbiwgdmFsdWUsIHRydWUsIDApO1xuICBjLm9ic2VydmVycyA9IG51bGw7XG4gIGMub2JzZXJ2ZXJTbG90cyA9IG51bGw7XG4gIGMuY29tcGFyYXRvciA9IG9wdGlvbnMuZXF1YWxzIHx8IHVuZGVmaW5lZDtcbiAgaWYgKFNjaGVkdWxlciAmJiBUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZykge1xuICAgIGMudFN0YXRlID0gU1RBTEU7XG4gICAgVXBkYXRlcy5wdXNoKGMpO1xuICB9IGVsc2UgdXBkYXRlQ29tcHV0YXRpb24oYyk7XG4gIHJldHVybiByZWFkU2lnbmFsLmJpbmQoYyk7XG59XG5mdW5jdGlvbiBpc1Byb21pc2Uodikge1xuICByZXR1cm4gdiAmJiB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiBcInRoZW5cIiBpbiB2O1xufVxuZnVuY3Rpb24gY3JlYXRlUmVzb3VyY2UocFNvdXJjZSwgcEZldGNoZXIsIHBPcHRpb25zKSB7XG4gIGxldCBzb3VyY2U7XG4gIGxldCBmZXRjaGVyO1xuICBsZXQgb3B0aW9ucztcbiAgaWYgKHR5cGVvZiBwRmV0Y2hlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgc291cmNlID0gcFNvdXJjZTtcbiAgICBmZXRjaGVyID0gcEZldGNoZXI7XG4gICAgb3B0aW9ucyA9IHBPcHRpb25zIHx8IHt9O1xuICB9IGVsc2Uge1xuICAgIHNvdXJjZSA9IHRydWU7XG4gICAgZmV0Y2hlciA9IHBTb3VyY2U7XG4gICAgb3B0aW9ucyA9IHBGZXRjaGVyIHx8IHt9O1xuICB9XG4gIGxldCBwciA9IG51bGwsXG4gICAgaW5pdFAgPSBOT19JTklULFxuICAgIGlkID0gbnVsbCxcbiAgICBsb2FkZWRVbmRlclRyYW5zaXRpb24gPSBmYWxzZSxcbiAgICBzY2hlZHVsZWQgPSBmYWxzZSxcbiAgICByZXNvbHZlZCA9IFwiaW5pdGlhbFZhbHVlXCIgaW4gb3B0aW9ucyxcbiAgICBkeW5hbWljID0gdHlwZW9mIHNvdXJjZSA9PT0gXCJmdW5jdGlvblwiICYmIGNyZWF0ZU1lbW8oc291cmNlKTtcbiAgY29uc3QgY29udGV4dHMgPSBuZXcgU2V0KCksXG4gICAgW3ZhbHVlLCBzZXRWYWx1ZV0gPSAob3B0aW9ucy5zdG9yYWdlIHx8IGNyZWF0ZVNpZ25hbCkob3B0aW9ucy5pbml0aWFsVmFsdWUpLFxuICAgIFtlcnJvciwgc2V0RXJyb3JdID0gY3JlYXRlU2lnbmFsKHVuZGVmaW5lZCksXG4gICAgW3RyYWNrLCB0cmlnZ2VyXSA9IGNyZWF0ZVNpZ25hbCh1bmRlZmluZWQsIHtcbiAgICAgIGVxdWFsczogZmFsc2VcbiAgICB9KSxcbiAgICBbc3RhdGUsIHNldFN0YXRlXSA9IGNyZWF0ZVNpZ25hbChyZXNvbHZlZCA/IFwicmVhZHlcIiA6IFwidW5yZXNvbHZlZFwiKTtcbiAgaWYgKHNoYXJlZENvbmZpZy5jb250ZXh0KSB7XG4gICAgaWQgPSBzaGFyZWRDb25maWcuZ2V0TmV4dENvbnRleHRJZCgpO1xuICAgIGlmIChvcHRpb25zLnNzckxvYWRGcm9tID09PSBcImluaXRpYWxcIikgaW5pdFAgPSBvcHRpb25zLmluaXRpYWxWYWx1ZTtlbHNlIGlmIChzaGFyZWRDb25maWcubG9hZCAmJiBzaGFyZWRDb25maWcuaGFzKGlkKSkgaW5pdFAgPSBzaGFyZWRDb25maWcubG9hZChpZCk7XG4gIH1cbiAgZnVuY3Rpb24gbG9hZEVuZChwLCB2LCBlcnJvciwga2V5KSB7XG4gICAgaWYgKHByID09PSBwKSB7XG4gICAgICBwciA9IG51bGw7XG4gICAgICBrZXkgIT09IHVuZGVmaW5lZCAmJiAocmVzb2x2ZWQgPSB0cnVlKTtcbiAgICAgIGlmICgocCA9PT0gaW5pdFAgfHwgdiA9PT0gaW5pdFApICYmIG9wdGlvbnMub25IeWRyYXRlZCkgcXVldWVNaWNyb3Rhc2soKCkgPT4gb3B0aW9ucy5vbkh5ZHJhdGVkKGtleSwge1xuICAgICAgICB2YWx1ZTogdlxuICAgICAgfSkpO1xuICAgICAgaW5pdFAgPSBOT19JTklUO1xuICAgICAgaWYgKFRyYW5zaXRpb24gJiYgcCAmJiBsb2FkZWRVbmRlclRyYW5zaXRpb24pIHtcbiAgICAgICAgVHJhbnNpdGlvbi5wcm9taXNlcy5kZWxldGUocCk7XG4gICAgICAgIGxvYWRlZFVuZGVyVHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgICAgICBydW5VcGRhdGVzKCgpID0+IHtcbiAgICAgICAgICBUcmFuc2l0aW9uLnJ1bm5pbmcgPSB0cnVlO1xuICAgICAgICAgIGNvbXBsZXRlTG9hZCh2LCBlcnJvcik7XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICAgIH0gZWxzZSBjb21wbGV0ZUxvYWQodiwgZXJyb3IpO1xuICAgIH1cbiAgICByZXR1cm4gdjtcbiAgfVxuICBmdW5jdGlvbiBjb21wbGV0ZUxvYWQodiwgZXJyKSB7XG4gICAgcnVuVXBkYXRlcygoKSA9PiB7XG4gICAgICBpZiAoZXJyID09PSB1bmRlZmluZWQpIHNldFZhbHVlKCgpID0+IHYpO1xuICAgICAgc2V0U3RhdGUoZXJyICE9PSB1bmRlZmluZWQgPyBcImVycm9yZWRcIiA6IHJlc29sdmVkID8gXCJyZWFkeVwiIDogXCJ1bnJlc29sdmVkXCIpO1xuICAgICAgc2V0RXJyb3IoZXJyKTtcbiAgICAgIGZvciAoY29uc3QgYyBvZiBjb250ZXh0cy5rZXlzKCkpIGMuZGVjcmVtZW50KCk7XG4gICAgICBjb250ZXh0cy5jbGVhcigpO1xuICAgIH0sIGZhbHNlKTtcbiAgfVxuICBmdW5jdGlvbiByZWFkKCkge1xuICAgIGNvbnN0IGMgPSBTdXNwZW5zZUNvbnRleHQgJiYgdXNlQ29udGV4dChTdXNwZW5zZUNvbnRleHQpLFxuICAgICAgdiA9IHZhbHVlKCksXG4gICAgICBlcnIgPSBlcnJvcigpO1xuICAgIGlmIChlcnIgIT09IHVuZGVmaW5lZCAmJiAhcHIpIHRocm93IGVycjtcbiAgICBpZiAoTGlzdGVuZXIgJiYgIUxpc3RlbmVyLnVzZXIgJiYgYykge1xuICAgICAgY3JlYXRlQ29tcHV0ZWQoKCkgPT4ge1xuICAgICAgICB0cmFjaygpO1xuICAgICAgICBpZiAocHIpIHtcbiAgICAgICAgICBpZiAoYy5yZXNvbHZlZCAmJiBUcmFuc2l0aW9uICYmIGxvYWRlZFVuZGVyVHJhbnNpdGlvbikgVHJhbnNpdGlvbi5wcm9taXNlcy5hZGQocHIpO2Vsc2UgaWYgKCFjb250ZXh0cy5oYXMoYykpIHtcbiAgICAgICAgICAgIGMuaW5jcmVtZW50KCk7XG4gICAgICAgICAgICBjb250ZXh0cy5hZGQoYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHY7XG4gIH1cbiAgZnVuY3Rpb24gbG9hZChyZWZldGNoaW5nID0gdHJ1ZSkge1xuICAgIGlmIChyZWZldGNoaW5nICE9PSBmYWxzZSAmJiBzY2hlZHVsZWQpIHJldHVybjtcbiAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICBjb25zdCBsb29rdXAgPSBkeW5hbWljID8gZHluYW1pYygpIDogc291cmNlO1xuICAgIGxvYWRlZFVuZGVyVHJhbnNpdGlvbiA9IFRyYW5zaXRpb24gJiYgVHJhbnNpdGlvbi5ydW5uaW5nO1xuICAgIGlmIChsb29rdXAgPT0gbnVsbCB8fCBsb29rdXAgPT09IGZhbHNlKSB7XG4gICAgICBsb2FkRW5kKHByLCB1bnRyYWNrKHZhbHVlKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChUcmFuc2l0aW9uICYmIHByKSBUcmFuc2l0aW9uLnByb21pc2VzLmRlbGV0ZShwcik7XG4gICAgbGV0IGVycm9yO1xuICAgIGNvbnN0IHAgPSBpbml0UCAhPT0gTk9fSU5JVCA/IGluaXRQIDogdW50cmFjaygoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gZmV0Y2hlcihsb29rdXAsIHtcbiAgICAgICAgICB2YWx1ZTogdmFsdWUoKSxcbiAgICAgICAgICByZWZldGNoaW5nXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZmV0Y2hlckVycm9yKSB7XG4gICAgICAgIGVycm9yID0gZmV0Y2hlckVycm9yO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChlcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBsb2FkRW5kKHByLCB1bmRlZmluZWQsIGNhc3RFcnJvcihlcnJvciksIGxvb2t1cCk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmICghaXNQcm9taXNlKHApKSB7XG4gICAgICBsb2FkRW5kKHByLCBwLCB1bmRlZmluZWQsIGxvb2t1cCk7XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gICAgcHIgPSBwO1xuICAgIGlmIChcInZcIiBpbiBwKSB7XG4gICAgICBpZiAocC5zID09PSAxKSBsb2FkRW5kKHByLCBwLnYsIHVuZGVmaW5lZCwgbG9va3VwKTtlbHNlIGxvYWRFbmQocHIsIHVuZGVmaW5lZCwgY2FzdEVycm9yKHAudiksIGxvb2t1cCk7XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiBzY2hlZHVsZWQgPSBmYWxzZSk7XG4gICAgcnVuVXBkYXRlcygoKSA9PiB7XG4gICAgICBzZXRTdGF0ZShyZXNvbHZlZCA/IFwicmVmcmVzaGluZ1wiIDogXCJwZW5kaW5nXCIpO1xuICAgICAgdHJpZ2dlcigpO1xuICAgIH0sIGZhbHNlKTtcbiAgICByZXR1cm4gcC50aGVuKHYgPT4gbG9hZEVuZChwLCB2LCB1bmRlZmluZWQsIGxvb2t1cCksIGUgPT4gbG9hZEVuZChwLCB1bmRlZmluZWQsIGNhc3RFcnJvcihlKSwgbG9va3VwKSk7XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMocmVhZCwge1xuICAgIHN0YXRlOiB7XG4gICAgICBnZXQ6ICgpID0+IHN0YXRlKClcbiAgICB9LFxuICAgIGVycm9yOiB7XG4gICAgICBnZXQ6ICgpID0+IGVycm9yKClcbiAgICB9LFxuICAgIGxvYWRpbmc6IHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgY29uc3QgcyA9IHN0YXRlKCk7XG4gICAgICAgIHJldHVybiBzID09PSBcInBlbmRpbmdcIiB8fCBzID09PSBcInJlZnJlc2hpbmdcIjtcbiAgICAgIH1cbiAgICB9LFxuICAgIGxhdGVzdDoge1xuICAgICAgZ2V0KCkge1xuICAgICAgICBpZiAoIXJlc29sdmVkKSByZXR1cm4gcmVhZCgpO1xuICAgICAgICBjb25zdCBlcnIgPSBlcnJvcigpO1xuICAgICAgICBpZiAoZXJyICYmICFwcikgdGhyb3cgZXJyO1xuICAgICAgICByZXR1cm4gdmFsdWUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBsZXQgb3duZXIgPSBPd25lcjtcbiAgaWYgKGR5bmFtaWMpIGNyZWF0ZUNvbXB1dGVkKCgpID0+IChvd25lciA9IE93bmVyLCBsb2FkKGZhbHNlKSkpO2Vsc2UgbG9hZChmYWxzZSk7XG4gIHJldHVybiBbcmVhZCwge1xuICAgIHJlZmV0Y2g6IGluZm8gPT4gcnVuV2l0aE93bmVyKG93bmVyLCAoKSA9PiBsb2FkKGluZm8pKSxcbiAgICBtdXRhdGU6IHNldFZhbHVlXG4gIH1dO1xufVxuZnVuY3Rpb24gY3JlYXRlRGVmZXJyZWQoc291cmNlLCBvcHRpb25zKSB7XG4gIGxldCB0LFxuICAgIHRpbWVvdXQgPSBvcHRpb25zID8gb3B0aW9ucy50aW1lb3V0TXMgOiB1bmRlZmluZWQ7XG4gIGNvbnN0IG5vZGUgPSBjcmVhdGVDb21wdXRhdGlvbigoKSA9PiB7XG4gICAgaWYgKCF0IHx8ICF0LmZuKSB0ID0gcmVxdWVzdENhbGxiYWNrKCgpID0+IHNldERlZmVycmVkKCgpID0+IG5vZGUudmFsdWUpLCB0aW1lb3V0ICE9PSB1bmRlZmluZWQgPyB7XG4gICAgICB0aW1lb3V0XG4gICAgfSA6IHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIHNvdXJjZSgpO1xuICB9LCB1bmRlZmluZWQsIHRydWUpO1xuICBjb25zdCBbZGVmZXJyZWQsIHNldERlZmVycmVkXSA9IGNyZWF0ZVNpZ25hbChUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZyAmJiBUcmFuc2l0aW9uLnNvdXJjZXMuaGFzKG5vZGUpID8gbm9kZS50VmFsdWUgOiBub2RlLnZhbHVlLCBvcHRpb25zKTtcbiAgdXBkYXRlQ29tcHV0YXRpb24obm9kZSk7XG4gIHNldERlZmVycmVkKCgpID0+IFRyYW5zaXRpb24gJiYgVHJhbnNpdGlvbi5ydW5uaW5nICYmIFRyYW5zaXRpb24uc291cmNlcy5oYXMobm9kZSkgPyBub2RlLnRWYWx1ZSA6IG5vZGUudmFsdWUpO1xuICByZXR1cm4gZGVmZXJyZWQ7XG59XG5mdW5jdGlvbiBjcmVhdGVTZWxlY3Rvcihzb3VyY2UsIGZuID0gZXF1YWxGbiwgb3B0aW9ucykge1xuICBjb25zdCBzdWJzID0gbmV3IE1hcCgpO1xuICBjb25zdCBub2RlID0gY3JlYXRlQ29tcHV0YXRpb24ocCA9PiB7XG4gICAgY29uc3QgdiA9IHNvdXJjZSgpO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBzdWJzLmVudHJpZXMoKSkgaWYgKGZuKGtleSwgdikgIT09IGZuKGtleSwgcCkpIHtcbiAgICAgIGZvciAoY29uc3QgYyBvZiB2YWwudmFsdWVzKCkpIHtcbiAgICAgICAgYy5zdGF0ZSA9IFNUQUxFO1xuICAgICAgICBpZiAoYy5wdXJlKSBVcGRhdGVzLnB1c2goYyk7ZWxzZSBFZmZlY3RzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2O1xuICB9LCB1bmRlZmluZWQsIHRydWUsIFNUQUxFKTtcbiAgdXBkYXRlQ29tcHV0YXRpb24obm9kZSk7XG4gIHJldHVybiBrZXkgPT4ge1xuICAgIGNvbnN0IGxpc3RlbmVyID0gTGlzdGVuZXI7XG4gICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICBsZXQgbDtcbiAgICAgIGlmIChsID0gc3Vicy5nZXQoa2V5KSkgbC5hZGQobGlzdGVuZXIpO2Vsc2Ugc3Vicy5zZXQoa2V5LCBsID0gbmV3IFNldChbbGlzdGVuZXJdKSk7XG4gICAgICBvbkNsZWFudXAoKCkgPT4ge1xuICAgICAgICBsLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgICAgICFsLnNpemUgJiYgc3Vicy5kZWxldGUoa2V5KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZm4oa2V5LCBUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZyAmJiBUcmFuc2l0aW9uLnNvdXJjZXMuaGFzKG5vZGUpID8gbm9kZS50VmFsdWUgOiBub2RlLnZhbHVlKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGJhdGNoKGZuKSB7XG4gIHJldHVybiBydW5VcGRhdGVzKGZuLCBmYWxzZSk7XG59XG5mdW5jdGlvbiB1bnRyYWNrKGZuKSB7XG4gIGlmICghRXh0ZXJuYWxTb3VyY2VDb25maWcgJiYgTGlzdGVuZXIgPT09IG51bGwpIHJldHVybiBmbigpO1xuICBjb25zdCBsaXN0ZW5lciA9IExpc3RlbmVyO1xuICBMaXN0ZW5lciA9IG51bGw7XG4gIHRyeSB7XG4gICAgaWYgKEV4dGVybmFsU291cmNlQ29uZmlnKSByZXR1cm4gRXh0ZXJuYWxTb3VyY2VDb25maWcudW50cmFjayhmbik7XG4gICAgcmV0dXJuIGZuKCk7XG4gIH0gZmluYWxseSB7XG4gICAgTGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgfVxufVxuZnVuY3Rpb24gb24oZGVwcywgZm4sIG9wdGlvbnMpIHtcbiAgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoZGVwcyk7XG4gIGxldCBwcmV2SW5wdXQ7XG4gIGxldCBkZWZlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWZlcjtcbiAgcmV0dXJuIHByZXZWYWx1ZSA9PiB7XG4gICAgbGV0IGlucHV0O1xuICAgIGlmIChpc0FycmF5KSB7XG4gICAgICBpbnB1dCA9IEFycmF5KGRlcHMubGVuZ3RoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwcy5sZW5ndGg7IGkrKykgaW5wdXRbaV0gPSBkZXBzW2ldKCk7XG4gICAgfSBlbHNlIGlucHV0ID0gZGVwcygpO1xuICAgIGlmIChkZWZlcikge1xuICAgICAgZGVmZXIgPSBmYWxzZTtcbiAgICAgIHJldHVybiBwcmV2VmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IHVudHJhY2soKCkgPT4gZm4oaW5wdXQsIHByZXZJbnB1dCwgcHJldlZhbHVlKSk7XG4gICAgcHJldklucHV0ID0gaW5wdXQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cbmZ1bmN0aW9uIG9uTW91bnQoZm4pIHtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IHVudHJhY2soZm4pKTtcbn1cbmZ1bmN0aW9uIG9uQ2xlYW51cChmbikge1xuICBpZiAoT3duZXIgPT09IG51bGwpIDtlbHNlIGlmIChPd25lci5jbGVhbnVwcyA9PT0gbnVsbCkgT3duZXIuY2xlYW51cHMgPSBbZm5dO2Vsc2UgT3duZXIuY2xlYW51cHMucHVzaChmbik7XG4gIHJldHVybiBmbjtcbn1cbmZ1bmN0aW9uIGNhdGNoRXJyb3IoZm4sIGhhbmRsZXIpIHtcbiAgRVJST1IgfHwgKEVSUk9SID0gU3ltYm9sKFwiZXJyb3JcIikpO1xuICBPd25lciA9IGNyZWF0ZUNvbXB1dGF0aW9uKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgT3duZXIuY29udGV4dCA9IHtcbiAgICAuLi5Pd25lci5jb250ZXh0LFxuICAgIFtFUlJPUl06IFtoYW5kbGVyXVxuICB9O1xuICBpZiAoVHJhbnNpdGlvbiAmJiBUcmFuc2l0aW9uLnJ1bm5pbmcpIFRyYW5zaXRpb24uc291cmNlcy5hZGQoT3duZXIpO1xuICB0cnkge1xuICAgIHJldHVybiBmbigpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBoYW5kbGVFcnJvcihlcnIpO1xuICB9IGZpbmFsbHkge1xuICAgIE93bmVyID0gT3duZXIub3duZXI7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldExpc3RlbmVyKCkge1xuICByZXR1cm4gTGlzdGVuZXI7XG59XG5mdW5jdGlvbiBnZXRPd25lcigpIHtcbiAgcmV0dXJuIE93bmVyO1xufVxuZnVuY3Rpb24gcnVuV2l0aE93bmVyKG8sIGZuKSB7XG4gIGNvbnN0IHByZXYgPSBPd25lcjtcbiAgY29uc3QgcHJldkxpc3RlbmVyID0gTGlzdGVuZXI7XG4gIE93bmVyID0gbztcbiAgTGlzdGVuZXIgPSBudWxsO1xuICB0cnkge1xuICAgIHJldHVybiBydW5VcGRhdGVzKGZuLCB0cnVlKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaGFuZGxlRXJyb3IoZXJyKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBPd25lciA9IHByZXY7XG4gICAgTGlzdGVuZXIgPSBwcmV2TGlzdGVuZXI7XG4gIH1cbn1cbmZ1bmN0aW9uIGVuYWJsZVNjaGVkdWxpbmcoc2NoZWR1bGVyID0gcmVxdWVzdENhbGxiYWNrKSB7XG4gIFNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbn1cbmZ1bmN0aW9uIHN0YXJ0VHJhbnNpdGlvbihmbikge1xuICBpZiAoVHJhbnNpdGlvbiAmJiBUcmFuc2l0aW9uLnJ1bm5pbmcpIHtcbiAgICBmbigpO1xuICAgIHJldHVybiBUcmFuc2l0aW9uLmRvbmU7XG4gIH1cbiAgY29uc3QgbCA9IExpc3RlbmVyO1xuICBjb25zdCBvID0gT3duZXI7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICBMaXN0ZW5lciA9IGw7XG4gICAgT3duZXIgPSBvO1xuICAgIGxldCB0O1xuICAgIGlmIChTY2hlZHVsZXIgfHwgU3VzcGVuc2VDb250ZXh0KSB7XG4gICAgICB0ID0gVHJhbnNpdGlvbiB8fCAoVHJhbnNpdGlvbiA9IHtcbiAgICAgICAgc291cmNlczogbmV3IFNldCgpLFxuICAgICAgICBlZmZlY3RzOiBbXSxcbiAgICAgICAgcHJvbWlzZXM6IG5ldyBTZXQoKSxcbiAgICAgICAgZGlzcG9zZWQ6IG5ldyBTZXQoKSxcbiAgICAgICAgcXVldWU6IG5ldyBTZXQoKSxcbiAgICAgICAgcnVubmluZzogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB0LmRvbmUgfHwgKHQuZG9uZSA9IG5ldyBQcm9taXNlKHJlcyA9PiB0LnJlc29sdmUgPSByZXMpKTtcbiAgICAgIHQucnVubmluZyA9IHRydWU7XG4gICAgfVxuICAgIHJ1blVwZGF0ZXMoZm4sIGZhbHNlKTtcbiAgICBMaXN0ZW5lciA9IE93bmVyID0gbnVsbDtcbiAgICByZXR1cm4gdCA/IHQuZG9uZSA6IHVuZGVmaW5lZDtcbiAgfSk7XG59XG5jb25zdCBbdHJhbnNQZW5kaW5nLCBzZXRUcmFuc1BlbmRpbmddID0gLypAX19QVVJFX18qL2NyZWF0ZVNpZ25hbChmYWxzZSk7XG5mdW5jdGlvbiB1c2VUcmFuc2l0aW9uKCkge1xuICByZXR1cm4gW3RyYW5zUGVuZGluZywgc3RhcnRUcmFuc2l0aW9uXTtcbn1cbmZ1bmN0aW9uIHJlc3VtZUVmZmVjdHMoZSkge1xuICBFZmZlY3RzLnB1c2guYXBwbHkoRWZmZWN0cywgZSk7XG4gIGUubGVuZ3RoID0gMDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRleHQoZGVmYXVsdFZhbHVlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGlkID0gU3ltYm9sKFwiY29udGV4dFwiKTtcbiAgcmV0dXJuIHtcbiAgICBpZCxcbiAgICBQcm92aWRlcjogY3JlYXRlUHJvdmlkZXIoaWQpLFxuICAgIGRlZmF1bHRWYWx1ZVxuICB9O1xufVxuZnVuY3Rpb24gdXNlQ29udGV4dChjb250ZXh0KSB7XG4gIGxldCB2YWx1ZTtcbiAgcmV0dXJuIE93bmVyICYmIE93bmVyLmNvbnRleHQgJiYgKHZhbHVlID0gT3duZXIuY29udGV4dFtjb250ZXh0LmlkXSkgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDogY29udGV4dC5kZWZhdWx0VmFsdWU7XG59XG5mdW5jdGlvbiBjaGlsZHJlbihmbikge1xuICBjb25zdCBjaGlsZHJlbiA9IGNyZWF0ZU1lbW8oZm4pO1xuICBjb25zdCBtZW1vID0gY3JlYXRlTWVtbygoKSA9PiByZXNvbHZlQ2hpbGRyZW4oY2hpbGRyZW4oKSkpO1xuICBtZW1vLnRvQXJyYXkgPSAoKSA9PiB7XG4gICAgY29uc3QgYyA9IG1lbW8oKTtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShjKSA/IGMgOiBjICE9IG51bGwgPyBbY10gOiBbXTtcbiAgfTtcbiAgcmV0dXJuIG1lbW87XG59XG5sZXQgU3VzcGVuc2VDb250ZXh0O1xuZnVuY3Rpb24gZ2V0U3VzcGVuc2VDb250ZXh0KCkge1xuICByZXR1cm4gU3VzcGVuc2VDb250ZXh0IHx8IChTdXNwZW5zZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCkpO1xufVxuZnVuY3Rpb24gZW5hYmxlRXh0ZXJuYWxTb3VyY2UoZmFjdG9yeSwgdW50cmFjayA9IGZuID0+IGZuKCkpIHtcbiAgaWYgKEV4dGVybmFsU291cmNlQ29uZmlnKSB7XG4gICAgY29uc3Qge1xuICAgICAgZmFjdG9yeTogb2xkRmFjdG9yeSxcbiAgICAgIHVudHJhY2s6IG9sZFVudHJhY2tcbiAgICB9ID0gRXh0ZXJuYWxTb3VyY2VDb25maWc7XG4gICAgRXh0ZXJuYWxTb3VyY2VDb25maWcgPSB7XG4gICAgICBmYWN0b3J5OiAoZm4sIHRyaWdnZXIpID0+IHtcbiAgICAgICAgY29uc3Qgb2xkU291cmNlID0gb2xkRmFjdG9yeShmbiwgdHJpZ2dlcik7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IGZhY3RvcnkoeCA9PiBvbGRTb3VyY2UudHJhY2soeCksIHRyaWdnZXIpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRyYWNrOiB4ID0+IHNvdXJjZS50cmFjayh4KSxcbiAgICAgICAgICBkaXNwb3NlKCkge1xuICAgICAgICAgICAgc291cmNlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIG9sZFNvdXJjZS5kaXNwb3NlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIHVudHJhY2s6IGZuID0+IG9sZFVudHJhY2soKCkgPT4gdW50cmFjayhmbikpXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBFeHRlcm5hbFNvdXJjZUNvbmZpZyA9IHtcbiAgICAgIGZhY3RvcnksXG4gICAgICB1bnRyYWNrXG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gcmVhZFNpZ25hbCgpIHtcbiAgY29uc3QgcnVubmluZ1RyYW5zaXRpb24gPSBUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZztcbiAgaWYgKHRoaXMuc291cmNlcyAmJiAocnVubmluZ1RyYW5zaXRpb24gPyB0aGlzLnRTdGF0ZSA6IHRoaXMuc3RhdGUpKSB7XG4gICAgaWYgKChydW5uaW5nVHJhbnNpdGlvbiA/IHRoaXMudFN0YXRlIDogdGhpcy5zdGF0ZSkgPT09IFNUQUxFKSB1cGRhdGVDb21wdXRhdGlvbih0aGlzKTtlbHNlIHtcbiAgICAgIGNvbnN0IHVwZGF0ZXMgPSBVcGRhdGVzO1xuICAgICAgVXBkYXRlcyA9IG51bGw7XG4gICAgICBydW5VcGRhdGVzKCgpID0+IGxvb2tVcHN0cmVhbSh0aGlzKSwgZmFsc2UpO1xuICAgICAgVXBkYXRlcyA9IHVwZGF0ZXM7XG4gICAgfVxuICB9XG4gIGlmIChMaXN0ZW5lcikge1xuICAgIGNvbnN0IHNTbG90ID0gdGhpcy5vYnNlcnZlcnMgPyB0aGlzLm9ic2VydmVycy5sZW5ndGggOiAwO1xuICAgIGlmICghTGlzdGVuZXIuc291cmNlcykge1xuICAgICAgTGlzdGVuZXIuc291cmNlcyA9IFt0aGlzXTtcbiAgICAgIExpc3RlbmVyLnNvdXJjZVNsb3RzID0gW3NTbG90XTtcbiAgICB9IGVsc2Uge1xuICAgICAgTGlzdGVuZXIuc291cmNlcy5wdXNoKHRoaXMpO1xuICAgICAgTGlzdGVuZXIuc291cmNlU2xvdHMucHVzaChzU2xvdCk7XG4gICAgfVxuICAgIGlmICghdGhpcy5vYnNlcnZlcnMpIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXJzID0gW0xpc3RlbmVyXTtcbiAgICAgIHRoaXMub2JzZXJ2ZXJTbG90cyA9IFtMaXN0ZW5lci5zb3VyY2VzLmxlbmd0aCAtIDFdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9ic2VydmVycy5wdXNoKExpc3RlbmVyKTtcbiAgICAgIHRoaXMub2JzZXJ2ZXJTbG90cy5wdXNoKExpc3RlbmVyLnNvdXJjZXMubGVuZ3RoIC0gMSk7XG4gICAgfVxuICB9XG4gIGlmIChydW5uaW5nVHJhbnNpdGlvbiAmJiBUcmFuc2l0aW9uLnNvdXJjZXMuaGFzKHRoaXMpKSByZXR1cm4gdGhpcy50VmFsdWU7XG4gIHJldHVybiB0aGlzLnZhbHVlO1xufVxuZnVuY3Rpb24gd3JpdGVTaWduYWwobm9kZSwgdmFsdWUsIGlzQ29tcCkge1xuICBsZXQgY3VycmVudCA9IFRyYW5zaXRpb24gJiYgVHJhbnNpdGlvbi5ydW5uaW5nICYmIFRyYW5zaXRpb24uc291cmNlcy5oYXMobm9kZSkgPyBub2RlLnRWYWx1ZSA6IG5vZGUudmFsdWU7XG4gIGlmICghbm9kZS5jb21wYXJhdG9yIHx8ICFub2RlLmNvbXBhcmF0b3IoY3VycmVudCwgdmFsdWUpKSB7XG4gICAgaWYgKFRyYW5zaXRpb24pIHtcbiAgICAgIGNvbnN0IFRyYW5zaXRpb25SdW5uaW5nID0gVHJhbnNpdGlvbi5ydW5uaW5nO1xuICAgICAgaWYgKFRyYW5zaXRpb25SdW5uaW5nIHx8ICFpc0NvbXAgJiYgVHJhbnNpdGlvbi5zb3VyY2VzLmhhcyhub2RlKSkge1xuICAgICAgICBUcmFuc2l0aW9uLnNvdXJjZXMuYWRkKG5vZGUpO1xuICAgICAgICBub2RlLnRWYWx1ZSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKCFUcmFuc2l0aW9uUnVubmluZykgbm9kZS52YWx1ZSA9IHZhbHVlO1xuICAgIH0gZWxzZSBub2RlLnZhbHVlID0gdmFsdWU7XG4gICAgaWYgKG5vZGUub2JzZXJ2ZXJzICYmIG5vZGUub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgcnVuVXBkYXRlcygoKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5vYnNlcnZlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBjb25zdCBvID0gbm9kZS5vYnNlcnZlcnNbaV07XG4gICAgICAgICAgY29uc3QgVHJhbnNpdGlvblJ1bm5pbmcgPSBUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZztcbiAgICAgICAgICBpZiAoVHJhbnNpdGlvblJ1bm5pbmcgJiYgVHJhbnNpdGlvbi5kaXNwb3NlZC5oYXMobykpIGNvbnRpbnVlO1xuICAgICAgICAgIGlmIChUcmFuc2l0aW9uUnVubmluZyA/ICFvLnRTdGF0ZSA6ICFvLnN0YXRlKSB7XG4gICAgICAgICAgICBpZiAoby5wdXJlKSBVcGRhdGVzLnB1c2gobyk7ZWxzZSBFZmZlY3RzLnB1c2gobyk7XG4gICAgICAgICAgICBpZiAoby5vYnNlcnZlcnMpIG1hcmtEb3duc3RyZWFtKG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIVRyYW5zaXRpb25SdW5uaW5nKSBvLnN0YXRlID0gU1RBTEU7ZWxzZSBvLnRTdGF0ZSA9IFNUQUxFO1xuICAgICAgICB9XG4gICAgICAgIGlmIChVcGRhdGVzLmxlbmd0aCA+IDEwZTUpIHtcbiAgICAgICAgICBVcGRhdGVzID0gW107XG4gICAgICAgICAgaWYgKElTX0RFVikgO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICB9XG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUNvbXB1dGF0aW9uKG5vZGUpIHtcbiAgaWYgKCFub2RlLmZuKSByZXR1cm47XG4gIGNsZWFuTm9kZShub2RlKTtcbiAgY29uc3QgdGltZSA9IEV4ZWNDb3VudDtcbiAgcnVuQ29tcHV0YXRpb24obm9kZSwgVHJhbnNpdGlvbiAmJiBUcmFuc2l0aW9uLnJ1bm5pbmcgJiYgVHJhbnNpdGlvbi5zb3VyY2VzLmhhcyhub2RlKSA/IG5vZGUudFZhbHVlIDogbm9kZS52YWx1ZSwgdGltZSk7XG4gIGlmIChUcmFuc2l0aW9uICYmICFUcmFuc2l0aW9uLnJ1bm5pbmcgJiYgVHJhbnNpdGlvbi5zb3VyY2VzLmhhcyhub2RlKSkge1xuICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgIHJ1blVwZGF0ZXMoKCkgPT4ge1xuICAgICAgICBUcmFuc2l0aW9uICYmIChUcmFuc2l0aW9uLnJ1bm5pbmcgPSB0cnVlKTtcbiAgICAgICAgTGlzdGVuZXIgPSBPd25lciA9IG5vZGU7XG4gICAgICAgIHJ1bkNvbXB1dGF0aW9uKG5vZGUsIG5vZGUudFZhbHVlLCB0aW1lKTtcbiAgICAgICAgTGlzdGVuZXIgPSBPd25lciA9IG51bGw7XG4gICAgICB9LCBmYWxzZSk7XG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJ1bkNvbXB1dGF0aW9uKG5vZGUsIHZhbHVlLCB0aW1lKSB7XG4gIGxldCBuZXh0VmFsdWU7XG4gIGNvbnN0IG93bmVyID0gT3duZXIsXG4gICAgbGlzdGVuZXIgPSBMaXN0ZW5lcjtcbiAgTGlzdGVuZXIgPSBPd25lciA9IG5vZGU7XG4gIHRyeSB7XG4gICAgbmV4dFZhbHVlID0gbm9kZS5mbih2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChub2RlLnB1cmUpIHtcbiAgICAgIGlmIChUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZykge1xuICAgICAgICBub2RlLnRTdGF0ZSA9IFNUQUxFO1xuICAgICAgICBub2RlLnRPd25lZCAmJiBub2RlLnRPd25lZC5mb3JFYWNoKGNsZWFuTm9kZSk7XG4gICAgICAgIG5vZGUudE93bmVkID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5zdGF0ZSA9IFNUQUxFO1xuICAgICAgICBub2RlLm93bmVkICYmIG5vZGUub3duZWQuZm9yRWFjaChjbGVhbk5vZGUpO1xuICAgICAgICBub2RlLm93bmVkID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbm9kZS51cGRhdGVkQXQgPSB0aW1lICsgMTtcbiAgICByZXR1cm4gaGFuZGxlRXJyb3IoZXJyKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBMaXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgIE93bmVyID0gb3duZXI7XG4gIH1cbiAgaWYgKCFub2RlLnVwZGF0ZWRBdCB8fCBub2RlLnVwZGF0ZWRBdCA8PSB0aW1lKSB7XG4gICAgaWYgKG5vZGUudXBkYXRlZEF0ICE9IG51bGwgJiYgXCJvYnNlcnZlcnNcIiBpbiBub2RlKSB7XG4gICAgICB3cml0ZVNpZ25hbChub2RlLCBuZXh0VmFsdWUsIHRydWUpO1xuICAgIH0gZWxzZSBpZiAoVHJhbnNpdGlvbiAmJiBUcmFuc2l0aW9uLnJ1bm5pbmcgJiYgbm9kZS5wdXJlKSB7XG4gICAgICBUcmFuc2l0aW9uLnNvdXJjZXMuYWRkKG5vZGUpO1xuICAgICAgbm9kZS50VmFsdWUgPSBuZXh0VmFsdWU7XG4gICAgfSBlbHNlIG5vZGUudmFsdWUgPSBuZXh0VmFsdWU7XG4gICAgbm9kZS51cGRhdGVkQXQgPSB0aW1lO1xuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVDb21wdXRhdGlvbihmbiwgaW5pdCwgcHVyZSwgc3RhdGUgPSBTVEFMRSwgb3B0aW9ucykge1xuICBjb25zdCBjID0ge1xuICAgIGZuLFxuICAgIHN0YXRlOiBzdGF0ZSxcbiAgICB1cGRhdGVkQXQ6IG51bGwsXG4gICAgb3duZWQ6IG51bGwsXG4gICAgc291cmNlczogbnVsbCxcbiAgICBzb3VyY2VTbG90czogbnVsbCxcbiAgICBjbGVhbnVwczogbnVsbCxcbiAgICB2YWx1ZTogaW5pdCxcbiAgICBvd25lcjogT3duZXIsXG4gICAgY29udGV4dDogT3duZXIgPyBPd25lci5jb250ZXh0IDogbnVsbCxcbiAgICBwdXJlXG4gIH07XG4gIGlmIChUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZykge1xuICAgIGMuc3RhdGUgPSAwO1xuICAgIGMudFN0YXRlID0gc3RhdGU7XG4gIH1cbiAgaWYgKE93bmVyID09PSBudWxsKSA7ZWxzZSBpZiAoT3duZXIgIT09IFVOT1dORUQpIHtcbiAgICBpZiAoVHJhbnNpdGlvbiAmJiBUcmFuc2l0aW9uLnJ1bm5pbmcgJiYgT3duZXIucHVyZSkge1xuICAgICAgaWYgKCFPd25lci50T3duZWQpIE93bmVyLnRPd25lZCA9IFtjXTtlbHNlIE93bmVyLnRPd25lZC5wdXNoKGMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIU93bmVyLm93bmVkKSBPd25lci5vd25lZCA9IFtjXTtlbHNlIE93bmVyLm93bmVkLnB1c2goYyk7XG4gICAgfVxuICB9XG4gIGlmIChFeHRlcm5hbFNvdXJjZUNvbmZpZyAmJiBjLmZuKSB7XG4gICAgY29uc3QgW3RyYWNrLCB0cmlnZ2VyXSA9IGNyZWF0ZVNpZ25hbCh1bmRlZmluZWQsIHtcbiAgICAgIGVxdWFsczogZmFsc2VcbiAgICB9KTtcbiAgICBjb25zdCBvcmRpbmFyeSA9IEV4dGVybmFsU291cmNlQ29uZmlnLmZhY3RvcnkoYy5mbiwgdHJpZ2dlcik7XG4gICAgb25DbGVhbnVwKCgpID0+IG9yZGluYXJ5LmRpc3Bvc2UoKSk7XG4gICAgY29uc3QgdHJpZ2dlckluVHJhbnNpdGlvbiA9ICgpID0+IHN0YXJ0VHJhbnNpdGlvbih0cmlnZ2VyKS50aGVuKCgpID0+IGluVHJhbnNpdGlvbi5kaXNwb3NlKCkpO1xuICAgIGNvbnN0IGluVHJhbnNpdGlvbiA9IEV4dGVybmFsU291cmNlQ29uZmlnLmZhY3RvcnkoYy5mbiwgdHJpZ2dlckluVHJhbnNpdGlvbik7XG4gICAgYy5mbiA9IHggPT4ge1xuICAgICAgdHJhY2soKTtcbiAgICAgIHJldHVybiBUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZyA/IGluVHJhbnNpdGlvbi50cmFjayh4KSA6IG9yZGluYXJ5LnRyYWNrKHgpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGM7XG59XG5mdW5jdGlvbiBydW5Ub3Aobm9kZSkge1xuICBjb25zdCBydW5uaW5nVHJhbnNpdGlvbiA9IFRyYW5zaXRpb24gJiYgVHJhbnNpdGlvbi5ydW5uaW5nO1xuICBpZiAoKHJ1bm5pbmdUcmFuc2l0aW9uID8gbm9kZS50U3RhdGUgOiBub2RlLnN0YXRlKSA9PT0gMCkgcmV0dXJuO1xuICBpZiAoKHJ1bm5pbmdUcmFuc2l0aW9uID8gbm9kZS50U3RhdGUgOiBub2RlLnN0YXRlKSA9PT0gUEVORElORykgcmV0dXJuIGxvb2tVcHN0cmVhbShub2RlKTtcbiAgaWYgKG5vZGUuc3VzcGVuc2UgJiYgdW50cmFjayhub2RlLnN1c3BlbnNlLmluRmFsbGJhY2spKSByZXR1cm4gbm9kZS5zdXNwZW5zZS5lZmZlY3RzLnB1c2gobm9kZSk7XG4gIGNvbnN0IGFuY2VzdG9ycyA9IFtub2RlXTtcbiAgd2hpbGUgKChub2RlID0gbm9kZS5vd25lcikgJiYgKCFub2RlLnVwZGF0ZWRBdCB8fCBub2RlLnVwZGF0ZWRBdCA8IEV4ZWNDb3VudCkpIHtcbiAgICBpZiAocnVubmluZ1RyYW5zaXRpb24gJiYgVHJhbnNpdGlvbi5kaXNwb3NlZC5oYXMobm9kZSkpIHJldHVybjtcbiAgICBpZiAocnVubmluZ1RyYW5zaXRpb24gPyBub2RlLnRTdGF0ZSA6IG5vZGUuc3RhdGUpIGFuY2VzdG9ycy5wdXNoKG5vZGUpO1xuICB9XG4gIGZvciAobGV0IGkgPSBhbmNlc3RvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBub2RlID0gYW5jZXN0b3JzW2ldO1xuICAgIGlmIChydW5uaW5nVHJhbnNpdGlvbikge1xuICAgICAgbGV0IHRvcCA9IG5vZGUsXG4gICAgICAgIHByZXYgPSBhbmNlc3RvcnNbaSArIDFdO1xuICAgICAgd2hpbGUgKCh0b3AgPSB0b3Aub3duZXIpICYmIHRvcCAhPT0gcHJldikge1xuICAgICAgICBpZiAoVHJhbnNpdGlvbi5kaXNwb3NlZC5oYXModG9wKSkgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoKHJ1bm5pbmdUcmFuc2l0aW9uID8gbm9kZS50U3RhdGUgOiBub2RlLnN0YXRlKSA9PT0gU1RBTEUpIHtcbiAgICAgIHVwZGF0ZUNvbXB1dGF0aW9uKG5vZGUpO1xuICAgIH0gZWxzZSBpZiAoKHJ1bm5pbmdUcmFuc2l0aW9uID8gbm9kZS50U3RhdGUgOiBub2RlLnN0YXRlKSA9PT0gUEVORElORykge1xuICAgICAgY29uc3QgdXBkYXRlcyA9IFVwZGF0ZXM7XG4gICAgICBVcGRhdGVzID0gbnVsbDtcbiAgICAgIHJ1blVwZGF0ZXMoKCkgPT4gbG9va1Vwc3RyZWFtKG5vZGUsIGFuY2VzdG9yc1swXSksIGZhbHNlKTtcbiAgICAgIFVwZGF0ZXMgPSB1cGRhdGVzO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcnVuVXBkYXRlcyhmbiwgaW5pdCkge1xuICBpZiAoVXBkYXRlcykgcmV0dXJuIGZuKCk7XG4gIGxldCB3YWl0ID0gZmFsc2U7XG4gIGlmICghaW5pdCkgVXBkYXRlcyA9IFtdO1xuICBpZiAoRWZmZWN0cykgd2FpdCA9IHRydWU7ZWxzZSBFZmZlY3RzID0gW107XG4gIEV4ZWNDb3VudCsrO1xuICB0cnkge1xuICAgIGNvbnN0IHJlcyA9IGZuKCk7XG4gICAgY29tcGxldGVVcGRhdGVzKHdhaXQpO1xuICAgIHJldHVybiByZXM7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmICghd2FpdCkgRWZmZWN0cyA9IG51bGw7XG4gICAgVXBkYXRlcyA9IG51bGw7XG4gICAgaGFuZGxlRXJyb3IoZXJyKTtcbiAgfVxufVxuZnVuY3Rpb24gY29tcGxldGVVcGRhdGVzKHdhaXQpIHtcbiAgaWYgKFVwZGF0ZXMpIHtcbiAgICBpZiAoU2NoZWR1bGVyICYmIFRyYW5zaXRpb24gJiYgVHJhbnNpdGlvbi5ydW5uaW5nKSBzY2hlZHVsZVF1ZXVlKFVwZGF0ZXMpO2Vsc2UgcnVuUXVldWUoVXBkYXRlcyk7XG4gICAgVXBkYXRlcyA9IG51bGw7XG4gIH1cbiAgaWYgKHdhaXQpIHJldHVybjtcbiAgbGV0IHJlcztcbiAgaWYgKFRyYW5zaXRpb24pIHtcbiAgICBpZiAoIVRyYW5zaXRpb24ucHJvbWlzZXMuc2l6ZSAmJiAhVHJhbnNpdGlvbi5xdWV1ZS5zaXplKSB7XG4gICAgICBjb25zdCBzb3VyY2VzID0gVHJhbnNpdGlvbi5zb3VyY2VzO1xuICAgICAgY29uc3QgZGlzcG9zZWQgPSBUcmFuc2l0aW9uLmRpc3Bvc2VkO1xuICAgICAgRWZmZWN0cy5wdXNoLmFwcGx5KEVmZmVjdHMsIFRyYW5zaXRpb24uZWZmZWN0cyk7XG4gICAgICByZXMgPSBUcmFuc2l0aW9uLnJlc29sdmU7XG4gICAgICBmb3IgKGNvbnN0IGUgb2YgRWZmZWN0cykge1xuICAgICAgICBcInRTdGF0ZVwiIGluIGUgJiYgKGUuc3RhdGUgPSBlLnRTdGF0ZSk7XG4gICAgICAgIGRlbGV0ZSBlLnRTdGF0ZTtcbiAgICAgIH1cbiAgICAgIFRyYW5zaXRpb24gPSBudWxsO1xuICAgICAgcnVuVXBkYXRlcygoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgZCBvZiBkaXNwb3NlZCkgY2xlYW5Ob2RlKGQpO1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2Ygc291cmNlcykge1xuICAgICAgICAgIHYudmFsdWUgPSB2LnRWYWx1ZTtcbiAgICAgICAgICBpZiAodi5vd25lZCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHYub3duZWQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIGNsZWFuTm9kZSh2Lm93bmVkW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHYudE93bmVkKSB2Lm93bmVkID0gdi50T3duZWQ7XG4gICAgICAgICAgZGVsZXRlIHYudFZhbHVlO1xuICAgICAgICAgIGRlbGV0ZSB2LnRPd25lZDtcbiAgICAgICAgICB2LnRTdGF0ZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgc2V0VHJhbnNQZW5kaW5nKGZhbHNlKTtcbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9IGVsc2UgaWYgKFRyYW5zaXRpb24ucnVubmluZykge1xuICAgICAgVHJhbnNpdGlvbi5ydW5uaW5nID0gZmFsc2U7XG4gICAgICBUcmFuc2l0aW9uLmVmZmVjdHMucHVzaC5hcHBseShUcmFuc2l0aW9uLmVmZmVjdHMsIEVmZmVjdHMpO1xuICAgICAgRWZmZWN0cyA9IG51bGw7XG4gICAgICBzZXRUcmFuc1BlbmRpbmcodHJ1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGNvbnN0IGUgPSBFZmZlY3RzO1xuICBFZmZlY3RzID0gbnVsbDtcbiAgaWYgKGUubGVuZ3RoKSBydW5VcGRhdGVzKCgpID0+IHJ1bkVmZmVjdHMoZSksIGZhbHNlKTtcbiAgaWYgKHJlcykgcmVzKCk7XG59XG5mdW5jdGlvbiBydW5RdWV1ZShxdWV1ZSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSBydW5Ub3AocXVldWVbaV0pO1xufVxuZnVuY3Rpb24gc2NoZWR1bGVRdWV1ZShxdWV1ZSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgaXRlbSA9IHF1ZXVlW2ldO1xuICAgIGNvbnN0IHRhc2tzID0gVHJhbnNpdGlvbi5xdWV1ZTtcbiAgICBpZiAoIXRhc2tzLmhhcyhpdGVtKSkge1xuICAgICAgdGFza3MuYWRkKGl0ZW0pO1xuICAgICAgU2NoZWR1bGVyKCgpID0+IHtcbiAgICAgICAgdGFza3MuZGVsZXRlKGl0ZW0pO1xuICAgICAgICBydW5VcGRhdGVzKCgpID0+IHtcbiAgICAgICAgICBUcmFuc2l0aW9uLnJ1bm5pbmcgPSB0cnVlO1xuICAgICAgICAgIHJ1blRvcChpdGVtKTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICBUcmFuc2l0aW9uICYmIChUcmFuc2l0aW9uLnJ1bm5pbmcgPSBmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHJ1blVzZXJFZmZlY3RzKHF1ZXVlKSB7XG4gIGxldCBpLFxuICAgIHVzZXJMZW5ndGggPSAwO1xuICBmb3IgKGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBlID0gcXVldWVbaV07XG4gICAgaWYgKCFlLnVzZXIpIHJ1blRvcChlKTtlbHNlIHF1ZXVlW3VzZXJMZW5ndGgrK10gPSBlO1xuICB9XG4gIGlmIChzaGFyZWRDb25maWcuY29udGV4dCkge1xuICAgIGlmIChzaGFyZWRDb25maWcuY291bnQpIHtcbiAgICAgIHNoYXJlZENvbmZpZy5lZmZlY3RzIHx8IChzaGFyZWRDb25maWcuZWZmZWN0cyA9IFtdKTtcbiAgICAgIHNoYXJlZENvbmZpZy5lZmZlY3RzLnB1c2goLi4ucXVldWUuc2xpY2UoMCwgdXNlckxlbmd0aCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZXRIeWRyYXRlQ29udGV4dCgpO1xuICB9XG4gIGlmIChzaGFyZWRDb25maWcuZWZmZWN0cyAmJiAoc2hhcmVkQ29uZmlnLmRvbmUgfHwgIXNoYXJlZENvbmZpZy5jb3VudCkpIHtcbiAgICBxdWV1ZSA9IFsuLi5zaGFyZWRDb25maWcuZWZmZWN0cywgLi4ucXVldWVdO1xuICAgIHVzZXJMZW5ndGggKz0gc2hhcmVkQ29uZmlnLmVmZmVjdHMubGVuZ3RoO1xuICAgIGRlbGV0ZSBzaGFyZWRDb25maWcuZWZmZWN0cztcbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgdXNlckxlbmd0aDsgaSsrKSBydW5Ub3AocXVldWVbaV0pO1xufVxuZnVuY3Rpb24gbG9va1Vwc3RyZWFtKG5vZGUsIGlnbm9yZSkge1xuICBjb25zdCBydW5uaW5nVHJhbnNpdGlvbiA9IFRyYW5zaXRpb24gJiYgVHJhbnNpdGlvbi5ydW5uaW5nO1xuICBpZiAocnVubmluZ1RyYW5zaXRpb24pIG5vZGUudFN0YXRlID0gMDtlbHNlIG5vZGUuc3RhdGUgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuc291cmNlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHNvdXJjZSA9IG5vZGUuc291cmNlc1tpXTtcbiAgICBpZiAoc291cmNlLnNvdXJjZXMpIHtcbiAgICAgIGNvbnN0IHN0YXRlID0gcnVubmluZ1RyYW5zaXRpb24gPyBzb3VyY2UudFN0YXRlIDogc291cmNlLnN0YXRlO1xuICAgICAgaWYgKHN0YXRlID09PSBTVEFMRSkge1xuICAgICAgICBpZiAoc291cmNlICE9PSBpZ25vcmUgJiYgKCFzb3VyY2UudXBkYXRlZEF0IHx8IHNvdXJjZS51cGRhdGVkQXQgPCBFeGVjQ291bnQpKSBydW5Ub3Aoc291cmNlKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09IFBFTkRJTkcpIGxvb2tVcHN0cmVhbShzb3VyY2UsIGlnbm9yZSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBtYXJrRG93bnN0cmVhbShub2RlKSB7XG4gIGNvbnN0IHJ1bm5pbmdUcmFuc2l0aW9uID0gVHJhbnNpdGlvbiAmJiBUcmFuc2l0aW9uLnJ1bm5pbmc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5vYnNlcnZlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBvID0gbm9kZS5vYnNlcnZlcnNbaV07XG4gICAgaWYgKHJ1bm5pbmdUcmFuc2l0aW9uID8gIW8udFN0YXRlIDogIW8uc3RhdGUpIHtcbiAgICAgIGlmIChydW5uaW5nVHJhbnNpdGlvbikgby50U3RhdGUgPSBQRU5ESU5HO2Vsc2Ugby5zdGF0ZSA9IFBFTkRJTkc7XG4gICAgICBpZiAoby5wdXJlKSBVcGRhdGVzLnB1c2gobyk7ZWxzZSBFZmZlY3RzLnB1c2gobyk7XG4gICAgICBvLm9ic2VydmVycyAmJiBtYXJrRG93bnN0cmVhbShvKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGNsZWFuTm9kZShub2RlKSB7XG4gIGxldCBpO1xuICBpZiAobm9kZS5zb3VyY2VzKSB7XG4gICAgd2hpbGUgKG5vZGUuc291cmNlcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IG5vZGUuc291cmNlcy5wb3AoKSxcbiAgICAgICAgaW5kZXggPSBub2RlLnNvdXJjZVNsb3RzLnBvcCgpLFxuICAgICAgICBvYnMgPSBzb3VyY2Uub2JzZXJ2ZXJzO1xuICAgICAgaWYgKG9icyAmJiBvYnMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IG4gPSBvYnMucG9wKCksXG4gICAgICAgICAgcyA9IHNvdXJjZS5vYnNlcnZlclNsb3RzLnBvcCgpO1xuICAgICAgICBpZiAoaW5kZXggPCBvYnMubGVuZ3RoKSB7XG4gICAgICAgICAgbi5zb3VyY2VTbG90c1tzXSA9IGluZGV4O1xuICAgICAgICAgIG9ic1tpbmRleF0gPSBuO1xuICAgICAgICAgIHNvdXJjZS5vYnNlcnZlclNsb3RzW2luZGV4XSA9IHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKG5vZGUudE93bmVkKSB7XG4gICAgZm9yIChpID0gbm9kZS50T3duZWQubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGNsZWFuTm9kZShub2RlLnRPd25lZFtpXSk7XG4gICAgZGVsZXRlIG5vZGUudE93bmVkO1xuICB9XG4gIGlmIChUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZyAmJiBub2RlLnB1cmUpIHtcbiAgICByZXNldChub2RlLCB0cnVlKTtcbiAgfSBlbHNlIGlmIChub2RlLm93bmVkKSB7XG4gICAgZm9yIChpID0gbm9kZS5vd25lZC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgY2xlYW5Ob2RlKG5vZGUub3duZWRbaV0pO1xuICAgIG5vZGUub3duZWQgPSBudWxsO1xuICB9XG4gIGlmIChub2RlLmNsZWFudXBzKSB7XG4gICAgZm9yIChpID0gbm9kZS5jbGVhbnVwcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgbm9kZS5jbGVhbnVwc1tpXSgpO1xuICAgIG5vZGUuY2xlYW51cHMgPSBudWxsO1xuICB9XG4gIGlmIChUcmFuc2l0aW9uICYmIFRyYW5zaXRpb24ucnVubmluZykgbm9kZS50U3RhdGUgPSAwO2Vsc2Ugbm9kZS5zdGF0ZSA9IDA7XG59XG5mdW5jdGlvbiByZXNldChub2RlLCB0b3ApIHtcbiAgaWYgKCF0b3ApIHtcbiAgICBub2RlLnRTdGF0ZSA9IDA7XG4gICAgVHJhbnNpdGlvbi5kaXNwb3NlZC5hZGQobm9kZSk7XG4gIH1cbiAgaWYgKG5vZGUub3duZWQpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUub3duZWQubGVuZ3RoOyBpKyspIHJlc2V0KG5vZGUub3duZWRbaV0pO1xuICB9XG59XG5mdW5jdGlvbiBjYXN0RXJyb3IoZXJyKSB7XG4gIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIGVycjtcbiAgcmV0dXJuIG5ldyBFcnJvcih0eXBlb2YgZXJyID09PSBcInN0cmluZ1wiID8gZXJyIDogXCJVbmtub3duIGVycm9yXCIsIHtcbiAgICBjYXVzZTogZXJyXG4gIH0pO1xufVxuZnVuY3Rpb24gcnVuRXJyb3JzKGVyciwgZm5zLCBvd25lcikge1xuICB0cnkge1xuICAgIGZvciAoY29uc3QgZiBvZiBmbnMpIGYoZXJyKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIG93bmVyICYmIG93bmVyLm93bmVyIHx8IG51bGwpO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVFcnJvcihlcnIsIG93bmVyID0gT3duZXIpIHtcbiAgY29uc3QgZm5zID0gRVJST1IgJiYgb3duZXIgJiYgb3duZXIuY29udGV4dCAmJiBvd25lci5jb250ZXh0W0VSUk9SXTtcbiAgY29uc3QgZXJyb3IgPSBjYXN0RXJyb3IoZXJyKTtcbiAgaWYgKCFmbnMpIHRocm93IGVycm9yO1xuICBpZiAoRWZmZWN0cykgRWZmZWN0cy5wdXNoKHtcbiAgICBmbigpIHtcbiAgICAgIHJ1bkVycm9ycyhlcnJvciwgZm5zLCBvd25lcik7XG4gICAgfSxcbiAgICBzdGF0ZTogU1RBTEVcbiAgfSk7ZWxzZSBydW5FcnJvcnMoZXJyb3IsIGZucywgb3duZXIpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiAmJiAhY2hpbGRyZW4ubGVuZ3RoKSByZXR1cm4gcmVzb2x2ZUNoaWxkcmVuKGNoaWxkcmVuKCkpO1xuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcmVzdWx0ID0gcmVzb2x2ZUNoaWxkcmVuKGNoaWxkcmVuW2ldKTtcbiAgICAgIEFycmF5LmlzQXJyYXkocmVzdWx0KSA/IHJlc3VsdHMucHVzaC5hcHBseShyZXN1bHRzLCByZXN1bHQpIDogcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG4gIHJldHVybiBjaGlsZHJlbjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVByb3ZpZGVyKGlkLCBvcHRpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwcm92aWRlcihwcm9wcykge1xuICAgIGxldCByZXM7XG4gICAgY3JlYXRlUmVuZGVyRWZmZWN0KCgpID0+IHJlcyA9IHVudHJhY2soKCkgPT4ge1xuICAgICAgT3duZXIuY29udGV4dCA9IHtcbiAgICAgICAgLi4uT3duZXIuY29udGV4dCxcbiAgICAgICAgW2lkXTogcHJvcHMudmFsdWVcbiAgICAgIH07XG4gICAgICByZXR1cm4gY2hpbGRyZW4oKCkgPT4gcHJvcHMuY2hpbGRyZW4pO1xuICAgIH0pLCB1bmRlZmluZWQpO1xuICAgIHJldHVybiByZXM7XG4gIH07XG59XG5mdW5jdGlvbiBvbkVycm9yKGZuKSB7XG4gIEVSUk9SIHx8IChFUlJPUiA9IFN5bWJvbChcImVycm9yXCIpKTtcbiAgaWYgKE93bmVyID09PSBudWxsKSA7ZWxzZSBpZiAoT3duZXIuY29udGV4dCA9PT0gbnVsbCB8fCAhT3duZXIuY29udGV4dFtFUlJPUl0pIHtcbiAgICBPd25lci5jb250ZXh0ID0ge1xuICAgICAgLi4uT3duZXIuY29udGV4dCxcbiAgICAgIFtFUlJPUl06IFtmbl1cbiAgICB9O1xuICAgIG11dGF0ZUNvbnRleHQoT3duZXIsIEVSUk9SLCBbZm5dKTtcbiAgfSBlbHNlIE93bmVyLmNvbnRleHRbRVJST1JdLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gbXV0YXRlQ29udGV4dChvLCBrZXksIHZhbHVlKSB7XG4gIGlmIChvLm93bmVkKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvLm93bmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoby5vd25lZFtpXS5jb250ZXh0ID09PSBvLmNvbnRleHQpIG11dGF0ZUNvbnRleHQoby5vd25lZFtpXSwga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIW8ub3duZWRbaV0uY29udGV4dCkge1xuICAgICAgICBvLm93bmVkW2ldLmNvbnRleHQgPSBvLmNvbnRleHQ7XG4gICAgICAgIG11dGF0ZUNvbnRleHQoby5vd25lZFtpXSwga2V5LCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKCFvLm93bmVkW2ldLmNvbnRleHRba2V5XSkge1xuICAgICAgICBvLm93bmVkW2ldLmNvbnRleHRba2V5XSA9IHZhbHVlO1xuICAgICAgICBtdXRhdGVDb250ZXh0KG8ub3duZWRbaV0sIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvYnNlcnZhYmxlKGlucHV0KSB7XG4gIHJldHVybiB7XG4gICAgc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICBpZiAoIShvYnNlcnZlciBpbnN0YW5jZW9mIE9iamVjdCkgfHwgb2JzZXJ2ZXIgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC5cIik7XG4gICAgICB9XG4gICAgICBjb25zdCBoYW5kbGVyID0gdHlwZW9mIG9ic2VydmVyID09PSBcImZ1bmN0aW9uXCIgPyBvYnNlcnZlciA6IG9ic2VydmVyLm5leHQgJiYgb2JzZXJ2ZXIubmV4dC5iaW5kKG9ic2VydmVyKTtcbiAgICAgIGlmICghaGFuZGxlcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlKCkge31cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRpc3Bvc2UgPSBjcmVhdGVSb290KGRpc3Bvc2VyID0+IHtcbiAgICAgICAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICBjb25zdCB2ID0gaW5wdXQoKTtcbiAgICAgICAgICB1bnRyYWNrKCgpID0+IGhhbmRsZXIodikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRpc3Bvc2VyO1xuICAgICAgfSk7XG4gICAgICBpZiAoZ2V0T3duZXIoKSkgb25DbGVhbnVwKGRpc3Bvc2UpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgICAgZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0sXG4gICAgW1N5bWJvbC5vYnNlcnZhYmxlIHx8IFwiQEBvYnNlcnZhYmxlXCJdKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gZnJvbShwcm9kdWNlciwgaW5pdGFsVmFsdWUgPSB1bmRlZmluZWQpIHtcbiAgY29uc3QgW3MsIHNldF0gPSBjcmVhdGVTaWduYWwoaW5pdGFsVmFsdWUsIHtcbiAgICBlcXVhbHM6IGZhbHNlXG4gIH0pO1xuICBpZiAoXCJzdWJzY3JpYmVcIiBpbiBwcm9kdWNlcikge1xuICAgIGNvbnN0IHVuc3ViID0gcHJvZHVjZXIuc3Vic2NyaWJlKHYgPT4gc2V0KCgpID0+IHYpKTtcbiAgICBvbkNsZWFudXAoKCkgPT4gXCJ1bnN1YnNjcmliZVwiIGluIHVuc3ViID8gdW5zdWIudW5zdWJzY3JpYmUoKSA6IHVuc3ViKCkpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNsZWFuID0gcHJvZHVjZXIoc2V0KTtcbiAgICBvbkNsZWFudXAoY2xlYW4pO1xuICB9XG4gIHJldHVybiBzO1xufVxuXG5jb25zdCBGQUxMQkFDSyA9IFN5bWJvbChcImZhbGxiYWNrXCIpO1xuZnVuY3Rpb24gZGlzcG9zZShkKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZC5sZW5ndGg7IGkrKykgZFtpXSgpO1xufVxuZnVuY3Rpb24gbWFwQXJyYXkobGlzdCwgbWFwRm4sIG9wdGlvbnMgPSB7fSkge1xuICBsZXQgaXRlbXMgPSBbXSxcbiAgICBtYXBwZWQgPSBbXSxcbiAgICBkaXNwb3NlcnMgPSBbXSxcbiAgICBsZW4gPSAwLFxuICAgIGluZGV4ZXMgPSBtYXBGbi5sZW5ndGggPiAxID8gW10gOiBudWxsO1xuICBvbkNsZWFudXAoKCkgPT4gZGlzcG9zZShkaXNwb3NlcnMpKTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBsZXQgbmV3SXRlbXMgPSBsaXN0KCkgfHwgW10sXG4gICAgICBuZXdMZW4gPSBuZXdJdGVtcy5sZW5ndGgsXG4gICAgICBpLFxuICAgICAgajtcbiAgICBuZXdJdGVtc1skVFJBQ0tdO1xuICAgIHJldHVybiB1bnRyYWNrKCgpID0+IHtcbiAgICAgIGxldCBuZXdJbmRpY2VzLCBuZXdJbmRpY2VzTmV4dCwgdGVtcCwgdGVtcGRpc3Bvc2VycywgdGVtcEluZGV4ZXMsIHN0YXJ0LCBlbmQsIG5ld0VuZCwgaXRlbTtcbiAgICAgIGlmIChuZXdMZW4gPT09IDApIHtcbiAgICAgICAgaWYgKGxlbiAhPT0gMCkge1xuICAgICAgICAgIGRpc3Bvc2UoZGlzcG9zZXJzKTtcbiAgICAgICAgICBkaXNwb3NlcnMgPSBbXTtcbiAgICAgICAgICBpdGVtcyA9IFtdO1xuICAgICAgICAgIG1hcHBlZCA9IFtdO1xuICAgICAgICAgIGxlbiA9IDA7XG4gICAgICAgICAgaW5kZXhlcyAmJiAoaW5kZXhlcyA9IFtdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5mYWxsYmFjaykge1xuICAgICAgICAgIGl0ZW1zID0gW0ZBTExCQUNLXTtcbiAgICAgICAgICBtYXBwZWRbMF0gPSBjcmVhdGVSb290KGRpc3Bvc2VyID0+IHtcbiAgICAgICAgICAgIGRpc3Bvc2Vyc1swXSA9IGRpc3Bvc2VyO1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZmFsbGJhY2soKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBsZW4gPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgbWFwcGVkID0gbmV3IEFycmF5KG5ld0xlbik7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBuZXdMZW47IGorKykge1xuICAgICAgICAgIGl0ZW1zW2pdID0gbmV3SXRlbXNbal07XG4gICAgICAgICAgbWFwcGVkW2pdID0gY3JlYXRlUm9vdChtYXBwZXIpO1xuICAgICAgICB9XG4gICAgICAgIGxlbiA9IG5ld0xlbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRlbXAgPSBuZXcgQXJyYXkobmV3TGVuKTtcbiAgICAgICAgdGVtcGRpc3Bvc2VycyA9IG5ldyBBcnJheShuZXdMZW4pO1xuICAgICAgICBpbmRleGVzICYmICh0ZW1wSW5kZXhlcyA9IG5ldyBBcnJheShuZXdMZW4pKTtcbiAgICAgICAgZm9yIChzdGFydCA9IDAsIGVuZCA9IE1hdGgubWluKGxlbiwgbmV3TGVuKTsgc3RhcnQgPCBlbmQgJiYgaXRlbXNbc3RhcnRdID09PSBuZXdJdGVtc1tzdGFydF07IHN0YXJ0KyspO1xuICAgICAgICBmb3IgKGVuZCA9IGxlbiAtIDEsIG5ld0VuZCA9IG5ld0xlbiAtIDE7IGVuZCA+PSBzdGFydCAmJiBuZXdFbmQgPj0gc3RhcnQgJiYgaXRlbXNbZW5kXSA9PT0gbmV3SXRlbXNbbmV3RW5kXTsgZW5kLS0sIG5ld0VuZC0tKSB7XG4gICAgICAgICAgdGVtcFtuZXdFbmRdID0gbWFwcGVkW2VuZF07XG4gICAgICAgICAgdGVtcGRpc3Bvc2Vyc1tuZXdFbmRdID0gZGlzcG9zZXJzW2VuZF07XG4gICAgICAgICAgaW5kZXhlcyAmJiAodGVtcEluZGV4ZXNbbmV3RW5kXSA9IGluZGV4ZXNbZW5kXSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3SW5kaWNlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgbmV3SW5kaWNlc05leHQgPSBuZXcgQXJyYXkobmV3RW5kICsgMSk7XG4gICAgICAgIGZvciAoaiA9IG5ld0VuZDsgaiA+PSBzdGFydDsgai0tKSB7XG4gICAgICAgICAgaXRlbSA9IG5ld0l0ZW1zW2pdO1xuICAgICAgICAgIGkgPSBuZXdJbmRpY2VzLmdldChpdGVtKTtcbiAgICAgICAgICBuZXdJbmRpY2VzTmV4dFtqXSA9IGkgPT09IHVuZGVmaW5lZCA/IC0xIDogaTtcbiAgICAgICAgICBuZXdJbmRpY2VzLnNldChpdGVtLCBqKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSBzdGFydDsgaSA8PSBlbmQ7IGkrKykge1xuICAgICAgICAgIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgICBqID0gbmV3SW5kaWNlcy5nZXQoaXRlbSk7XG4gICAgICAgICAgaWYgKGogIT09IHVuZGVmaW5lZCAmJiBqICE9PSAtMSkge1xuICAgICAgICAgICAgdGVtcFtqXSA9IG1hcHBlZFtpXTtcbiAgICAgICAgICAgIHRlbXBkaXNwb3NlcnNbal0gPSBkaXNwb3NlcnNbaV07XG4gICAgICAgICAgICBpbmRleGVzICYmICh0ZW1wSW5kZXhlc1tqXSA9IGluZGV4ZXNbaV0pO1xuICAgICAgICAgICAgaiA9IG5ld0luZGljZXNOZXh0W2pdO1xuICAgICAgICAgICAgbmV3SW5kaWNlcy5zZXQoaXRlbSwgaik7XG4gICAgICAgICAgfSBlbHNlIGRpc3Bvc2Vyc1tpXSgpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaiA9IHN0YXJ0OyBqIDwgbmV3TGVuOyBqKyspIHtcbiAgICAgICAgICBpZiAoaiBpbiB0ZW1wKSB7XG4gICAgICAgICAgICBtYXBwZWRbal0gPSB0ZW1wW2pdO1xuICAgICAgICAgICAgZGlzcG9zZXJzW2pdID0gdGVtcGRpc3Bvc2Vyc1tqXTtcbiAgICAgICAgICAgIGlmIChpbmRleGVzKSB7XG4gICAgICAgICAgICAgIGluZGV4ZXNbal0gPSB0ZW1wSW5kZXhlc1tqXTtcbiAgICAgICAgICAgICAgaW5kZXhlc1tqXShqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgbWFwcGVkW2pdID0gY3JlYXRlUm9vdChtYXBwZXIpO1xuICAgICAgICB9XG4gICAgICAgIG1hcHBlZCA9IG1hcHBlZC5zbGljZSgwLCBsZW4gPSBuZXdMZW4pO1xuICAgICAgICBpdGVtcyA9IG5ld0l0ZW1zLnNsaWNlKDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hcHBlZDtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBtYXBwZXIoZGlzcG9zZXIpIHtcbiAgICAgIGRpc3Bvc2Vyc1tqXSA9IGRpc3Bvc2VyO1xuICAgICAgaWYgKGluZGV4ZXMpIHtcbiAgICAgICAgY29uc3QgW3MsIHNldF0gPSBjcmVhdGVTaWduYWwoaik7XG4gICAgICAgIGluZGV4ZXNbal0gPSBzZXQ7XG4gICAgICAgIHJldHVybiBtYXBGbihuZXdJdGVtc1tqXSwgcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFwRm4obmV3SXRlbXNbal0pO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGluZGV4QXJyYXkobGlzdCwgbWFwRm4sIG9wdGlvbnMgPSB7fSkge1xuICBsZXQgaXRlbXMgPSBbXSxcbiAgICBtYXBwZWQgPSBbXSxcbiAgICBkaXNwb3NlcnMgPSBbXSxcbiAgICBzaWduYWxzID0gW10sXG4gICAgbGVuID0gMCxcbiAgICBpO1xuICBvbkNsZWFudXAoKCkgPT4gZGlzcG9zZShkaXNwb3NlcnMpKTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBjb25zdCBuZXdJdGVtcyA9IGxpc3QoKSB8fCBbXSxcbiAgICAgIG5ld0xlbiA9IG5ld0l0ZW1zLmxlbmd0aDtcbiAgICBuZXdJdGVtc1skVFJBQ0tdO1xuICAgIHJldHVybiB1bnRyYWNrKCgpID0+IHtcbiAgICAgIGlmIChuZXdMZW4gPT09IDApIHtcbiAgICAgICAgaWYgKGxlbiAhPT0gMCkge1xuICAgICAgICAgIGRpc3Bvc2UoZGlzcG9zZXJzKTtcbiAgICAgICAgICBkaXNwb3NlcnMgPSBbXTtcbiAgICAgICAgICBpdGVtcyA9IFtdO1xuICAgICAgICAgIG1hcHBlZCA9IFtdO1xuICAgICAgICAgIGxlbiA9IDA7XG4gICAgICAgICAgc2lnbmFscyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmZhbGxiYWNrKSB7XG4gICAgICAgICAgaXRlbXMgPSBbRkFMTEJBQ0tdO1xuICAgICAgICAgIG1hcHBlZFswXSA9IGNyZWF0ZVJvb3QoZGlzcG9zZXIgPT4ge1xuICAgICAgICAgICAgZGlzcG9zZXJzWzBdID0gZGlzcG9zZXI7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5mYWxsYmFjaygpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGxlbiA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcHBlZDtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtc1swXSA9PT0gRkFMTEJBQ0spIHtcbiAgICAgICAgZGlzcG9zZXJzWzBdKCk7XG4gICAgICAgIGRpc3Bvc2VycyA9IFtdO1xuICAgICAgICBpdGVtcyA9IFtdO1xuICAgICAgICBtYXBwZWQgPSBbXTtcbiAgICAgICAgbGVuID0gMDtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXdMZW47IGkrKykge1xuICAgICAgICBpZiAoaSA8IGl0ZW1zLmxlbmd0aCAmJiBpdGVtc1tpXSAhPT0gbmV3SXRlbXNbaV0pIHtcbiAgICAgICAgICBzaWduYWxzW2ldKCgpID0+IG5ld0l0ZW1zW2ldKTtcbiAgICAgICAgfSBlbHNlIGlmIChpID49IGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgIG1hcHBlZFtpXSA9IGNyZWF0ZVJvb3QobWFwcGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yICg7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBkaXNwb3NlcnNbaV0oKTtcbiAgICAgIH1cbiAgICAgIGxlbiA9IHNpZ25hbHMubGVuZ3RoID0gZGlzcG9zZXJzLmxlbmd0aCA9IG5ld0xlbjtcbiAgICAgIGl0ZW1zID0gbmV3SXRlbXMuc2xpY2UoMCk7XG4gICAgICByZXR1cm4gbWFwcGVkID0gbWFwcGVkLnNsaWNlKDAsIGxlbik7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gbWFwcGVyKGRpc3Bvc2VyKSB7XG4gICAgICBkaXNwb3NlcnNbaV0gPSBkaXNwb3NlcjtcbiAgICAgIGNvbnN0IFtzLCBzZXRdID0gY3JlYXRlU2lnbmFsKG5ld0l0ZW1zW2ldKTtcbiAgICAgIHNpZ25hbHNbaV0gPSBzZXQ7XG4gICAgICByZXR1cm4gbWFwRm4ocywgaSk7XG4gICAgfVxuICB9O1xufVxuXG5sZXQgaHlkcmF0aW9uRW5hYmxlZCA9IGZhbHNlO1xuZnVuY3Rpb24gZW5hYmxlSHlkcmF0aW9uKCkge1xuICBoeWRyYXRpb25FbmFibGVkID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudChDb21wLCBwcm9wcykge1xuICBpZiAoaHlkcmF0aW9uRW5hYmxlZCkge1xuICAgIGlmIChzaGFyZWRDb25maWcuY29udGV4dCkge1xuICAgICAgY29uc3QgYyA9IHNoYXJlZENvbmZpZy5jb250ZXh0O1xuICAgICAgc2V0SHlkcmF0ZUNvbnRleHQobmV4dEh5ZHJhdGVDb250ZXh0KCkpO1xuICAgICAgY29uc3QgciA9IHVudHJhY2soKCkgPT4gQ29tcChwcm9wcyB8fCB7fSkpO1xuICAgICAgc2V0SHlkcmF0ZUNvbnRleHQoYyk7XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVudHJhY2soKCkgPT4gQ29tcChwcm9wcyB8fCB7fSkpO1xufVxuZnVuY3Rpb24gdHJ1ZUZuKCkge1xuICByZXR1cm4gdHJ1ZTtcbn1cbmNvbnN0IHByb3BUcmFwcyA9IHtcbiAgZ2V0KF8sIHByb3BlcnR5LCByZWNlaXZlcikge1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJFBST1hZKSByZXR1cm4gcmVjZWl2ZXI7XG4gICAgcmV0dXJuIF8uZ2V0KHByb3BlcnR5KTtcbiAgfSxcbiAgaGFzKF8sIHByb3BlcnR5KSB7XG4gICAgaWYgKHByb3BlcnR5ID09PSAkUFJPWFkpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBfLmhhcyhwcm9wZXJ0eSk7XG4gIH0sXG4gIHNldDogdHJ1ZUZuLFxuICBkZWxldGVQcm9wZXJ0eTogdHJ1ZUZuLFxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoXywgcHJvcGVydHkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF8uZ2V0KHByb3BlcnR5KTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IHRydWVGbixcbiAgICAgIGRlbGV0ZVByb3BlcnR5OiB0cnVlRm5cbiAgICB9O1xuICB9LFxuICBvd25LZXlzKF8pIHtcbiAgICByZXR1cm4gXy5rZXlzKCk7XG4gIH1cbn07XG5mdW5jdGlvbiByZXNvbHZlU291cmNlKHMpIHtcbiAgcmV0dXJuICEocyA9IHR5cGVvZiBzID09PSBcImZ1bmN0aW9uXCIgPyBzKCkgOiBzKSA/IHt9IDogcztcbn1cbmZ1bmN0aW9uIHJlc29sdmVTb3VyY2VzKCkge1xuICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gdGhpcy5sZW5ndGg7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IHYgPSB0aGlzW2ldKCk7XG4gICAgaWYgKHYgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHY7XG4gIH1cbn1cbmZ1bmN0aW9uIG1lcmdlUHJvcHMoLi4uc291cmNlcykge1xuICBsZXQgcHJveHkgPSBmYWxzZTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcyA9IHNvdXJjZXNbaV07XG4gICAgcHJveHkgPSBwcm94eSB8fCAhIXMgJiYgJFBST1hZIGluIHM7XG4gICAgc291cmNlc1tpXSA9IHR5cGVvZiBzID09PSBcImZ1bmN0aW9uXCIgPyAocHJveHkgPSB0cnVlLCBjcmVhdGVNZW1vKHMpKSA6IHM7XG4gIH1cbiAgaWYgKFNVUFBPUlRTX1BST1hZICYmIHByb3h5KSB7XG4gICAgcmV0dXJuIG5ldyBQcm94eSh7XG4gICAgICBnZXQocHJvcGVydHkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHNvdXJjZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBjb25zdCB2ID0gcmVzb2x2ZVNvdXJjZShzb3VyY2VzW2ldKVtwcm9wZXJ0eV07XG4gICAgICAgICAgaWYgKHYgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHY7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBoYXMocHJvcGVydHkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHNvdXJjZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBpZiAocHJvcGVydHkgaW4gcmVzb2x2ZVNvdXJjZShzb3VyY2VzW2ldKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSxcbiAgICAgIGtleXMoKSB7XG4gICAgICAgIGNvbnN0IGtleXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VzLmxlbmd0aDsgaSsrKSBrZXlzLnB1c2goLi4uT2JqZWN0LmtleXMocmVzb2x2ZVNvdXJjZShzb3VyY2VzW2ldKSkpO1xuICAgICAgICByZXR1cm4gWy4uLm5ldyBTZXQoa2V5cyldO1xuICAgICAgfVxuICAgIH0sIHByb3BUcmFwcyk7XG4gIH1cbiAgY29uc3Qgc291cmNlc01hcCA9IHt9O1xuICBjb25zdCBkZWZpbmVkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZm9yIChsZXQgaSA9IHNvdXJjZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBjb25zdCBzb3VyY2UgPSBzb3VyY2VzW2ldO1xuICAgIGlmICghc291cmNlKSBjb250aW51ZTtcbiAgICBjb25zdCBzb3VyY2VLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlKTtcbiAgICBmb3IgKGxldCBpID0gc291cmNlS2V5cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY29uc3Qga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICAgIGlmIChrZXkgPT09IFwiX19wcm90b19fXCIgfHwga2V5ID09PSBcImNvbnN0cnVjdG9yXCIpIGNvbnRpbnVlO1xuICAgICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpO1xuICAgICAgaWYgKCFkZWZpbmVkW2tleV0pIHtcbiAgICAgICAgZGVmaW5lZFtrZXldID0gZGVzYy5nZXQgPyB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgZ2V0OiByZXNvbHZlU291cmNlcy5iaW5kKHNvdXJjZXNNYXBba2V5XSA9IFtkZXNjLmdldC5iaW5kKHNvdXJjZSldKVxuICAgICAgICB9IDogZGVzYy52YWx1ZSAhPT0gdW5kZWZpbmVkID8gZGVzYyA6IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZXMgPSBzb3VyY2VzTWFwW2tleV07XG4gICAgICAgIGlmIChzb3VyY2VzKSB7XG4gICAgICAgICAgaWYgKGRlc2MuZ2V0KSBzb3VyY2VzLnB1c2goZGVzYy5nZXQuYmluZChzb3VyY2UpKTtlbHNlIGlmIChkZXNjLnZhbHVlICE9PSB1bmRlZmluZWQpIHNvdXJjZXMucHVzaCgoKSA9PiBkZXNjLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25zdCB0YXJnZXQgPSB7fTtcbiAgY29uc3QgZGVmaW5lZEtleXMgPSBPYmplY3Qua2V5cyhkZWZpbmVkKTtcbiAgZm9yIChsZXQgaSA9IGRlZmluZWRLZXlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29uc3Qga2V5ID0gZGVmaW5lZEtleXNbaV0sXG4gICAgICBkZXNjID0gZGVmaW5lZFtrZXldO1xuICAgIGlmIChkZXNjICYmIGRlc2MuZ2V0KSBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2MpO2Vsc2UgdGFyZ2V0W2tleV0gPSBkZXNjID8gZGVzYy52YWx1ZSA6IHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gc3BsaXRQcm9wcyhwcm9wcywgLi4ua2V5cykge1xuICBpZiAoU1VQUE9SVFNfUFJPWFkgJiYgJFBST1hZIGluIHByb3BzKSB7XG4gICAgY29uc3QgYmxvY2tlZCA9IG5ldyBTZXQoa2V5cy5sZW5ndGggPiAxID8ga2V5cy5mbGF0KCkgOiBrZXlzWzBdKTtcbiAgICBjb25zdCByZXMgPSBrZXlzLm1hcChrID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJveHkoe1xuICAgICAgICBnZXQocHJvcGVydHkpIHtcbiAgICAgICAgICByZXR1cm4gay5pbmNsdWRlcyhwcm9wZXJ0eSkgPyBwcm9wc1twcm9wZXJ0eV0gOiB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGhhcyhwcm9wZXJ0eSkge1xuICAgICAgICAgIHJldHVybiBrLmluY2x1ZGVzKHByb3BlcnR5KSAmJiBwcm9wZXJ0eSBpbiBwcm9wcztcbiAgICAgICAgfSxcbiAgICAgICAga2V5cygpIHtcbiAgICAgICAgICByZXR1cm4gay5maWx0ZXIocHJvcGVydHkgPT4gcHJvcGVydHkgaW4gcHJvcHMpO1xuICAgICAgICB9XG4gICAgICB9LCBwcm9wVHJhcHMpO1xuICAgIH0pO1xuICAgIHJlcy5wdXNoKG5ldyBQcm94eSh7XG4gICAgICBnZXQocHJvcGVydHkpIHtcbiAgICAgICAgcmV0dXJuIGJsb2NrZWQuaGFzKHByb3BlcnR5KSA/IHVuZGVmaW5lZCA6IHByb3BzW3Byb3BlcnR5XTtcbiAgICAgIH0sXG4gICAgICBoYXMocHJvcGVydHkpIHtcbiAgICAgICAgcmV0dXJuIGJsb2NrZWQuaGFzKHByb3BlcnR5KSA/IGZhbHNlIDogcHJvcGVydHkgaW4gcHJvcHM7XG4gICAgICB9LFxuICAgICAga2V5cygpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5maWx0ZXIoayA9PiAhYmxvY2tlZC5oYXMoaykpO1xuICAgICAgfVxuICAgIH0sIHByb3BUcmFwcykpO1xuICAgIHJldHVybiByZXM7XG4gIH1cbiAgY29uc3Qgb3RoZXJPYmplY3QgPSB7fTtcbiAgY29uc3Qgb2JqZWN0cyA9IGtleXMubWFwKCgpID0+ICh7fSkpO1xuICBmb3IgKGNvbnN0IHByb3BOYW1lIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3BzKSkge1xuICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3BzLCBwcm9wTmFtZSk7XG4gICAgY29uc3QgaXNEZWZhdWx0RGVzYyA9ICFkZXNjLmdldCAmJiAhZGVzYy5zZXQgJiYgZGVzYy5lbnVtZXJhYmxlICYmIGRlc2Mud3JpdGFibGUgJiYgZGVzYy5jb25maWd1cmFibGU7XG4gICAgbGV0IGJsb2NrZWQgPSBmYWxzZTtcbiAgICBsZXQgb2JqZWN0SW5kZXggPSAwO1xuICAgIGZvciAoY29uc3QgayBvZiBrZXlzKSB7XG4gICAgICBpZiAoay5pbmNsdWRlcyhwcm9wTmFtZSkpIHtcbiAgICAgICAgYmxvY2tlZCA9IHRydWU7XG4gICAgICAgIGlzRGVmYXVsdERlc2MgPyBvYmplY3RzW29iamVjdEluZGV4XVtwcm9wTmFtZV0gPSBkZXNjLnZhbHVlIDogT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdHNbb2JqZWN0SW5kZXhdLCBwcm9wTmFtZSwgZGVzYyk7XG4gICAgICB9XG4gICAgICArK29iamVjdEluZGV4O1xuICAgIH1cbiAgICBpZiAoIWJsb2NrZWQpIHtcbiAgICAgIGlzRGVmYXVsdERlc2MgPyBvdGhlck9iamVjdFtwcm9wTmFtZV0gPSBkZXNjLnZhbHVlIDogT2JqZWN0LmRlZmluZVByb3BlcnR5KG90aGVyT2JqZWN0LCBwcm9wTmFtZSwgZGVzYyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBbLi4ub2JqZWN0cywgb3RoZXJPYmplY3RdO1xufVxuZnVuY3Rpb24gbGF6eShmbikge1xuICBsZXQgY29tcDtcbiAgbGV0IHA7XG4gIGNvbnN0IHdyYXAgPSBwcm9wcyA9PiB7XG4gICAgY29uc3QgY3R4ID0gc2hhcmVkQ29uZmlnLmNvbnRleHQ7XG4gICAgaWYgKGN0eCkge1xuICAgICAgY29uc3QgW3MsIHNldF0gPSBjcmVhdGVTaWduYWwoKTtcbiAgICAgIHNoYXJlZENvbmZpZy5jb3VudCB8fCAoc2hhcmVkQ29uZmlnLmNvdW50ID0gMCk7XG4gICAgICBzaGFyZWRDb25maWcuY291bnQrKztcbiAgICAgIChwIHx8IChwID0gZm4oKSkpLnRoZW4obW9kID0+IHtcbiAgICAgICAgIXNoYXJlZENvbmZpZy5kb25lICYmIHNldEh5ZHJhdGVDb250ZXh0KGN0eCk7XG4gICAgICAgIHNoYXJlZENvbmZpZy5jb3VudC0tO1xuICAgICAgICBzZXQoKCkgPT4gbW9kLmRlZmF1bHQpO1xuICAgICAgICBzZXRIeWRyYXRlQ29udGV4dCgpO1xuICAgICAgfSk7XG4gICAgICBjb21wID0gcztcbiAgICB9IGVsc2UgaWYgKCFjb21wKSB7XG4gICAgICBjb25zdCBbc10gPSBjcmVhdGVSZXNvdXJjZSgoKSA9PiAocCB8fCAocCA9IGZuKCkpKS50aGVuKG1vZCA9PiBtb2QuZGVmYXVsdCkpO1xuICAgICAgY29tcCA9IHM7XG4gICAgfVxuICAgIGxldCBDb21wO1xuICAgIHJldHVybiBjcmVhdGVNZW1vKCgpID0+IChDb21wID0gY29tcCgpKSA/IHVudHJhY2soKCkgPT4ge1xuICAgICAgaWYgKElTX0RFVikgO1xuICAgICAgaWYgKCFjdHggfHwgc2hhcmVkQ29uZmlnLmRvbmUpIHJldHVybiBDb21wKHByb3BzKTtcbiAgICAgIGNvbnN0IGMgPSBzaGFyZWRDb25maWcuY29udGV4dDtcbiAgICAgIHNldEh5ZHJhdGVDb250ZXh0KGN0eCk7XG4gICAgICBjb25zdCByID0gQ29tcChwcm9wcyk7XG4gICAgICBzZXRIeWRyYXRlQ29udGV4dChjKTtcbiAgICAgIHJldHVybiByO1xuICAgIH0pIDogXCJcIik7XG4gIH07XG4gIHdyYXAucHJlbG9hZCA9ICgpID0+IHAgfHwgKChwID0gZm4oKSkudGhlbihtb2QgPT4gY29tcCA9ICgpID0+IG1vZC5kZWZhdWx0KSwgcCk7XG4gIHJldHVybiB3cmFwO1xufVxubGV0IGNvdW50ZXIgPSAwO1xuZnVuY3Rpb24gY3JlYXRlVW5pcXVlSWQoKSB7XG4gIGNvbnN0IGN0eCA9IHNoYXJlZENvbmZpZy5jb250ZXh0O1xuICByZXR1cm4gY3R4ID8gc2hhcmVkQ29uZmlnLmdldE5leHRDb250ZXh0SWQoKSA6IGBjbC0ke2NvdW50ZXIrK31gO1xufVxuXG5jb25zdCBuYXJyb3dlZEVycm9yID0gbmFtZSA9PiBgU3RhbGUgcmVhZCBmcm9tIDwke25hbWV9Pi5gO1xuZnVuY3Rpb24gRm9yKHByb3BzKSB7XG4gIGNvbnN0IGZhbGxiYWNrID0gXCJmYWxsYmFja1wiIGluIHByb3BzICYmIHtcbiAgICBmYWxsYmFjazogKCkgPT4gcHJvcHMuZmFsbGJhY2tcbiAgfTtcbiAgcmV0dXJuIGNyZWF0ZU1lbW8obWFwQXJyYXkoKCkgPT4gcHJvcHMuZWFjaCwgcHJvcHMuY2hpbGRyZW4sIGZhbGxiYWNrIHx8IHVuZGVmaW5lZCkpO1xufVxuZnVuY3Rpb24gSW5kZXgocHJvcHMpIHtcbiAgY29uc3QgZmFsbGJhY2sgPSBcImZhbGxiYWNrXCIgaW4gcHJvcHMgJiYge1xuICAgIGZhbGxiYWNrOiAoKSA9PiBwcm9wcy5mYWxsYmFja1xuICB9O1xuICByZXR1cm4gY3JlYXRlTWVtbyhpbmRleEFycmF5KCgpID0+IHByb3BzLmVhY2gsIHByb3BzLmNoaWxkcmVuLCBmYWxsYmFjayB8fCB1bmRlZmluZWQpKTtcbn1cbmZ1bmN0aW9uIFNob3cocHJvcHMpIHtcbiAgY29uc3Qga2V5ZWQgPSBwcm9wcy5rZXllZDtcbiAgY29uc3QgY29uZGl0aW9uVmFsdWUgPSBjcmVhdGVNZW1vKCgpID0+IHByb3BzLndoZW4sIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgY29uc3QgY29uZGl0aW9uID0ga2V5ZWQgPyBjb25kaXRpb25WYWx1ZSA6IGNyZWF0ZU1lbW8oY29uZGl0aW9uVmFsdWUsIHVuZGVmaW5lZCwge1xuICAgIGVxdWFsczogKGEsIGIpID0+ICFhID09PSAhYlxuICB9KTtcbiAgcmV0dXJuIGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IGMgPSBjb25kaXRpb24oKTtcbiAgICBpZiAoYykge1xuICAgICAgY29uc3QgY2hpbGQgPSBwcm9wcy5jaGlsZHJlbjtcbiAgICAgIGNvbnN0IGZuID0gdHlwZW9mIGNoaWxkID09PSBcImZ1bmN0aW9uXCIgJiYgY2hpbGQubGVuZ3RoID4gMDtcbiAgICAgIHJldHVybiBmbiA/IHVudHJhY2soKCkgPT4gY2hpbGQoa2V5ZWQgPyBjIDogKCkgPT4ge1xuICAgICAgICBpZiAoIXVudHJhY2soY29uZGl0aW9uKSkgdGhyb3cgbmFycm93ZWRFcnJvcihcIlNob3dcIik7XG4gICAgICAgIHJldHVybiBjb25kaXRpb25WYWx1ZSgpO1xuICAgICAgfSkpIDogY2hpbGQ7XG4gICAgfVxuICAgIHJldHVybiBwcm9wcy5mYWxsYmFjaztcbiAgfSwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xufVxuZnVuY3Rpb24gU3dpdGNoKHByb3BzKSB7XG4gIGNvbnN0IGNocyA9IGNoaWxkcmVuKCgpID0+IHByb3BzLmNoaWxkcmVuKTtcbiAgY29uc3Qgc3dpdGNoRnVuYyA9IGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IGNoID0gY2hzKCk7XG4gICAgY29uc3QgbXBzID0gQXJyYXkuaXNBcnJheShjaCkgPyBjaCA6IFtjaF07XG4gICAgbGV0IGZ1bmMgPSAoKSA9PiB1bmRlZmluZWQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gaTtcbiAgICAgIGNvbnN0IG1wID0gbXBzW2ldO1xuICAgICAgY29uc3QgcHJldkZ1bmMgPSBmdW5jO1xuICAgICAgY29uc3QgY29uZGl0aW9uVmFsdWUgPSBjcmVhdGVNZW1vKCgpID0+IHByZXZGdW5jKCkgPyB1bmRlZmluZWQgOiBtcC53aGVuLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgICBjb25zdCBjb25kaXRpb24gPSBtcC5rZXllZCA/IGNvbmRpdGlvblZhbHVlIDogY3JlYXRlTWVtbyhjb25kaXRpb25WYWx1ZSwgdW5kZWZpbmVkLCB7XG4gICAgICAgIGVxdWFsczogKGEsIGIpID0+ICFhID09PSAhYlxuICAgICAgfSk7XG4gICAgICBmdW5jID0gKCkgPT4gcHJldkZ1bmMoKSB8fCAoY29uZGl0aW9uKCkgPyBbaW5kZXgsIGNvbmRpdGlvblZhbHVlLCBtcF0gOiB1bmRlZmluZWQpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYztcbiAgfSk7XG4gIHJldHVybiBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICBjb25zdCBzZWwgPSBzd2l0Y2hGdW5jKCkoKTtcbiAgICBpZiAoIXNlbCkgcmV0dXJuIHByb3BzLmZhbGxiYWNrO1xuICAgIGNvbnN0IFtpbmRleCwgY29uZGl0aW9uVmFsdWUsIG1wXSA9IHNlbDtcbiAgICBjb25zdCBjaGlsZCA9IG1wLmNoaWxkcmVuO1xuICAgIGNvbnN0IGZuID0gdHlwZW9mIGNoaWxkID09PSBcImZ1bmN0aW9uXCIgJiYgY2hpbGQubGVuZ3RoID4gMDtcbiAgICByZXR1cm4gZm4gPyB1bnRyYWNrKCgpID0+IGNoaWxkKG1wLmtleWVkID8gY29uZGl0aW9uVmFsdWUoKSA6ICgpID0+IHtcbiAgICAgIGlmICh1bnRyYWNrKHN3aXRjaEZ1bmMpKCk/LlswXSAhPT0gaW5kZXgpIHRocm93IG5hcnJvd2VkRXJyb3IoXCJNYXRjaFwiKTtcbiAgICAgIHJldHVybiBjb25kaXRpb25WYWx1ZSgpO1xuICAgIH0pKSA6IGNoaWxkO1xuICB9LCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG59XG5mdW5jdGlvbiBNYXRjaChwcm9wcykge1xuICByZXR1cm4gcHJvcHM7XG59XG5sZXQgRXJyb3JzO1xuZnVuY3Rpb24gcmVzZXRFcnJvckJvdW5kYXJpZXMoKSB7XG4gIEVycm9ycyAmJiBbLi4uRXJyb3JzXS5mb3JFYWNoKGZuID0+IGZuKCkpO1xufVxuZnVuY3Rpb24gRXJyb3JCb3VuZGFyeShwcm9wcykge1xuICBsZXQgZXJyO1xuICBpZiAoc2hhcmVkQ29uZmlnLmNvbnRleHQgJiYgc2hhcmVkQ29uZmlnLmxvYWQpIGVyciA9IHNoYXJlZENvbmZpZy5sb2FkKHNoYXJlZENvbmZpZy5nZXRDb250ZXh0SWQoKSk7XG4gIGNvbnN0IFtlcnJvcmVkLCBzZXRFcnJvcmVkXSA9IGNyZWF0ZVNpZ25hbChlcnIsIHVuZGVmaW5lZCk7XG4gIEVycm9ycyB8fCAoRXJyb3JzID0gbmV3IFNldCgpKTtcbiAgRXJyb3JzLmFkZChzZXRFcnJvcmVkKTtcbiAgb25DbGVhbnVwKCgpID0+IEVycm9ycy5kZWxldGUoc2V0RXJyb3JlZCkpO1xuICByZXR1cm4gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgbGV0IGU7XG4gICAgaWYgKGUgPSBlcnJvcmVkKCkpIHtcbiAgICAgIGNvbnN0IGYgPSBwcm9wcy5mYWxsYmFjaztcbiAgICAgIHJldHVybiB0eXBlb2YgZiA9PT0gXCJmdW5jdGlvblwiICYmIGYubGVuZ3RoID8gdW50cmFjaygoKSA9PiBmKGUsICgpID0+IHNldEVycm9yZWQoKSkpIDogZjtcbiAgICB9XG4gICAgcmV0dXJuIGNhdGNoRXJyb3IoKCkgPT4gcHJvcHMuY2hpbGRyZW4sIHNldEVycm9yZWQpO1xuICB9LCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG59XG5cbmNvbnN0IHN1c3BlbnNlTGlzdEVxdWFscyA9IChhLCBiKSA9PiBhLnNob3dDb250ZW50ID09PSBiLnNob3dDb250ZW50ICYmIGEuc2hvd0ZhbGxiYWNrID09PSBiLnNob3dGYWxsYmFjaztcbmNvbnN0IFN1c3BlbnNlTGlzdENvbnRleHQgPSAvKiAjX19QVVJFX18gKi9jcmVhdGVDb250ZXh0KCk7XG5mdW5jdGlvbiBTdXNwZW5zZUxpc3QocHJvcHMpIHtcbiAgbGV0IFt3cmFwcGVyLCBzZXRXcmFwcGVyXSA9IGNyZWF0ZVNpZ25hbCgoKSA9PiAoe1xuICAgICAgaW5GYWxsYmFjazogZmFsc2VcbiAgICB9KSksXG4gICAgc2hvdztcbiAgY29uc3QgbGlzdENvbnRleHQgPSB1c2VDb250ZXh0KFN1c3BlbnNlTGlzdENvbnRleHQpO1xuICBjb25zdCBbcmVnaXN0cnksIHNldFJlZ2lzdHJ5XSA9IGNyZWF0ZVNpZ25hbChbXSk7XG4gIGlmIChsaXN0Q29udGV4dCkge1xuICAgIHNob3cgPSBsaXN0Q29udGV4dC5yZWdpc3RlcihjcmVhdGVNZW1vKCgpID0+IHdyYXBwZXIoKSgpLmluRmFsbGJhY2spKTtcbiAgfVxuICBjb25zdCByZXNvbHZlZCA9IGNyZWF0ZU1lbW8ocHJldiA9PiB7XG4gICAgY29uc3QgcmV2ZWFsID0gcHJvcHMucmV2ZWFsT3JkZXIsXG4gICAgICB0YWlsID0gcHJvcHMudGFpbCxcbiAgICAgIHtcbiAgICAgICAgc2hvd0NvbnRlbnQgPSB0cnVlLFxuICAgICAgICBzaG93RmFsbGJhY2sgPSB0cnVlXG4gICAgICB9ID0gc2hvdyA/IHNob3coKSA6IHt9LFxuICAgICAgcmVnID0gcmVnaXN0cnkoKSxcbiAgICAgIHJldmVyc2UgPSByZXZlYWwgPT09IFwiYmFja3dhcmRzXCI7XG4gICAgaWYgKHJldmVhbCA9PT0gXCJ0b2dldGhlclwiKSB7XG4gICAgICBjb25zdCBhbGwgPSByZWcuZXZlcnkoaW5GYWxsYmFjayA9PiAhaW5GYWxsYmFjaygpKTtcbiAgICAgIGNvbnN0IHJlcyA9IHJlZy5tYXAoKCkgPT4gKHtcbiAgICAgICAgc2hvd0NvbnRlbnQ6IGFsbCAmJiBzaG93Q29udGVudCxcbiAgICAgICAgc2hvd0ZhbGxiYWNrXG4gICAgICB9KSk7XG4gICAgICByZXMuaW5GYWxsYmFjayA9ICFhbGw7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBsZXQgc3RvcCA9IGZhbHNlO1xuICAgIGxldCBpbkZhbGxiYWNrID0gcHJldi5pbkZhbGxiYWNrO1xuICAgIGNvbnN0IHJlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSByZWcubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IG4gPSByZXZlcnNlID8gbGVuIC0gaSAtIDEgOiBpLFxuICAgICAgICBzID0gcmVnW25dKCk7XG4gICAgICBpZiAoIXN0b3AgJiYgIXMpIHtcbiAgICAgICAgcmVzW25dID0ge1xuICAgICAgICAgIHNob3dDb250ZW50LFxuICAgICAgICAgIHNob3dGYWxsYmFja1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgbmV4dCA9ICFzdG9wO1xuICAgICAgICBpZiAobmV4dCkgaW5GYWxsYmFjayA9IHRydWU7XG4gICAgICAgIHJlc1tuXSA9IHtcbiAgICAgICAgICBzaG93Q29udGVudDogbmV4dCxcbiAgICAgICAgICBzaG93RmFsbGJhY2s6ICF0YWlsIHx8IG5leHQgJiYgdGFpbCA9PT0gXCJjb2xsYXBzZWRcIiA/IHNob3dGYWxsYmFjayA6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIHN0b3AgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXN0b3ApIGluRmFsbGJhY2sgPSBmYWxzZTtcbiAgICByZXMuaW5GYWxsYmFjayA9IGluRmFsbGJhY2s7XG4gICAgcmV0dXJuIHJlcztcbiAgfSwge1xuICAgIGluRmFsbGJhY2s6IGZhbHNlXG4gIH0pO1xuICBzZXRXcmFwcGVyKCgpID0+IHJlc29sdmVkKTtcbiAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChTdXNwZW5zZUxpc3RDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHJlZ2lzdGVyOiBpbkZhbGxiYWNrID0+IHtcbiAgICAgICAgbGV0IGluZGV4O1xuICAgICAgICBzZXRSZWdpc3RyeShyZWdpc3RyeSA9PiB7XG4gICAgICAgICAgaW5kZXggPSByZWdpc3RyeS5sZW5ndGg7XG4gICAgICAgICAgcmV0dXJuIFsuLi5yZWdpc3RyeSwgaW5GYWxsYmFja107XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY3JlYXRlTWVtbygoKSA9PiByZXNvbHZlZCgpW2luZGV4XSwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgZXF1YWxzOiBzdXNwZW5zZUxpc3RFcXVhbHNcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICByZXR1cm4gcHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIFN1c3BlbnNlKHByb3BzKSB7XG4gIGxldCBjb3VudGVyID0gMCxcbiAgICBzaG93LFxuICAgIGN0eCxcbiAgICBwLFxuICAgIGZsaWNrZXIsXG4gICAgZXJyb3I7XG4gIGNvbnN0IFtpbkZhbGxiYWNrLCBzZXRGYWxsYmFja10gPSBjcmVhdGVTaWduYWwoZmFsc2UpLFxuICAgIFN1c3BlbnNlQ29udGV4dCA9IGdldFN1c3BlbnNlQ29udGV4dCgpLFxuICAgIHN0b3JlID0ge1xuICAgICAgaW5jcmVtZW50OiAoKSA9PiB7XG4gICAgICAgIGlmICgrK2NvdW50ZXIgPT09IDEpIHNldEZhbGxiYWNrKHRydWUpO1xuICAgICAgfSxcbiAgICAgIGRlY3JlbWVudDogKCkgPT4ge1xuICAgICAgICBpZiAoLS1jb3VudGVyID09PSAwKSBzZXRGYWxsYmFjayhmYWxzZSk7XG4gICAgICB9LFxuICAgICAgaW5GYWxsYmFjayxcbiAgICAgIGVmZmVjdHM6IFtdLFxuICAgICAgcmVzb2x2ZWQ6IGZhbHNlXG4gICAgfSxcbiAgICBvd25lciA9IGdldE93bmVyKCk7XG4gIGlmIChzaGFyZWRDb25maWcuY29udGV4dCAmJiBzaGFyZWRDb25maWcubG9hZCkge1xuICAgIGNvbnN0IGtleSA9IHNoYXJlZENvbmZpZy5nZXRDb250ZXh0SWQoKTtcbiAgICBsZXQgcmVmID0gc2hhcmVkQ29uZmlnLmxvYWQoa2V5KTtcbiAgICBpZiAocmVmKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZiAhPT0gXCJvYmplY3RcIiB8fCByZWYucyAhPT0gMSkgcCA9IHJlZjtlbHNlIHNoYXJlZENvbmZpZy5nYXRoZXIoa2V5KTtcbiAgICB9XG4gICAgaWYgKHAgJiYgcCAhPT0gXCIkJGZcIikge1xuICAgICAgY29uc3QgW3MsIHNldF0gPSBjcmVhdGVTaWduYWwodW5kZWZpbmVkLCB7XG4gICAgICAgIGVxdWFsczogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgZmxpY2tlciA9IHM7XG4gICAgICBwLnRoZW4oKCkgPT4ge1xuICAgICAgICBpZiAoc2hhcmVkQ29uZmlnLmRvbmUpIHJldHVybiBzZXQoKTtcbiAgICAgICAgc2hhcmVkQ29uZmlnLmdhdGhlcihrZXkpO1xuICAgICAgICBzZXRIeWRyYXRlQ29udGV4dChjdHgpO1xuICAgICAgICBzZXQoKTtcbiAgICAgICAgc2V0SHlkcmF0ZUNvbnRleHQoKTtcbiAgICAgIH0sIGVyciA9PiB7XG4gICAgICAgIGVycm9yID0gZXJyO1xuICAgICAgICBzZXQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBjb25zdCBsaXN0Q29udGV4dCA9IHVzZUNvbnRleHQoU3VzcGVuc2VMaXN0Q29udGV4dCk7XG4gIGlmIChsaXN0Q29udGV4dCkgc2hvdyA9IGxpc3RDb250ZXh0LnJlZ2lzdGVyKHN0b3JlLmluRmFsbGJhY2spO1xuICBsZXQgZGlzcG9zZTtcbiAgb25DbGVhbnVwKCgpID0+IGRpc3Bvc2UgJiYgZGlzcG9zZSgpKTtcbiAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChTdXNwZW5zZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogc3RvcmUsXG4gICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgICAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuICAgICAgICBjdHggPSBzaGFyZWRDb25maWcuY29udGV4dDtcbiAgICAgICAgaWYgKGZsaWNrZXIpIHtcbiAgICAgICAgICBmbGlja2VyKCk7XG4gICAgICAgICAgcmV0dXJuIGZsaWNrZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eCAmJiBwID09PSBcIiQkZlwiKSBzZXRIeWRyYXRlQ29udGV4dCgpO1xuICAgICAgICBjb25zdCByZW5kZXJlZCA9IGNyZWF0ZU1lbW8oKCkgPT4gcHJvcHMuY2hpbGRyZW4pO1xuICAgICAgICByZXR1cm4gY3JlYXRlTWVtbyhwcmV2ID0+IHtcbiAgICAgICAgICBjb25zdCBpbkZhbGxiYWNrID0gc3RvcmUuaW5GYWxsYmFjaygpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzaG93Q29udGVudCA9IHRydWUsXG4gICAgICAgICAgICAgIHNob3dGYWxsYmFjayA9IHRydWVcbiAgICAgICAgICAgIH0gPSBzaG93ID8gc2hvdygpIDoge307XG4gICAgICAgICAgaWYgKCghaW5GYWxsYmFjayB8fCBwICYmIHAgIT09IFwiJCRmXCIpICYmIHNob3dDb250ZW50KSB7XG4gICAgICAgICAgICBzdG9yZS5yZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgICBkaXNwb3NlICYmIGRpc3Bvc2UoKTtcbiAgICAgICAgICAgIGRpc3Bvc2UgPSBjdHggPSBwID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmVzdW1lRWZmZWN0cyhzdG9yZS5lZmZlY3RzKTtcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJlZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXNob3dGYWxsYmFjaykgcmV0dXJuO1xuICAgICAgICAgIGlmIChkaXNwb3NlKSByZXR1cm4gcHJldjtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUm9vdChkaXNwb3NlciA9PiB7XG4gICAgICAgICAgICBkaXNwb3NlID0gZGlzcG9zZXI7XG4gICAgICAgICAgICBpZiAoY3R4KSB7XG4gICAgICAgICAgICAgIHNldEh5ZHJhdGVDb250ZXh0KHtcbiAgICAgICAgICAgICAgICBpZDogY3R4LmlkICsgXCJGXCIsXG4gICAgICAgICAgICAgICAgY291bnQ6IDBcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGN0eCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcm9wcy5mYWxsYmFjaztcbiAgICAgICAgICB9LCBvd25lcik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cblxuY29uc3QgREVWID0gdW5kZWZpbmVkO1xuXG5leHBvcnQgeyAkREVWQ09NUCwgJFBST1hZLCAkVFJBQ0ssIERFViwgRXJyb3JCb3VuZGFyeSwgRm9yLCBJbmRleCwgTWF0Y2gsIFNob3csIFN1c3BlbnNlLCBTdXNwZW5zZUxpc3QsIFN3aXRjaCwgYmF0Y2gsIGNhbmNlbENhbGxiYWNrLCBjYXRjaEVycm9yLCBjaGlsZHJlbiwgY3JlYXRlQ29tcG9uZW50LCBjcmVhdGVDb21wdXRlZCwgY3JlYXRlQ29udGV4dCwgY3JlYXRlRGVmZXJyZWQsIGNyZWF0ZUVmZmVjdCwgY3JlYXRlTWVtbywgY3JlYXRlUmVhY3Rpb24sIGNyZWF0ZVJlbmRlckVmZmVjdCwgY3JlYXRlUmVzb3VyY2UsIGNyZWF0ZVJvb3QsIGNyZWF0ZVNlbGVjdG9yLCBjcmVhdGVTaWduYWwsIGNyZWF0ZVVuaXF1ZUlkLCBlbmFibGVFeHRlcm5hbFNvdXJjZSwgZW5hYmxlSHlkcmF0aW9uLCBlbmFibGVTY2hlZHVsaW5nLCBlcXVhbEZuLCBmcm9tLCBnZXRMaXN0ZW5lciwgZ2V0T3duZXIsIGluZGV4QXJyYXksIGxhenksIG1hcEFycmF5LCBtZXJnZVByb3BzLCBvYnNlcnZhYmxlLCBvbiwgb25DbGVhbnVwLCBvbkVycm9yLCBvbk1vdW50LCByZXF1ZXN0Q2FsbGJhY2ssIHJlc2V0RXJyb3JCb3VuZGFyaWVzLCBydW5XaXRoT3duZXIsIHNoYXJlZENvbmZpZywgc3BsaXRQcm9wcywgc3RhcnRUcmFuc2l0aW9uLCB1bnRyYWNrLCB1c2VDb250ZXh0LCB1c2VUcmFuc2l0aW9uIH07XG4iLCJpbXBvcnQgeyAkUFJPWFksICRUUkFDSywgZ2V0TGlzdGVuZXIsIGJhdGNoLCBjcmVhdGVTaWduYWwgfSBmcm9tICdzb2xpZC1qcyc7XG5cbmNvbnN0ICRSQVcgPSBTeW1ib2woXCJzdG9yZS1yYXdcIiksXG4gICROT0RFID0gU3ltYm9sKFwic3RvcmUtbm9kZVwiKSxcbiAgJEhBUyA9IFN5bWJvbChcInN0b3JlLWhhc1wiKSxcbiAgJFNFTEYgPSBTeW1ib2woXCJzdG9yZS1zZWxmXCIpO1xuZnVuY3Rpb24gd3JhcCQxKHZhbHVlKSB7XG4gIGxldCBwID0gdmFsdWVbJFBST1hZXTtcbiAgaWYgKCFwKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbHVlLCAkUFJPWFksIHtcbiAgICAgIHZhbHVlOiBwID0gbmV3IFByb3h5KHZhbHVlLCBwcm94eVRyYXBzJDEpXG4gICAgfSk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKSxcbiAgICAgICAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHZhbHVlKTtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3QgcHJvcCA9IGtleXNbaV07XG4gICAgICAgIGlmIChkZXNjW3Byb3BdLmdldCkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgcHJvcCwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogZGVzY1twcm9wXS5lbnVtZXJhYmxlLFxuICAgICAgICAgICAgZ2V0OiBkZXNjW3Byb3BdLmdldC5iaW5kKHApXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHA7XG59XG5mdW5jdGlvbiBpc1dyYXBwYWJsZShvYmopIHtcbiAgbGV0IHByb3RvO1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJiAob2JqWyRQUk9YWV0gfHwgIShwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKSB8fCBwcm90byA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBBcnJheS5pc0FycmF5KG9iaikpO1xufVxuZnVuY3Rpb24gdW53cmFwKGl0ZW0sIHNldCA9IG5ldyBTZXQoKSkge1xuICBsZXQgcmVzdWx0LCB1bndyYXBwZWQsIHYsIHByb3A7XG4gIGlmIChyZXN1bHQgPSBpdGVtICE9IG51bGwgJiYgaXRlbVskUkFXXSkgcmV0dXJuIHJlc3VsdDtcbiAgaWYgKCFpc1dyYXBwYWJsZShpdGVtKSB8fCBzZXQuaGFzKGl0ZW0pKSByZXR1cm4gaXRlbTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcbiAgICBpZiAoT2JqZWN0LmlzRnJvemVuKGl0ZW0pKSBpdGVtID0gaXRlbS5zbGljZSgwKTtlbHNlIHNldC5hZGQoaXRlbSk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBpdGVtLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdiA9IGl0ZW1baV07XG4gICAgICBpZiAoKHVud3JhcHBlZCA9IHVud3JhcCh2LCBzZXQpKSAhPT0gdikgaXRlbVtpXSA9IHVud3JhcHBlZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKE9iamVjdC5pc0Zyb3plbihpdGVtKSkgaXRlbSA9IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pO2Vsc2Ugc2V0LmFkZChpdGVtKTtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoaXRlbSksXG4gICAgICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoaXRlbSk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcHJvcCA9IGtleXNbaV07XG4gICAgICBpZiAoZGVzY1twcm9wXS5nZXQpIGNvbnRpbnVlO1xuICAgICAgdiA9IGl0ZW1bcHJvcF07XG4gICAgICBpZiAoKHVud3JhcHBlZCA9IHVud3JhcCh2LCBzZXQpKSAhPT0gdikgaXRlbVtwcm9wXSA9IHVud3JhcHBlZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGl0ZW07XG59XG5mdW5jdGlvbiBnZXROb2Rlcyh0YXJnZXQsIHN5bWJvbCkge1xuICBsZXQgbm9kZXMgPSB0YXJnZXRbc3ltYm9sXTtcbiAgaWYgKCFub2RlcykgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgc3ltYm9sLCB7XG4gICAgdmFsdWU6IG5vZGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuICB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuZnVuY3Rpb24gZ2V0Tm9kZShub2RlcywgcHJvcGVydHksIHZhbHVlKSB7XG4gIGlmIChub2Rlc1twcm9wZXJ0eV0pIHJldHVybiBub2Rlc1twcm9wZXJ0eV07XG4gIGNvbnN0IFtzLCBzZXRdID0gY3JlYXRlU2lnbmFsKHZhbHVlLCB7XG4gICAgZXF1YWxzOiBmYWxzZSxcbiAgICBpbnRlcm5hbDogdHJ1ZVxuICB9KTtcbiAgcy4kID0gc2V0O1xuICByZXR1cm4gbm9kZXNbcHJvcGVydHldID0gcztcbn1cbmZ1bmN0aW9uIHByb3h5RGVzY3JpcHRvciQxKHRhcmdldCwgcHJvcGVydHkpIHtcbiAgY29uc3QgZGVzYyA9IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHkpO1xuICBpZiAoIWRlc2MgfHwgZGVzYy5nZXQgfHwgIWRlc2MuY29uZmlndXJhYmxlIHx8IHByb3BlcnR5ID09PSAkUFJPWFkgfHwgcHJvcGVydHkgPT09ICROT0RFKSByZXR1cm4gZGVzYztcbiAgZGVsZXRlIGRlc2MudmFsdWU7XG4gIGRlbGV0ZSBkZXNjLndyaXRhYmxlO1xuICBkZXNjLmdldCA9ICgpID0+IHRhcmdldFskUFJPWFldW3Byb3BlcnR5XTtcbiAgcmV0dXJuIGRlc2M7XG59XG5mdW5jdGlvbiB0cmFja1NlbGYodGFyZ2V0KSB7XG4gIGdldExpc3RlbmVyKCkgJiYgZ2V0Tm9kZShnZXROb2Rlcyh0YXJnZXQsICROT0RFKSwgJFNFTEYpKCk7XG59XG5mdW5jdGlvbiBvd25LZXlzKHRhcmdldCkge1xuICB0cmFja1NlbGYodGFyZ2V0KTtcbiAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpO1xufVxuY29uc3QgcHJveHlUcmFwcyQxID0ge1xuICBnZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbiAgICBpZiAocHJvcGVydHkgPT09ICRSQVcpIHJldHVybiB0YXJnZXQ7XG4gICAgaWYgKHByb3BlcnR5ID09PSAkUFJPWFkpIHJldHVybiByZWNlaXZlcjtcbiAgICBpZiAocHJvcGVydHkgPT09ICRUUkFDSykge1xuICAgICAgdHJhY2tTZWxmKHRhcmdldCk7XG4gICAgICByZXR1cm4gcmVjZWl2ZXI7XG4gICAgfVxuICAgIGNvbnN0IG5vZGVzID0gZ2V0Tm9kZXModGFyZ2V0LCAkTk9ERSk7XG4gICAgY29uc3QgdHJhY2tlZCA9IG5vZGVzW3Byb3BlcnR5XTtcbiAgICBsZXQgdmFsdWUgPSB0cmFja2VkID8gdHJhY2tlZCgpIDogdGFyZ2V0W3Byb3BlcnR5XTtcbiAgICBpZiAocHJvcGVydHkgPT09ICROT0RFIHx8IHByb3BlcnR5ID09PSAkSEFTIHx8IHByb3BlcnR5ID09PSBcIl9fcHJvdG9fX1wiKSByZXR1cm4gdmFsdWU7XG4gICAgaWYgKCF0cmFja2VkKSB7XG4gICAgICBjb25zdCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5KTtcbiAgICAgIGlmIChnZXRMaXN0ZW5lcigpICYmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIiB8fCB0YXJnZXQuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSAmJiAhKGRlc2MgJiYgZGVzYy5nZXQpKSB2YWx1ZSA9IGdldE5vZGUobm9kZXMsIHByb3BlcnR5LCB2YWx1ZSkoKTtcbiAgICB9XG4gICAgcmV0dXJuIGlzV3JhcHBhYmxlKHZhbHVlKSA/IHdyYXAkMSh2YWx1ZSkgOiB2YWx1ZTtcbiAgfSxcbiAgaGFzKHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICBpZiAocHJvcGVydHkgPT09ICRSQVcgfHwgcHJvcGVydHkgPT09ICRQUk9YWSB8fCBwcm9wZXJ0eSA9PT0gJFRSQUNLIHx8IHByb3BlcnR5ID09PSAkTk9ERSB8fCBwcm9wZXJ0eSA9PT0gJEhBUyB8fCBwcm9wZXJ0eSA9PT0gXCJfX3Byb3RvX19cIikgcmV0dXJuIHRydWU7XG4gICAgZ2V0TGlzdGVuZXIoKSAmJiBnZXROb2RlKGdldE5vZGVzKHRhcmdldCwgJEhBUyksIHByb3BlcnR5KSgpO1xuICAgIHJldHVybiBwcm9wZXJ0eSBpbiB0YXJnZXQ7XG4gIH0sXG4gIHNldCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZGVsZXRlUHJvcGVydHkoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIG93bktleXM6IG93bktleXMsXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogcHJveHlEZXNjcmlwdG9yJDFcbn07XG5mdW5jdGlvbiBzZXRQcm9wZXJ0eShzdGF0ZSwgcHJvcGVydHksIHZhbHVlLCBkZWxldGluZyA9IGZhbHNlKSB7XG4gIGlmICghZGVsZXRpbmcgJiYgc3RhdGVbcHJvcGVydHldID09PSB2YWx1ZSkgcmV0dXJuO1xuICBjb25zdCBwcmV2ID0gc3RhdGVbcHJvcGVydHldLFxuICAgIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICBkZWxldGUgc3RhdGVbcHJvcGVydHldO1xuICAgIGlmIChzdGF0ZVskSEFTXSAmJiBzdGF0ZVskSEFTXVtwcm9wZXJ0eV0gJiYgcHJldiAhPT0gdW5kZWZpbmVkKSBzdGF0ZVskSEFTXVtwcm9wZXJ0eV0uJCgpO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIGlmIChzdGF0ZVskSEFTXSAmJiBzdGF0ZVskSEFTXVtwcm9wZXJ0eV0gJiYgcHJldiA9PT0gdW5kZWZpbmVkKSBzdGF0ZVskSEFTXVtwcm9wZXJ0eV0uJCgpO1xuICB9XG4gIGxldCBub2RlcyA9IGdldE5vZGVzKHN0YXRlLCAkTk9ERSksXG4gICAgbm9kZTtcbiAgaWYgKG5vZGUgPSBnZXROb2RlKG5vZGVzLCBwcm9wZXJ0eSwgcHJldikpIG5vZGUuJCgoKSA9PiB2YWx1ZSk7XG4gIGlmIChBcnJheS5pc0FycmF5KHN0YXRlKSAmJiBzdGF0ZS5sZW5ndGggIT09IGxlbikge1xuICAgIGZvciAobGV0IGkgPSBzdGF0ZS5sZW5ndGg7IGkgPCBsZW47IGkrKykgKG5vZGUgPSBub2Rlc1tpXSkgJiYgbm9kZS4kKCk7XG4gICAgKG5vZGUgPSBnZXROb2RlKG5vZGVzLCBcImxlbmd0aFwiLCBsZW4pKSAmJiBub2RlLiQoc3RhdGUubGVuZ3RoKTtcbiAgfVxuICAobm9kZSA9IG5vZGVzWyRTRUxGXSkgJiYgbm9kZS4kKCk7XG59XG5mdW5jdGlvbiBtZXJnZVN0b3JlTm9kZShzdGF0ZSwgdmFsdWUpIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICBzZXRQcm9wZXJ0eShzdGF0ZSwga2V5LCB2YWx1ZVtrZXldKTtcbiAgfVxufVxuZnVuY3Rpb24gdXBkYXRlQXJyYXkoY3VycmVudCwgbmV4dCkge1xuICBpZiAodHlwZW9mIG5leHQgPT09IFwiZnVuY3Rpb25cIikgbmV4dCA9IG5leHQoY3VycmVudCk7XG4gIG5leHQgPSB1bndyYXAobmV4dCk7XG4gIGlmIChBcnJheS5pc0FycmF5KG5leHQpKSB7XG4gICAgaWYgKGN1cnJlbnQgPT09IG5leHQpIHJldHVybjtcbiAgICBsZXQgaSA9IDAsXG4gICAgICBsZW4gPSBuZXh0Lmxlbmd0aDtcbiAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG5leHRbaV07XG4gICAgICBpZiAoY3VycmVudFtpXSAhPT0gdmFsdWUpIHNldFByb3BlcnR5KGN1cnJlbnQsIGksIHZhbHVlKTtcbiAgICB9XG4gICAgc2V0UHJvcGVydHkoY3VycmVudCwgXCJsZW5ndGhcIiwgbGVuKTtcbiAgfSBlbHNlIG1lcmdlU3RvcmVOb2RlKGN1cnJlbnQsIG5leHQpO1xufVxuZnVuY3Rpb24gdXBkYXRlUGF0aChjdXJyZW50LCBwYXRoLCB0cmF2ZXJzZWQgPSBbXSkge1xuICBsZXQgcGFydCxcbiAgICBwcmV2ID0gY3VycmVudDtcbiAgaWYgKHBhdGgubGVuZ3RoID4gMSkge1xuICAgIHBhcnQgPSBwYXRoLnNoaWZ0KCk7XG4gICAgY29uc3QgcGFydFR5cGUgPSB0eXBlb2YgcGFydCxcbiAgICAgIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KGN1cnJlbnQpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHBhcnQpKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdXBkYXRlUGF0aChjdXJyZW50LCBbcGFydFtpXV0uY29uY2F0KHBhdGgpLCB0cmF2ZXJzZWQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSAmJiBwYXJ0VHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHBhcnQoY3VycmVudFtpXSwgaSkpIHVwZGF0ZVBhdGgoY3VycmVudCwgW2ldLmNvbmNhdChwYXRoKSwgdHJhdmVyc2VkKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkgJiYgcGFydFR5cGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZnJvbSA9IDAsXG4gICAgICAgIHRvID0gY3VycmVudC5sZW5ndGggLSAxLFxuICAgICAgICBieSA9IDFcbiAgICAgIH0gPSBwYXJ0O1xuICAgICAgZm9yIChsZXQgaSA9IGZyb207IGkgPD0gdG87IGkgKz0gYnkpIHtcbiAgICAgICAgdXBkYXRlUGF0aChjdXJyZW50LCBbaV0uY29uY2F0KHBhdGgpLCB0cmF2ZXJzZWQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAocGF0aC5sZW5ndGggPiAxKSB7XG4gICAgICB1cGRhdGVQYXRoKGN1cnJlbnRbcGFydF0sIHBhdGgsIFtwYXJ0XS5jb25jYXQodHJhdmVyc2VkKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHByZXYgPSBjdXJyZW50W3BhcnRdO1xuICAgIHRyYXZlcnNlZCA9IFtwYXJ0XS5jb25jYXQodHJhdmVyc2VkKTtcbiAgfVxuICBsZXQgdmFsdWUgPSBwYXRoWzBdO1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YWx1ZSA9IHZhbHVlKHByZXYsIHRyYXZlcnNlZCk7XG4gICAgaWYgKHZhbHVlID09PSBwcmV2KSByZXR1cm47XG4gIH1cbiAgaWYgKHBhcnQgPT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA9PSB1bmRlZmluZWQpIHJldHVybjtcbiAgdmFsdWUgPSB1bndyYXAodmFsdWUpO1xuICBpZiAocGFydCA9PT0gdW5kZWZpbmVkIHx8IGlzV3JhcHBhYmxlKHByZXYpICYmIGlzV3JhcHBhYmxlKHZhbHVlKSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBtZXJnZVN0b3JlTm9kZShwcmV2LCB2YWx1ZSk7XG4gIH0gZWxzZSBzZXRQcm9wZXJ0eShjdXJyZW50LCBwYXJ0LCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBjcmVhdGVTdG9yZSguLi5bc3RvcmUsIG9wdGlvbnNdKSB7XG4gIGNvbnN0IHVud3JhcHBlZFN0b3JlID0gdW53cmFwKHN0b3JlIHx8IHt9KTtcbiAgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkodW53cmFwcGVkU3RvcmUpO1xuICBjb25zdCB3cmFwcGVkU3RvcmUgPSB3cmFwJDEodW53cmFwcGVkU3RvcmUpO1xuICBmdW5jdGlvbiBzZXRTdG9yZSguLi5hcmdzKSB7XG4gICAgYmF0Y2goKCkgPT4ge1xuICAgICAgaXNBcnJheSAmJiBhcmdzLmxlbmd0aCA9PT0gMSA/IHVwZGF0ZUFycmF5KHVud3JhcHBlZFN0b3JlLCBhcmdzWzBdKSA6IHVwZGF0ZVBhdGgodW53cmFwcGVkU3RvcmUsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBbd3JhcHBlZFN0b3JlLCBzZXRTdG9yZV07XG59XG5cbmZ1bmN0aW9uIHByb3h5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5KSB7XG4gIGNvbnN0IGRlc2MgPSBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5KTtcbiAgaWYgKCFkZXNjIHx8IGRlc2MuZ2V0IHx8IGRlc2Muc2V0IHx8ICFkZXNjLmNvbmZpZ3VyYWJsZSB8fCBwcm9wZXJ0eSA9PT0gJFBST1hZIHx8IHByb3BlcnR5ID09PSAkTk9ERSkgcmV0dXJuIGRlc2M7XG4gIGRlbGV0ZSBkZXNjLnZhbHVlO1xuICBkZWxldGUgZGVzYy53cml0YWJsZTtcbiAgZGVzYy5nZXQgPSAoKSA9PiB0YXJnZXRbJFBST1hZXVtwcm9wZXJ0eV07XG4gIGRlc2Muc2V0ID0gdiA9PiB0YXJnZXRbJFBST1hZXVtwcm9wZXJ0eV0gPSB2O1xuICByZXR1cm4gZGVzYztcbn1cbmNvbnN0IHByb3h5VHJhcHMgPSB7XG4gIGdldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJFJBVykgcmV0dXJuIHRhcmdldDtcbiAgICBpZiAocHJvcGVydHkgPT09ICRQUk9YWSkgcmV0dXJuIHJlY2VpdmVyO1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJFRSQUNLKSB7XG4gICAgICB0cmFja1NlbGYodGFyZ2V0KTtcbiAgICAgIHJldHVybiByZWNlaXZlcjtcbiAgICB9XG4gICAgY29uc3Qgbm9kZXMgPSBnZXROb2Rlcyh0YXJnZXQsICROT0RFKTtcbiAgICBjb25zdCB0cmFja2VkID0gbm9kZXNbcHJvcGVydHldO1xuICAgIGxldCB2YWx1ZSA9IHRyYWNrZWQgPyB0cmFja2VkKCkgOiB0YXJnZXRbcHJvcGVydHldO1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJE5PREUgfHwgcHJvcGVydHkgPT09ICRIQVMgfHwgcHJvcGVydHkgPT09IFwiX19wcm90b19fXCIpIHJldHVybiB2YWx1ZTtcbiAgICBpZiAoIXRyYWNrZWQpIHtcbiAgICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHkpO1xuICAgICAgY29uc3QgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgaWYgKGdldExpc3RlbmVyKCkgJiYgKCFpc0Z1bmN0aW9uIHx8IHRhcmdldC5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpICYmICEoZGVzYyAmJiBkZXNjLmdldCkpIHZhbHVlID0gZ2V0Tm9kZShub2RlcywgcHJvcGVydHksIHZhbHVlKSgpO2Vsc2UgaWYgKHZhbHVlICE9IG51bGwgJiYgaXNGdW5jdGlvbiAmJiB2YWx1ZSA9PT0gQXJyYXkucHJvdG90eXBlW3Byb3BlcnR5XSkge1xuICAgICAgICByZXR1cm4gKC4uLmFyZ3MpID0+IGJhdGNoKCgpID0+IEFycmF5LnByb3RvdHlwZVtwcm9wZXJ0eV0uYXBwbHkocmVjZWl2ZXIsIGFyZ3MpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlzV3JhcHBhYmxlKHZhbHVlKSA/IHdyYXAodmFsdWUpIDogdmFsdWU7XG4gIH0sXG4gIGhhcyh0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgaWYgKHByb3BlcnR5ID09PSAkUkFXIHx8IHByb3BlcnR5ID09PSAkUFJPWFkgfHwgcHJvcGVydHkgPT09ICRUUkFDSyB8fCBwcm9wZXJ0eSA9PT0gJE5PREUgfHwgcHJvcGVydHkgPT09ICRIQVMgfHwgcHJvcGVydHkgPT09IFwiX19wcm90b19fXCIpIHJldHVybiB0cnVlO1xuICAgIGdldExpc3RlbmVyKCkgJiYgZ2V0Tm9kZShnZXROb2Rlcyh0YXJnZXQsICRIQVMpLCBwcm9wZXJ0eSkoKTtcbiAgICByZXR1cm4gcHJvcGVydHkgaW4gdGFyZ2V0O1xuICB9LFxuICBzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICBiYXRjaCgoKSA9PiBzZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB1bndyYXAodmFsdWUpKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICBiYXRjaCgoKSA9PiBzZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB1bmRlZmluZWQsIHRydWUpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgb3duS2V5czogb3duS2V5cyxcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBwcm94eURlc2NyaXB0b3Jcbn07XG5mdW5jdGlvbiB3cmFwKHZhbHVlKSB7XG4gIGxldCBwID0gdmFsdWVbJFBST1hZXTtcbiAgaWYgKCFwKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbHVlLCAkUFJPWFksIHtcbiAgICAgIHZhbHVlOiBwID0gbmV3IFByb3h5KHZhbHVlLCBwcm94eVRyYXBzKVxuICAgIH0pO1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSksXG4gICAgICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModmFsdWUpO1xuICAgIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKTtcbiAgICBjb25zdCBpc0NsYXNzID0gcHJvdG8gIT09IG51bGwgJiYgdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSAmJiBwcm90byAhPT0gT2JqZWN0LnByb3RvdHlwZTtcbiAgICBpZiAoaXNDbGFzcykge1xuICAgICAgY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhwcm90byk7XG4gICAgICBrZXlzLnB1c2goLi4uT2JqZWN0LmtleXMoZGVzY3JpcHRvcnMpKTtcbiAgICAgIE9iamVjdC5hc3NpZ24oZGVzYywgZGVzY3JpcHRvcnMpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBjb25zdCBwcm9wID0ga2V5c1tpXTtcbiAgICAgIGlmIChpc0NsYXNzICYmIHByb3AgPT09IFwiY29uc3RydWN0b3JcIikgY29udGludWU7XG4gICAgICBpZiAoZGVzY1twcm9wXS5nZXQpIHtcbiAgICAgICAgY29uc3QgZ2V0ID0gZGVzY1twcm9wXS5nZXQuYmluZChwKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbHVlLCBwcm9wLCB7XG4gICAgICAgICAgZ2V0LFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChkZXNjW3Byb3BdLnNldCkge1xuICAgICAgICBjb25zdCBvZyA9IGRlc2NbcHJvcF0uc2V0LFxuICAgICAgICAgIHNldCA9IHYgPT4gYmF0Y2goKCkgPT4gb2cuY2FsbChwLCB2KSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgcHJvcCwge1xuICAgICAgICAgIHNldCxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBwO1xufVxuZnVuY3Rpb24gY3JlYXRlTXV0YWJsZShzdGF0ZSwgb3B0aW9ucykge1xuICBjb25zdCB1bndyYXBwZWRTdG9yZSA9IHVud3JhcChzdGF0ZSB8fCB7fSk7XG4gIGNvbnN0IHdyYXBwZWRTdG9yZSA9IHdyYXAodW53cmFwcGVkU3RvcmUpO1xuICByZXR1cm4gd3JhcHBlZFN0b3JlO1xufVxuZnVuY3Rpb24gbW9kaWZ5TXV0YWJsZShzdGF0ZSwgbW9kaWZpZXIpIHtcbiAgYmF0Y2goKCkgPT4gbW9kaWZpZXIodW53cmFwKHN0YXRlKSkpO1xufVxuXG5jb25zdCAkUk9PVCA9IFN5bWJvbChcInN0b3JlLXJvb3RcIik7XG5mdW5jdGlvbiBhcHBseVN0YXRlKHRhcmdldCwgcGFyZW50LCBwcm9wZXJ0eSwgbWVyZ2UsIGtleSkge1xuICBjb25zdCBwcmV2aW91cyA9IHBhcmVudFtwcm9wZXJ0eV07XG4gIGlmICh0YXJnZXQgPT09IHByZXZpb3VzKSByZXR1cm47XG4gIGNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHRhcmdldCk7XG4gIGlmIChwcm9wZXJ0eSAhPT0gJFJPT1QgJiYgKCFpc1dyYXBwYWJsZSh0YXJnZXQpIHx8ICFpc1dyYXBwYWJsZShwcmV2aW91cykgfHwgaXNBcnJheSAhPT0gQXJyYXkuaXNBcnJheShwcmV2aW91cykgfHwga2V5ICYmIHRhcmdldFtrZXldICE9PSBwcmV2aW91c1trZXldKSkge1xuICAgIHNldFByb3BlcnR5KHBhcmVudCwgcHJvcGVydHksIHRhcmdldCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpc0FycmF5KSB7XG4gICAgaWYgKHRhcmdldC5sZW5ndGggJiYgcHJldmlvdXMubGVuZ3RoICYmICghbWVyZ2UgfHwga2V5ICYmIHRhcmdldFswXSAmJiB0YXJnZXRbMF1ba2V5XSAhPSBudWxsKSkge1xuICAgICAgbGV0IGksIGosIHN0YXJ0LCBlbmQsIG5ld0VuZCwgaXRlbSwgbmV3SW5kaWNlc05leHQsIGtleVZhbDtcbiAgICAgIGZvciAoc3RhcnQgPSAwLCBlbmQgPSBNYXRoLm1pbihwcmV2aW91cy5sZW5ndGgsIHRhcmdldC5sZW5ndGgpOyBzdGFydCA8IGVuZCAmJiAocHJldmlvdXNbc3RhcnRdID09PSB0YXJnZXRbc3RhcnRdIHx8IGtleSAmJiBwcmV2aW91c1tzdGFydF0gJiYgdGFyZ2V0W3N0YXJ0XSAmJiBwcmV2aW91c1tzdGFydF1ba2V5XSA9PT0gdGFyZ2V0W3N0YXJ0XVtrZXldKTsgc3RhcnQrKykge1xuICAgICAgICBhcHBseVN0YXRlKHRhcmdldFtzdGFydF0sIHByZXZpb3VzLCBzdGFydCwgbWVyZ2UsIGtleSk7XG4gICAgICB9XG4gICAgICBjb25zdCB0ZW1wID0gbmV3IEFycmF5KHRhcmdldC5sZW5ndGgpLFxuICAgICAgICBuZXdJbmRpY2VzID0gbmV3IE1hcCgpO1xuICAgICAgZm9yIChlbmQgPSBwcmV2aW91cy5sZW5ndGggLSAxLCBuZXdFbmQgPSB0YXJnZXQubGVuZ3RoIC0gMTsgZW5kID49IHN0YXJ0ICYmIG5ld0VuZCA+PSBzdGFydCAmJiAocHJldmlvdXNbZW5kXSA9PT0gdGFyZ2V0W25ld0VuZF0gfHwga2V5ICYmIHByZXZpb3VzW2VuZF0gJiYgdGFyZ2V0W25ld0VuZF0gJiYgcHJldmlvdXNbZW5kXVtrZXldID09PSB0YXJnZXRbbmV3RW5kXVtrZXldKTsgZW5kLS0sIG5ld0VuZC0tKSB7XG4gICAgICAgIHRlbXBbbmV3RW5kXSA9IHByZXZpb3VzW2VuZF07XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgPiBuZXdFbmQgfHwgc3RhcnQgPiBlbmQpIHtcbiAgICAgICAgZm9yIChqID0gc3RhcnQ7IGogPD0gbmV3RW5kOyBqKyspIHNldFByb3BlcnR5KHByZXZpb3VzLCBqLCB0YXJnZXRbal0pO1xuICAgICAgICBmb3IgKDsgaiA8IHRhcmdldC5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNldFByb3BlcnR5KHByZXZpb3VzLCBqLCB0ZW1wW2pdKTtcbiAgICAgICAgICBhcHBseVN0YXRlKHRhcmdldFtqXSwgcHJldmlvdXMsIGosIG1lcmdlLCBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmV2aW91cy5sZW5ndGggPiB0YXJnZXQubGVuZ3RoKSBzZXRQcm9wZXJ0eShwcmV2aW91cywgXCJsZW5ndGhcIiwgdGFyZ2V0Lmxlbmd0aCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5ld0luZGljZXNOZXh0ID0gbmV3IEFycmF5KG5ld0VuZCArIDEpO1xuICAgICAgZm9yIChqID0gbmV3RW5kOyBqID49IHN0YXJ0OyBqLS0pIHtcbiAgICAgICAgaXRlbSA9IHRhcmdldFtqXTtcbiAgICAgICAga2V5VmFsID0ga2V5ICYmIGl0ZW0gPyBpdGVtW2tleV0gOiBpdGVtO1xuICAgICAgICBpID0gbmV3SW5kaWNlcy5nZXQoa2V5VmFsKTtcbiAgICAgICAgbmV3SW5kaWNlc05leHRbal0gPSBpID09PSB1bmRlZmluZWQgPyAtMSA6IGk7XG4gICAgICAgIG5ld0luZGljZXMuc2V0KGtleVZhbCwgaik7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSBzdGFydDsgaSA8PSBlbmQ7IGkrKykge1xuICAgICAgICBpdGVtID0gcHJldmlvdXNbaV07XG4gICAgICAgIGtleVZhbCA9IGtleSAmJiBpdGVtID8gaXRlbVtrZXldIDogaXRlbTtcbiAgICAgICAgaiA9IG5ld0luZGljZXMuZ2V0KGtleVZhbCk7XG4gICAgICAgIGlmIChqICE9PSB1bmRlZmluZWQgJiYgaiAhPT0gLTEpIHtcbiAgICAgICAgICB0ZW1wW2pdID0gcHJldmlvdXNbaV07XG4gICAgICAgICAgaiA9IG5ld0luZGljZXNOZXh0W2pdO1xuICAgICAgICAgIG5ld0luZGljZXMuc2V0KGtleVZhbCwgaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAoaiA9IHN0YXJ0OyBqIDwgdGFyZ2V0Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChqIGluIHRlbXApIHtcbiAgICAgICAgICBzZXRQcm9wZXJ0eShwcmV2aW91cywgaiwgdGVtcFtqXSk7XG4gICAgICAgICAgYXBwbHlTdGF0ZSh0YXJnZXRbal0sIHByZXZpb3VzLCBqLCBtZXJnZSwga2V5KTtcbiAgICAgICAgfSBlbHNlIHNldFByb3BlcnR5KHByZXZpb3VzLCBqLCB0YXJnZXRbal0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGFyZ2V0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGFwcGx5U3RhdGUodGFyZ2V0W2ldLCBwcmV2aW91cywgaSwgbWVyZ2UsIGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcmV2aW91cy5sZW5ndGggPiB0YXJnZXQubGVuZ3RoKSBzZXRQcm9wZXJ0eShwcmV2aW91cywgXCJsZW5ndGhcIiwgdGFyZ2V0Lmxlbmd0aCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHRhcmdldEtleXMgPSBPYmplY3Qua2V5cyh0YXJnZXQpO1xuICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGFyZ2V0S2V5cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGFwcGx5U3RhdGUodGFyZ2V0W3RhcmdldEtleXNbaV1dLCBwcmV2aW91cywgdGFyZ2V0S2V5c1tpXSwgbWVyZ2UsIGtleSk7XG4gIH1cbiAgY29uc3QgcHJldmlvdXNLZXlzID0gT2JqZWN0LmtleXMocHJldmlvdXMpO1xuICBmb3IgKGxldCBpID0gMCwgbGVuID0gcHJldmlvdXNLZXlzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKHRhcmdldFtwcmV2aW91c0tleXNbaV1dID09PSB1bmRlZmluZWQpIHNldFByb3BlcnR5KHByZXZpb3VzLCBwcmV2aW91c0tleXNbaV0sIHVuZGVmaW5lZCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY29uY2lsZSh2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICAgIG1lcmdlLFxuICAgICAga2V5ID0gXCJpZFwiXG4gICAgfSA9IG9wdGlvbnMsXG4gICAgdiA9IHVud3JhcCh2YWx1ZSk7XG4gIHJldHVybiBzdGF0ZSA9PiB7XG4gICAgaWYgKCFpc1dyYXBwYWJsZShzdGF0ZSkgfHwgIWlzV3JhcHBhYmxlKHYpKSByZXR1cm4gdjtcbiAgICBjb25zdCByZXMgPSBhcHBseVN0YXRlKHYsIHtcbiAgICAgIFskUk9PVF06IHN0YXRlXG4gICAgfSwgJFJPT1QsIG1lcmdlLCBrZXkpO1xuICAgIHJldHVybiByZXMgPT09IHVuZGVmaW5lZCA/IHN0YXRlIDogcmVzO1xuICB9O1xufVxuY29uc3QgcHJvZHVjZXJzID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHNldHRlclRyYXBzID0ge1xuICBnZXQodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJFJBVykgcmV0dXJuIHRhcmdldDtcbiAgICBjb25zdCB2YWx1ZSA9IHRhcmdldFtwcm9wZXJ0eV07XG4gICAgbGV0IHByb3h5O1xuICAgIHJldHVybiBpc1dyYXBwYWJsZSh2YWx1ZSkgPyBwcm9kdWNlcnMuZ2V0KHZhbHVlKSB8fCAocHJvZHVjZXJzLnNldCh2YWx1ZSwgcHJveHkgPSBuZXcgUHJveHkodmFsdWUsIHNldHRlclRyYXBzKSksIHByb3h5KSA6IHZhbHVlO1xuICB9LFxuICBzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICBzZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB1bndyYXAodmFsdWUpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgIHNldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5mdW5jdGlvbiBwcm9kdWNlKGZuKSB7XG4gIHJldHVybiBzdGF0ZSA9PiB7XG4gICAgaWYgKGlzV3JhcHBhYmxlKHN0YXRlKSkge1xuICAgICAgbGV0IHByb3h5O1xuICAgICAgaWYgKCEocHJveHkgPSBwcm9kdWNlcnMuZ2V0KHN0YXRlKSkpIHtcbiAgICAgICAgcHJvZHVjZXJzLnNldChzdGF0ZSwgcHJveHkgPSBuZXcgUHJveHkoc3RhdGUsIHNldHRlclRyYXBzKSk7XG4gICAgICB9XG4gICAgICBmbihwcm94eSk7XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZTtcbiAgfTtcbn1cblxuY29uc3QgREVWID0gdW5kZWZpbmVkO1xuXG5leHBvcnQgeyAkUkFXLCBERVYsIGNyZWF0ZU11dGFibGUsIGNyZWF0ZVN0b3JlLCBtb2RpZnlNdXRhYmxlLCBwcm9kdWNlLCByZWNvbmNpbGUsIHVud3JhcCB9O1xuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG5cblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1Jcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UsIFN1cHByZXNzZWRFcnJvciwgU3ltYm9sLCBJdGVyYXRvciAqL1xuXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcbiAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcbiAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn1cblxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xuICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xuICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHQ7XG4gIH1cbiAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgIHRbcF0gPSBzW3BdO1xuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgIH1cbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXNEZWNvcmF0ZShjdG9yLCBkZXNjcmlwdG9ySW4sIGRlY29yYXRvcnMsIGNvbnRleHRJbiwgaW5pdGlhbGl6ZXJzLCBleHRyYUluaXRpYWxpemVycykge1xuICBmdW5jdGlvbiBhY2NlcHQoZikgeyBpZiAoZiAhPT0gdm9pZCAwICYmIHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiBleHBlY3RlZFwiKTsgcmV0dXJuIGY7IH1cbiAgdmFyIGtpbmQgPSBjb250ZXh0SW4ua2luZCwga2V5ID0ga2luZCA9PT0gXCJnZXR0ZXJcIiA/IFwiZ2V0XCIgOiBraW5kID09PSBcInNldHRlclwiID8gXCJzZXRcIiA6IFwidmFsdWVcIjtcbiAgdmFyIHRhcmdldCA9ICFkZXNjcmlwdG9ySW4gJiYgY3RvciA/IGNvbnRleHRJbltcInN0YXRpY1wiXSA/IGN0b3IgOiBjdG9yLnByb3RvdHlwZSA6IG51bGw7XG4gIHZhciBkZXNjcmlwdG9yID0gZGVzY3JpcHRvckluIHx8ICh0YXJnZXQgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgY29udGV4dEluLm5hbWUpIDoge30pO1xuICB2YXIgXywgZG9uZSA9IGZhbHNlO1xuICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGNvbnRleHQgPSB7fTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluKSBjb250ZXh0W3BdID0gcCA9PT0gXCJhY2Nlc3NcIiA/IHt9IDogY29udGV4dEluW3BdO1xuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4uYWNjZXNzKSBjb250ZXh0LmFjY2Vzc1twXSA9IGNvbnRleHRJbi5hY2Nlc3NbcF07XG4gICAgICBjb250ZXh0LmFkZEluaXRpYWxpemVyID0gZnVuY3Rpb24gKGYpIHsgaWYgKGRvbmUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIGluaXRpYWxpemVycyBhZnRlciBkZWNvcmF0aW9uIGhhcyBjb21wbGV0ZWRcIik7IGV4dHJhSW5pdGlhbGl6ZXJzLnB1c2goYWNjZXB0KGYgfHwgbnVsbCkpOyB9O1xuICAgICAgdmFyIHJlc3VsdCA9ICgwLCBkZWNvcmF0b3JzW2ldKShraW5kID09PSBcImFjY2Vzc29yXCIgPyB7IGdldDogZGVzY3JpcHRvci5nZXQsIHNldDogZGVzY3JpcHRvci5zZXQgfSA6IGRlc2NyaXB0b3Jba2V5XSwgY29udGV4dCk7XG4gICAgICBpZiAoa2luZCA9PT0gXCJhY2Nlc3NvclwiKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSBjb250aW51ZTtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsIHx8IHR5cGVvZiByZXN1bHQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmdldCkpIGRlc2NyaXB0b3IuZ2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuc2V0KSkgZGVzY3JpcHRvci5zZXQgPSBfO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5pbml0KSkgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChfID0gYWNjZXB0KHJlc3VsdCkpIHtcbiAgICAgICAgICBpZiAoa2luZCA9PT0gXCJmaWVsZFwiKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgICAgICBlbHNlIGRlc2NyaXB0b3Jba2V5XSA9IF87XG4gICAgICB9XG4gIH1cbiAgaWYgKHRhcmdldCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgY29udGV4dEluLm5hbWUsIGRlc2NyaXB0b3IpO1xuICBkb25lID0gdHJ1ZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3J1bkluaXRpYWxpemVycyh0aGlzQXJnLCBpbml0aWFsaXplcnMsIHZhbHVlKSB7XG4gIHZhciB1c2VWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGluaXRpYWxpemVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWUgPSB1c2VWYWx1ZSA/IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcsIHZhbHVlKSA6IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcpO1xuICB9XG4gIHJldHVybiB1c2VWYWx1ZSA/IHZhbHVlIDogdm9pZCAwO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fcHJvcEtleSh4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzeW1ib2xcIiA/IHggOiBcIlwiLmNvbmNhdCh4KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NldEZ1bmN0aW9uTmFtZShmLCBuYW1lLCBwcmVmaXgpIHtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN5bWJvbFwiKSBuYW1lID0gbmFtZS5kZXNjcmlwdGlvbiA/IFwiW1wiLmNvbmNhdChuYW1lLmRlc2NyaXB0aW9uLCBcIl1cIikgOiBcIlwiO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsIFwibmFtZVwiLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHByZWZpeCA/IFwiXCIuY29uY2F0KHByZWZpeCwgXCIgXCIsIG5hbWUpIDogbmFtZSB9KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XG4gIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGcgPSBPYmplY3QuY3JlYXRlKCh0eXBlb2YgSXRlcmF0b3IgPT09IFwiZnVuY3Rpb25cIiA/IEl0ZXJhdG9yIDogT2JqZWN0KS5wcm90b3R5cGUpO1xuICByZXR1cm4gZy5uZXh0ID0gdmVyYigwKSwgZ1tcInRocm93XCJdID0gdmVyYigxKSwgZ1tcInJldHVyblwiXSA9IHZlcmIoMiksIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgfVxufVxuXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgb1trMl0gPSBtW2tdO1xufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xuICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XG4gIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICB9XG4gIH07XG4gIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XG4gIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgaWYgKCFtKSByZXR1cm4gbztcbiAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gIHRyeSB7XG4gICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgfVxuICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgfVxuICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gIH1cbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcbiAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XG4gIHJldHVybiBhcjtcbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XG4gIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXG4gICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcbiAgICAgICAgICByW2tdID0gYVtqXTtcbiAgcmV0dXJuIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XG4gIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcbiAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xuICByZXR1cm4gaSA9IE9iamVjdC5jcmVhdGUoKHR5cGVvZiBBc3luY0l0ZXJhdG9yID09PSBcImZ1bmN0aW9uXCIgPyBBc3luY0l0ZXJhdG9yIDogT2JqZWN0KS5wcm90b3R5cGUpLCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIsIGF3YWl0UmV0dXJuKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xuICBmdW5jdGlvbiBhd2FpdFJldHVybihmKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZiwgcmVqZWN0KTsgfTsgfVxuICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaWYgKGdbbl0pIHsgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgaWYgKGYpIGlbbl0gPSBmKGlbbl0pOyB9IH1cbiAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxuICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cbiAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XG4gIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xuICB2YXIgaSwgcDtcbiAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogZmFsc2UgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xuICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cbiAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcbiAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cbiAgcmV0dXJuIGNvb2tlZDtcbn07XG5cbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gIG9bXCJkZWZhdWx0XCJdID0gdjtcbn07XG5cbnZhciBvd25LZXlzID0gZnVuY3Rpb24obykge1xuICBvd25LZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gKG8pIHtcbiAgICB2YXIgYXIgPSBbXTtcbiAgICBmb3IgKHZhciBrIGluIG8pIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgaykpIGFyW2FyLmxlbmd0aF0gPSBrO1xuICAgIHJldHVybiBhcjtcbiAgfTtcbiAgcmV0dXJuIG93bktleXMobyk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xuICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayA9IG93bktleXMobW9kKSwgaSA9IDA7IGkgPCBrLmxlbmd0aDsgaSsrKSBpZiAoa1tpXSAhPT0gXCJkZWZhdWx0XCIpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwga1tpXSk7XG4gIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XG4gIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRJbihzdGF0ZSwgcmVjZWl2ZXIpIHtcbiAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XG4gIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FkZERpc3Bvc2FibGVSZXNvdXJjZShlbnYsIHZhbHVlLCBhc3luYykge1xuICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHZvaWQgMCkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWQuXCIpO1xuICAgIHZhciBkaXNwb3NlLCBpbm5lcjtcbiAgICBpZiAoYXN5bmMpIHtcbiAgICAgIGlmICghU3ltYm9sLmFzeW5jRGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0Rpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5hc3luY0Rpc3Bvc2VdO1xuICAgIH1cbiAgICBpZiAoZGlzcG9zZSA9PT0gdm9pZCAwKSB7XG4gICAgICBpZiAoIVN5bWJvbC5kaXNwb3NlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmRpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5kaXNwb3NlXTtcbiAgICAgIGlmIChhc3luYykgaW5uZXIgPSBkaXNwb3NlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRpc3Bvc2UgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBub3QgZGlzcG9zYWJsZS5cIik7XG4gICAgaWYgKGlubmVyKSBkaXNwb3NlID0gZnVuY3Rpb24oKSB7IHRyeSB7IGlubmVyLmNhbGwodGhpcyk7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpOyB9IH07XG4gICAgZW52LnN0YWNrLnB1c2goeyB2YWx1ZTogdmFsdWUsIGRpc3Bvc2U6IGRpc3Bvc2UsIGFzeW5jOiBhc3luYyB9KTtcbiAgfVxuICBlbHNlIGlmIChhc3luYykge1xuICAgIGVudi5zdGFjay5wdXNoKHsgYXN5bmM6IHRydWUgfSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgX1N1cHByZXNzZWRFcnJvciA9IHR5cGVvZiBTdXBwcmVzc2VkRXJyb3IgPT09IFwiZnVuY3Rpb25cIiA/IFN1cHByZXNzZWRFcnJvciA6IGZ1bmN0aW9uIChlcnJvciwgc3VwcHJlc3NlZCwgbWVzc2FnZSkge1xuICB2YXIgZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGUubmFtZSA9IFwiU3VwcHJlc3NlZEVycm9yXCIsIGUuZXJyb3IgPSBlcnJvciwgZS5zdXBwcmVzc2VkID0gc3VwcHJlc3NlZCwgZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2Rpc3Bvc2VSZXNvdXJjZXMoZW52KSB7XG4gIGZ1bmN0aW9uIGZhaWwoZSkge1xuICAgIGVudi5lcnJvciA9IGVudi5oYXNFcnJvciA/IG5ldyBfU3VwcHJlc3NlZEVycm9yKGUsIGVudi5lcnJvciwgXCJBbiBlcnJvciB3YXMgc3VwcHJlc3NlZCBkdXJpbmcgZGlzcG9zYWwuXCIpIDogZTtcbiAgICBlbnYuaGFzRXJyb3IgPSB0cnVlO1xuICB9XG4gIHZhciByLCBzID0gMDtcbiAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICB3aGlsZSAociA9IGVudi5zdGFjay5wb3AoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFyLmFzeW5jICYmIHMgPT09IDEpIHJldHVybiBzID0gMCwgZW52LnN0YWNrLnB1c2gociksIFByb21pc2UucmVzb2x2ZSgpLnRoZW4obmV4dCk7XG4gICAgICAgIGlmIChyLmRpc3Bvc2UpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gci5kaXNwb3NlLmNhbGwoci52YWx1ZSk7XG4gICAgICAgICAgaWYgKHIuYXN5bmMpIHJldHVybiBzIHw9IDIsIFByb21pc2UucmVzb2x2ZShyZXN1bHQpLnRoZW4obmV4dCwgZnVuY3Rpb24oZSkgeyBmYWlsKGUpOyByZXR1cm4gbmV4dCgpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHMgfD0gMTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGZhaWwoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzID09PSAxKSByZXR1cm4gZW52Lmhhc0Vycm9yID8gUHJvbWlzZS5yZWplY3QoZW52LmVycm9yKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIGlmIChlbnYuaGFzRXJyb3IpIHRocm93IGVudi5lcnJvcjtcbiAgfVxuICByZXR1cm4gbmV4dCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZXdyaXRlUmVsYXRpdmVJbXBvcnRFeHRlbnNpb24ocGF0aCwgcHJlc2VydmVKc3gpIHtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSBcInN0cmluZ1wiICYmIC9eXFwuXFwuP1xcLy8udGVzdChwYXRoKSkge1xuICAgICAgcmV0dXJuIHBhdGgucmVwbGFjZSgvXFwuKHRzeCkkfCgoPzpcXC5kKT8pKCg/OlxcLlteLi9dKz8pPylcXC4oW2NtXT8pdHMkL2ksIGZ1bmN0aW9uIChtLCB0c3gsIGQsIGV4dCwgY20pIHtcbiAgICAgICAgICByZXR1cm4gdHN4ID8gcHJlc2VydmVKc3ggPyBcIi5qc3hcIiA6IFwiLmpzXCIgOiBkICYmICghZXh0IHx8ICFjbSkgPyBtIDogKGQgKyBleHQgKyBcIi5cIiArIGNtLnRvTG93ZXJDYXNlKCkgKyBcImpzXCIpO1xuICAgICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBhdGg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgX19leHRlbmRzLFxuICBfX2Fzc2lnbixcbiAgX19yZXN0LFxuICBfX2RlY29yYXRlLFxuICBfX3BhcmFtLFxuICBfX2VzRGVjb3JhdGUsXG4gIF9fcnVuSW5pdGlhbGl6ZXJzLFxuICBfX3Byb3BLZXksXG4gIF9fc2V0RnVuY3Rpb25OYW1lLFxuICBfX21ldGFkYXRhLFxuICBfX2F3YWl0ZXIsXG4gIF9fZ2VuZXJhdG9yLFxuICBfX2NyZWF0ZUJpbmRpbmcsXG4gIF9fZXhwb3J0U3RhcixcbiAgX192YWx1ZXMsXG4gIF9fcmVhZCxcbiAgX19zcHJlYWQsXG4gIF9fc3ByZWFkQXJyYXlzLFxuICBfX3NwcmVhZEFycmF5LFxuICBfX2F3YWl0LFxuICBfX2FzeW5jR2VuZXJhdG9yLFxuICBfX2FzeW5jRGVsZWdhdG9yLFxuICBfX2FzeW5jVmFsdWVzLFxuICBfX21ha2VUZW1wbGF0ZU9iamVjdCxcbiAgX19pbXBvcnRTdGFyLFxuICBfX2ltcG9ydERlZmF1bHQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRHZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRTZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRJbixcbiAgX19hZGREaXNwb3NhYmxlUmVzb3VyY2UsXG4gIF9fZGlzcG9zZVJlc291cmNlcyxcbiAgX19yZXdyaXRlUmVsYXRpdmVJbXBvcnRFeHRlbnNpb24sXG59O1xuIiwiZXhwb3J0IGNvbnN0IENPTU1PTl9NSU1FX1RZUEVTID0gbmV3IE1hcChbXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2d1enpsZS9wc3I3L2Jsb2IvMmQ5MjYwNzk5ZTcxM2YxYzQ3NWQzYzVmZGMzZDY1NjFmZjc0NDFiMi9zcmMvTWltZVR5cGUucGhwXG4gICAgWycxa20nLCAnYXBwbGljYXRpb24vdm5kLjEwMDBtaW5kcy5kZWNpc2lvbi1tb2RlbCt4bWwnXSxcbiAgICBbJzNkbWwnLCAndGV4dC92bmQuaW4zZC4zZG1sJ10sXG4gICAgWyczZHMnLCAnaW1hZ2UveC0zZHMnXSxcbiAgICBbJzNnMicsICd2aWRlby8zZ3BwMiddLFxuICAgIFsnM2dwJywgJ3ZpZGVvLzNncCddLFxuICAgIFsnM2dwcCcsICd2aWRlby8zZ3BwJ10sXG4gICAgWyczbWYnLCAnbW9kZWwvM21mJ10sXG4gICAgWyc3eicsICdhcHBsaWNhdGlvbi94LTd6LWNvbXByZXNzZWQnXSxcbiAgICBbJzd6aXAnLCAnYXBwbGljYXRpb24veC03ei1jb21wcmVzc2VkJ10sXG4gICAgWycxMjMnLCAnYXBwbGljYXRpb24vdm5kLmxvdHVzLTEtMi0zJ10sXG4gICAgWydhYWInLCAnYXBwbGljYXRpb24veC1hdXRob3J3YXJlLWJpbiddLFxuICAgIFsnYWFjJywgJ2F1ZGlvL3gtYWNjJ10sXG4gICAgWydhYW0nLCAnYXBwbGljYXRpb24veC1hdXRob3J3YXJlLW1hcCddLFxuICAgIFsnYWFzJywgJ2FwcGxpY2F0aW9uL3gtYXV0aG9yd2FyZS1zZWcnXSxcbiAgICBbJ2FidycsICdhcHBsaWNhdGlvbi94LWFiaXdvcmQnXSxcbiAgICBbJ2FjJywgJ2FwcGxpY2F0aW9uL3ZuZC5ub2tpYS5uLWdhZ2UuYWMreG1sJ10sXG4gICAgWydhYzMnLCAnYXVkaW8vYWMzJ10sXG4gICAgWydhY2MnLCAnYXBwbGljYXRpb24vdm5kLmFtZXJpY2FuZHluYW1pY3MuYWNjJ10sXG4gICAgWydhY2UnLCAnYXBwbGljYXRpb24veC1hY2UtY29tcHJlc3NlZCddLFxuICAgIFsnYWN1JywgJ2FwcGxpY2F0aW9uL3ZuZC5hY3Vjb2JvbCddLFxuICAgIFsnYWN1dGMnLCAnYXBwbGljYXRpb24vdm5kLmFjdWNvcnAnXSxcbiAgICBbJ2FkcCcsICdhdWRpby9hZHBjbSddLFxuICAgIFsnYWVwJywgJ2FwcGxpY2F0aW9uL3ZuZC5hdWRpb2dyYXBoJ10sXG4gICAgWydhZm0nLCAnYXBwbGljYXRpb24veC1mb250LXR5cGUxJ10sXG4gICAgWydhZnAnLCAnYXBwbGljYXRpb24vdm5kLmlibS5tb2RjYXAnXSxcbiAgICBbJ2FoZWFkJywgJ2FwcGxpY2F0aW9uL3ZuZC5haGVhZC5zcGFjZSddLFxuICAgIFsnYWknLCAnYXBwbGljYXRpb24vcGRmJ10sXG4gICAgWydhaWYnLCAnYXVkaW8veC1haWZmJ10sXG4gICAgWydhaWZjJywgJ2F1ZGlvL3gtYWlmZiddLFxuICAgIFsnYWlmZicsICdhdWRpby94LWFpZmYnXSxcbiAgICBbJ2FpcicsICdhcHBsaWNhdGlvbi92bmQuYWRvYmUuYWlyLWFwcGxpY2F0aW9uLWluc3RhbGxlci1wYWNrYWdlK3ppcCddLFxuICAgIFsnYWl0JywgJ2FwcGxpY2F0aW9uL3ZuZC5kdmIuYWl0J10sXG4gICAgWydhbWknLCAnYXBwbGljYXRpb24vdm5kLmFtaWdhLmFtaSddLFxuICAgIFsnYW1yJywgJ2F1ZGlvL2FtciddLFxuICAgIFsnYXBrJywgJ2FwcGxpY2F0aW9uL3ZuZC5hbmRyb2lkLnBhY2thZ2UtYXJjaGl2ZSddLFxuICAgIFsnYXBuZycsICdpbWFnZS9hcG5nJ10sXG4gICAgWydhcHBjYWNoZScsICd0ZXh0L2NhY2hlLW1hbmlmZXN0J10sXG4gICAgWydhcHBsaWNhdGlvbicsICdhcHBsaWNhdGlvbi94LW1zLWFwcGxpY2F0aW9uJ10sXG4gICAgWydhcHInLCAnYXBwbGljYXRpb24vdm5kLmxvdHVzLWFwcHJvYWNoJ10sXG4gICAgWydhcmMnLCAnYXBwbGljYXRpb24veC1mcmVlYXJjJ10sXG4gICAgWydhcmonLCAnYXBwbGljYXRpb24veC1hcmonXSxcbiAgICBbJ2FzYycsICdhcHBsaWNhdGlvbi9wZ3Atc2lnbmF0dXJlJ10sXG4gICAgWydhc2YnLCAndmlkZW8veC1tcy1hc2YnXSxcbiAgICBbJ2FzbScsICd0ZXh0L3gtYXNtJ10sXG4gICAgWydhc28nLCAnYXBwbGljYXRpb24vdm5kLmFjY3BhYy5zaW1wbHkuYXNvJ10sXG4gICAgWydhc3gnLCAndmlkZW8veC1tcy1hc2YnXSxcbiAgICBbJ2F0YycsICdhcHBsaWNhdGlvbi92bmQuYWN1Y29ycCddLFxuICAgIFsnYXRvbScsICdhcHBsaWNhdGlvbi9hdG9tK3htbCddLFxuICAgIFsnYXRvbWNhdCcsICdhcHBsaWNhdGlvbi9hdG9tY2F0K3htbCddLFxuICAgIFsnYXRvbWRlbGV0ZWQnLCAnYXBwbGljYXRpb24vYXRvbWRlbGV0ZWQreG1sJ10sXG4gICAgWydhdG9tc3ZjJywgJ2FwcGxpY2F0aW9uL2F0b21zdmMreG1sJ10sXG4gICAgWydhdHgnLCAnYXBwbGljYXRpb24vdm5kLmFudGl4LmdhbWUtY29tcG9uZW50J10sXG4gICAgWydhdScsICdhdWRpby94LWF1J10sXG4gICAgWydhdmknLCAndmlkZW8veC1tc3ZpZGVvJ10sXG4gICAgWydhdmlmJywgJ2ltYWdlL2F2aWYnXSxcbiAgICBbJ2F3JywgJ2FwcGxpY2F0aW9uL2FwcGxpeHdhcmUnXSxcbiAgICBbJ2F6ZicsICdhcHBsaWNhdGlvbi92bmQuYWlyemlwLmZpbGVzZWN1cmUuYXpmJ10sXG4gICAgWydhenMnLCAnYXBwbGljYXRpb24vdm5kLmFpcnppcC5maWxlc2VjdXJlLmF6cyddLFxuICAgIFsnYXp2JywgJ2ltYWdlL3ZuZC5haXJ6aXAuYWNjZWxlcmF0b3IuYXp2J10sXG4gICAgWydhencnLCAnYXBwbGljYXRpb24vdm5kLmFtYXpvbi5lYm9vayddLFxuICAgIFsnYjE2JywgJ2ltYWdlL3ZuZC5wY28uYjE2J10sXG4gICAgWydiYXQnLCAnYXBwbGljYXRpb24veC1tc2Rvd25sb2FkJ10sXG4gICAgWydiY3BpbycsICdhcHBsaWNhdGlvbi94LWJjcGlvJ10sXG4gICAgWydiZGYnLCAnYXBwbGljYXRpb24veC1mb250LWJkZiddLFxuICAgIFsnYmRtJywgJ2FwcGxpY2F0aW9uL3ZuZC5zeW5jbWwuZG0rd2J4bWwnXSxcbiAgICBbJ2Jkb2MnLCAnYXBwbGljYXRpb24veC1iZG9jJ10sXG4gICAgWydiZWQnLCAnYXBwbGljYXRpb24vdm5kLnJlYWx2bmMuYmVkJ10sXG4gICAgWydiaDInLCAnYXBwbGljYXRpb24vdm5kLmZ1aml0c3Uub2FzeXNwcnMnXSxcbiAgICBbJ2JpbicsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nXSxcbiAgICBbJ2JsYicsICdhcHBsaWNhdGlvbi94LWJsb3JiJ10sXG4gICAgWydibG9yYicsICdhcHBsaWNhdGlvbi94LWJsb3JiJ10sXG4gICAgWydibWknLCAnYXBwbGljYXRpb24vdm5kLmJtaSddLFxuICAgIFsnYm1tbCcsICdhcHBsaWNhdGlvbi92bmQuYmFsc2FtaXEuYm1tbCt4bWwnXSxcbiAgICBbJ2JtcCcsICdpbWFnZS9ibXAnXSxcbiAgICBbJ2Jvb2snLCAnYXBwbGljYXRpb24vdm5kLmZyYW1lbWFrZXInXSxcbiAgICBbJ2JveCcsICdhcHBsaWNhdGlvbi92bmQucHJldmlld3N5c3RlbXMuYm94J10sXG4gICAgWydib3onLCAnYXBwbGljYXRpb24veC1iemlwMiddLFxuICAgIFsnYnBrJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSddLFxuICAgIFsnYnBtbicsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nXSxcbiAgICBbJ2JzcCcsICdtb2RlbC92bmQudmFsdmUuc291cmNlLmNvbXBpbGVkLW1hcCddLFxuICAgIFsnYnRpZicsICdpbWFnZS9wcnMuYnRpZiddLFxuICAgIFsnYnVmZmVyJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSddLFxuICAgIFsnYnonLCAnYXBwbGljYXRpb24veC1iemlwJ10sXG4gICAgWydiejInLCAnYXBwbGljYXRpb24veC1iemlwMiddLFxuICAgIFsnYycsICd0ZXh0L3gtYyddLFxuICAgIFsnYzRkJywgJ2FwcGxpY2F0aW9uL3ZuZC5jbG9uay5jNGdyb3VwJ10sXG4gICAgWydjNGYnLCAnYXBwbGljYXRpb24vdm5kLmNsb25rLmM0Z3JvdXAnXSxcbiAgICBbJ2M0ZycsICdhcHBsaWNhdGlvbi92bmQuY2xvbmsuYzRncm91cCddLFxuICAgIFsnYzRwJywgJ2FwcGxpY2F0aW9uL3ZuZC5jbG9uay5jNGdyb3VwJ10sXG4gICAgWydjNHUnLCAnYXBwbGljYXRpb24vdm5kLmNsb25rLmM0Z3JvdXAnXSxcbiAgICBbJ2MxMWFtYycsICdhcHBsaWNhdGlvbi92bmQuY2x1ZXRydXN0LmNhcnRvbW9iaWxlLWNvbmZpZyddLFxuICAgIFsnYzExYW16JywgJ2FwcGxpY2F0aW9uL3ZuZC5jbHVldHJ1c3QuY2FydG9tb2JpbGUtY29uZmlnLXBrZyddLFxuICAgIFsnY2FiJywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy1jYWItY29tcHJlc3NlZCddLFxuICAgIFsnY2FmJywgJ2F1ZGlvL3gtY2FmJ10sXG4gICAgWydjYXAnLCAnYXBwbGljYXRpb24vdm5kLnRjcGR1bXAucGNhcCddLFxuICAgIFsnY2FyJywgJ2FwcGxpY2F0aW9uL3ZuZC5jdXJsLmNhciddLFxuICAgIFsnY2F0JywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy1wa2kuc2VjY2F0J10sXG4gICAgWydjYjcnLCAnYXBwbGljYXRpb24veC1jYnInXSxcbiAgICBbJ2NiYScsICdhcHBsaWNhdGlvbi94LWNiciddLFxuICAgIFsnY2JyJywgJ2FwcGxpY2F0aW9uL3gtY2JyJ10sXG4gICAgWydjYnQnLCAnYXBwbGljYXRpb24veC1jYnInXSxcbiAgICBbJ2NieicsICdhcHBsaWNhdGlvbi94LWNiciddLFxuICAgIFsnY2MnLCAndGV4dC94LWMnXSxcbiAgICBbJ2NjbycsICdhcHBsaWNhdGlvbi94LWNvY29hJ10sXG4gICAgWydjY3QnLCAnYXBwbGljYXRpb24veC1kaXJlY3RvciddLFxuICAgIFsnY2N4bWwnLCAnYXBwbGljYXRpb24vY2N4bWwreG1sJ10sXG4gICAgWydjZGJjbXNnJywgJ2FwcGxpY2F0aW9uL3ZuZC5jb250YWN0LmNtc2cnXSxcbiAgICBbJ2NkYScsICdhcHBsaWNhdGlvbi94LWNkZiddLFxuICAgIFsnY2RmJywgJ2FwcGxpY2F0aW9uL3gtbmV0Y2RmJ10sXG4gICAgWydjZGZ4JywgJ2FwcGxpY2F0aW9uL2NkZngreG1sJ10sXG4gICAgWydjZGtleScsICdhcHBsaWNhdGlvbi92bmQubWVkaWFzdGF0aW9uLmNka2V5J10sXG4gICAgWydjZG1pYScsICdhcHBsaWNhdGlvbi9jZG1pLWNhcGFiaWxpdHknXSxcbiAgICBbJ2NkbWljJywgJ2FwcGxpY2F0aW9uL2NkbWktY29udGFpbmVyJ10sXG4gICAgWydjZG1pZCcsICdhcHBsaWNhdGlvbi9jZG1pLWRvbWFpbiddLFxuICAgIFsnY2RtaW8nLCAnYXBwbGljYXRpb24vY2RtaS1vYmplY3QnXSxcbiAgICBbJ2NkbWlxJywgJ2FwcGxpY2F0aW9uL2NkbWktcXVldWUnXSxcbiAgICBbJ2NkcicsICdhcHBsaWNhdGlvbi9jZHInXSxcbiAgICBbJ2NkeCcsICdjaGVtaWNhbC94LWNkeCddLFxuICAgIFsnY2R4bWwnLCAnYXBwbGljYXRpb24vdm5kLmNoZW1kcmF3K3htbCddLFxuICAgIFsnY2R5JywgJ2FwcGxpY2F0aW9uL3ZuZC5jaW5kZXJlbGxhJ10sXG4gICAgWydjZXInLCAnYXBwbGljYXRpb24vcGtpeC1jZXJ0J10sXG4gICAgWydjZnMnLCAnYXBwbGljYXRpb24veC1jZnMtY29tcHJlc3NlZCddLFxuICAgIFsnY2dtJywgJ2ltYWdlL2NnbSddLFxuICAgIFsnY2hhdCcsICdhcHBsaWNhdGlvbi94LWNoYXQnXSxcbiAgICBbJ2NobScsICdhcHBsaWNhdGlvbi92bmQubXMtaHRtbGhlbHAnXSxcbiAgICBbJ2NocnQnLCAnYXBwbGljYXRpb24vdm5kLmtkZS5rY2hhcnQnXSxcbiAgICBbJ2NpZicsICdjaGVtaWNhbC94LWNpZiddLFxuICAgIFsnY2lpJywgJ2FwcGxpY2F0aW9uL3ZuZC5hbnNlci13ZWItY2VydGlmaWNhdGUtaXNzdWUtaW5pdGlhdGlvbiddLFxuICAgIFsnY2lsJywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy1hcnRnYWxyeSddLFxuICAgIFsnY2pzJywgJ2FwcGxpY2F0aW9uL25vZGUnXSxcbiAgICBbJ2NsYScsICdhcHBsaWNhdGlvbi92bmQuY2xheW1vcmUnXSxcbiAgICBbJ2NsYXNzJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSddLFxuICAgIFsnY2xraycsICdhcHBsaWNhdGlvbi92bmQuY3JpY2suY2xpY2tlci5rZXlib2FyZCddLFxuICAgIFsnY2xrcCcsICdhcHBsaWNhdGlvbi92bmQuY3JpY2suY2xpY2tlci5wYWxldHRlJ10sXG4gICAgWydjbGt0JywgJ2FwcGxpY2F0aW9uL3ZuZC5jcmljay5jbGlja2VyLnRlbXBsYXRlJ10sXG4gICAgWydjbGt3JywgJ2FwcGxpY2F0aW9uL3ZuZC5jcmljay5jbGlja2VyLndvcmRiYW5rJ10sXG4gICAgWydjbGt4JywgJ2FwcGxpY2F0aW9uL3ZuZC5jcmljay5jbGlja2VyJ10sXG4gICAgWydjbHAnLCAnYXBwbGljYXRpb24veC1tc2NsaXAnXSxcbiAgICBbJ2NtYycsICdhcHBsaWNhdGlvbi92bmQuY29zbW9jYWxsZXInXSxcbiAgICBbJ2NtZGYnLCAnY2hlbWljYWwveC1jbWRmJ10sXG4gICAgWydjbWwnLCAnY2hlbWljYWwveC1jbWwnXSxcbiAgICBbJ2NtcCcsICdhcHBsaWNhdGlvbi92bmQueWVsbG93cml2ZXItY3VzdG9tLW1lbnUnXSxcbiAgICBbJ2NteCcsICdpbWFnZS94LWNteCddLFxuICAgIFsnY29kJywgJ2FwcGxpY2F0aW9uL3ZuZC5yaW0uY29kJ10sXG4gICAgWydjb2ZmZWUnLCAndGV4dC9jb2ZmZWVzY3JpcHQnXSxcbiAgICBbJ2NvbScsICdhcHBsaWNhdGlvbi94LW1zZG93bmxvYWQnXSxcbiAgICBbJ2NvbmYnLCAndGV4dC9wbGFpbiddLFxuICAgIFsnY3BpbycsICdhcHBsaWNhdGlvbi94LWNwaW8nXSxcbiAgICBbJ2NwcCcsICd0ZXh0L3gtYyddLFxuICAgIFsnY3B0JywgJ2FwcGxpY2F0aW9uL21hYy1jb21wYWN0cHJvJ10sXG4gICAgWydjcmQnLCAnYXBwbGljYXRpb24veC1tc2NhcmRmaWxlJ10sXG4gICAgWydjcmwnLCAnYXBwbGljYXRpb24vcGtpeC1jcmwnXSxcbiAgICBbJ2NydCcsICdhcHBsaWNhdGlvbi94LXg1MDktY2EtY2VydCddLFxuICAgIFsnY3J4JywgJ2FwcGxpY2F0aW9uL3gtY2hyb21lLWV4dGVuc2lvbiddLFxuICAgIFsnY3J5cHRvbm90ZScsICdhcHBsaWNhdGlvbi92bmQucmlnLmNyeXB0b25vdGUnXSxcbiAgICBbJ2NzaCcsICdhcHBsaWNhdGlvbi94LWNzaCddLFxuICAgIFsnY3NsJywgJ2FwcGxpY2F0aW9uL3ZuZC5jaXRhdGlvbnN0eWxlcy5zdHlsZSt4bWwnXSxcbiAgICBbJ2NzbWwnLCAnY2hlbWljYWwveC1jc21sJ10sXG4gICAgWydjc3AnLCAnYXBwbGljYXRpb24vdm5kLmNvbW1vbnNwYWNlJ10sXG4gICAgWydjc3InLCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJ10sXG4gICAgWydjc3MnLCAndGV4dC9jc3MnXSxcbiAgICBbJ2NzdCcsICdhcHBsaWNhdGlvbi94LWRpcmVjdG9yJ10sXG4gICAgWydjc3YnLCAndGV4dC9jc3YnXSxcbiAgICBbJ2N1JywgJ2FwcGxpY2F0aW9uL2N1LXNlZW1lJ10sXG4gICAgWydjdXJsJywgJ3RleHQvdm5kLmN1cmwnXSxcbiAgICBbJ2N3dycsICdhcHBsaWNhdGlvbi9wcnMuY3d3J10sXG4gICAgWydjeHQnLCAnYXBwbGljYXRpb24veC1kaXJlY3RvciddLFxuICAgIFsnY3h4JywgJ3RleHQveC1jJ10sXG4gICAgWydkYWUnLCAnbW9kZWwvdm5kLmNvbGxhZGEreG1sJ10sXG4gICAgWydkYWYnLCAnYXBwbGljYXRpb24vdm5kLm1vYml1cy5kYWYnXSxcbiAgICBbJ2RhcnQnLCAnYXBwbGljYXRpb24vdm5kLmRhcnQnXSxcbiAgICBbJ2RhdGFsZXNzJywgJ2FwcGxpY2F0aW9uL3ZuZC5mZHNuLnNlZWQnXSxcbiAgICBbJ2Rhdm1vdW50JywgJ2FwcGxpY2F0aW9uL2Rhdm1vdW50K3htbCddLFxuICAgIFsnZGJmJywgJ2FwcGxpY2F0aW9uL3ZuZC5kYmYnXSxcbiAgICBbJ2RiaycsICdhcHBsaWNhdGlvbi9kb2Nib29rK3htbCddLFxuICAgIFsnZGNyJywgJ2FwcGxpY2F0aW9uL3gtZGlyZWN0b3InXSxcbiAgICBbJ2RjdXJsJywgJ3RleHQvdm5kLmN1cmwuZGN1cmwnXSxcbiAgICBbJ2RkMicsICdhcHBsaWNhdGlvbi92bmQub21hLmRkMit4bWwnXSxcbiAgICBbJ2RkZCcsICdhcHBsaWNhdGlvbi92bmQuZnVqaXhlcm94LmRkZCddLFxuICAgIFsnZGRmJywgJ2FwcGxpY2F0aW9uL3ZuZC5zeW5jbWwuZG1kZGYreG1sJ10sXG4gICAgWydkZHMnLCAnaW1hZ2Uvdm5kLm1zLWRkcyddLFxuICAgIFsnZGViJywgJ2FwcGxpY2F0aW9uL3gtZGViaWFuLXBhY2thZ2UnXSxcbiAgICBbJ2RlZicsICd0ZXh0L3BsYWluJ10sXG4gICAgWydkZXBsb3knLCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJ10sXG4gICAgWydkZXInLCAnYXBwbGljYXRpb24veC14NTA5LWNhLWNlcnQnXSxcbiAgICBbJ2RmYWMnLCAnYXBwbGljYXRpb24vdm5kLmRyZWFtZmFjdG9yeSddLFxuICAgIFsnZGdjJywgJ2FwcGxpY2F0aW9uL3gtZGdjLWNvbXByZXNzZWQnXSxcbiAgICBbJ2RpYycsICd0ZXh0L3gtYyddLFxuICAgIFsnZGlyJywgJ2FwcGxpY2F0aW9uL3gtZGlyZWN0b3InXSxcbiAgICBbJ2RpcycsICdhcHBsaWNhdGlvbi92bmQubW9iaXVzLmRpcyddLFxuICAgIFsnZGlzcG9zaXRpb24tbm90aWZpY2F0aW9uJywgJ21lc3NhZ2UvZGlzcG9zaXRpb24tbm90aWZpY2F0aW9uJ10sXG4gICAgWydkaXN0JywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSddLFxuICAgIFsnZGlzdHonLCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJ10sXG4gICAgWydkanYnLCAnaW1hZ2Uvdm5kLmRqdnUnXSxcbiAgICBbJ2RqdnUnLCAnaW1hZ2Uvdm5kLmRqdnUnXSxcbiAgICBbJ2RsbCcsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nXSxcbiAgICBbJ2RtZycsICdhcHBsaWNhdGlvbi94LWFwcGxlLWRpc2tpbWFnZSddLFxuICAgIFsnZG1uJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSddLFxuICAgIFsnZG1wJywgJ2FwcGxpY2F0aW9uL3ZuZC50Y3BkdW1wLnBjYXAnXSxcbiAgICBbJ2RtcycsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nXSxcbiAgICBbJ2RuYScsICdhcHBsaWNhdGlvbi92bmQuZG5hJ10sXG4gICAgWydkb2MnLCAnYXBwbGljYXRpb24vbXN3b3JkJ10sXG4gICAgWydkb2NtJywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy13b3JkLnRlbXBsYXRlLm1hY3JvRW5hYmxlZC4xMiddLFxuICAgIFsnZG9jeCcsICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudCddLFxuICAgIFsnZG90JywgJ2FwcGxpY2F0aW9uL21zd29yZCddLFxuICAgIFsnZG90bScsICdhcHBsaWNhdGlvbi92bmQubXMtd29yZC50ZW1wbGF0ZS5tYWNyb0VuYWJsZWQuMTInXSxcbiAgICBbJ2RvdHgnLCAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwudGVtcGxhdGUnXSxcbiAgICBbJ2RwJywgJ2FwcGxpY2F0aW9uL3ZuZC5vc2dpLmRwJ10sXG4gICAgWydkcGcnLCAnYXBwbGljYXRpb24vdm5kLmRwZ3JhcGgnXSxcbiAgICBbJ2RyYScsICdhdWRpby92bmQuZHJhJ10sXG4gICAgWydkcmxlJywgJ2ltYWdlL2RpY29tLXJsZSddLFxuICAgIFsnZHNjJywgJ3RleHQvcHJzLmxpbmVzLnRhZyddLFxuICAgIFsnZHNzYycsICdhcHBsaWNhdGlvbi9kc3NjK2RlciddLFxuICAgIFsnZHRiJywgJ2FwcGxpY2F0aW9uL3gtZHRib29rK3htbCddLFxuICAgIFsnZHRkJywgJ2FwcGxpY2F0aW9uL3htbC1kdGQnXSxcbiAgICBbJ2R0cycsICdhdWRpby92bmQuZHRzJ10sXG4gICAgWydkdHNoZCcsICdhdWRpby92bmQuZHRzLmhkJ10sXG4gICAgWydkdW1wJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSddLFxuICAgIFsnZHZiJywgJ3ZpZGVvL3ZuZC5kdmIuZmlsZSddLFxuICAgIFsnZHZpJywgJ2FwcGxpY2F0aW9uL3gtZHZpJ10sXG4gICAgWydkd2QnLCAnYXBwbGljYXRpb24vYXRzYy1kd2QreG1sJ10sXG4gICAgWydkd2YnLCAnbW9kZWwvdm5kLmR3ZiddLFxuICAgIFsnZHdnJywgJ2ltYWdlL3ZuZC5kd2cnXSxcbiAgICBbJ2R4ZicsICdpbWFnZS92bmQuZHhmJ10sXG4gICAgWydkeHAnLCAnYXBwbGljYXRpb24vdm5kLnNwb3RmaXJlLmR4cCddLFxuICAgIFsnZHhyJywgJ2FwcGxpY2F0aW9uL3gtZGlyZWN0b3InXSxcbiAgICBbJ2VhcicsICdhcHBsaWNhdGlvbi9qYXZhLWFyY2hpdmUnXSxcbiAgICBbJ2VjZWxwNDgwMCcsICdhdWRpby92bmQubnVlcmEuZWNlbHA0ODAwJ10sXG4gICAgWydlY2VscDc0NzAnLCAnYXVkaW8vdm5kLm51ZXJhLmVjZWxwNzQ3MCddLFxuICAgIFsnZWNlbHA5NjAwJywgJ2F1ZGlvL3ZuZC5udWVyYS5lY2VscDk2MDAnXSxcbiAgICBbJ2VjbWEnLCAnYXBwbGljYXRpb24vZWNtYXNjcmlwdCddLFxuICAgIFsnZWRtJywgJ2FwcGxpY2F0aW9uL3ZuZC5ub3ZhZGlnbS5lZG0nXSxcbiAgICBbJ2VkeCcsICdhcHBsaWNhdGlvbi92bmQubm92YWRpZ20uZWR4J10sXG4gICAgWydlZmlmJywgJ2FwcGxpY2F0aW9uL3ZuZC5waWNzZWwnXSxcbiAgICBbJ2VpNicsICdhcHBsaWNhdGlvbi92bmQucGcub3Nhc2xpJ10sXG4gICAgWydlbGMnLCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJ10sXG4gICAgWydlbWYnLCAnaW1hZ2UvZW1mJ10sXG4gICAgWydlbWwnLCAnbWVzc2FnZS9yZmM4MjInXSxcbiAgICBbJ2VtbWEnLCAnYXBwbGljYXRpb24vZW1tYSt4bWwnXSxcbiAgICBbJ2Vtb3Rpb25tbCcsICdhcHBsaWNhdGlvbi9lbW90aW9ubWwreG1sJ10sXG4gICAgWydlbXonLCAnYXBwbGljYXRpb24veC1tc21ldGFmaWxlJ10sXG4gICAgWydlb2wnLCAnYXVkaW8vdm5kLmRpZ2l0YWwtd2luZHMnXSxcbiAgICBbJ2VvdCcsICdhcHBsaWNhdGlvbi92bmQubXMtZm9udG9iamVjdCddLFxuICAgIFsnZXBzJywgJ2FwcGxpY2F0aW9uL3Bvc3RzY3JpcHQnXSxcbiAgICBbJ2VwdWInLCAnYXBwbGljYXRpb24vZXB1Yit6aXAnXSxcbiAgICBbJ2VzJywgJ2FwcGxpY2F0aW9uL2VjbWFzY3JpcHQnXSxcbiAgICBbJ2VzMycsICdhcHBsaWNhdGlvbi92bmQuZXN6aWdubzMreG1sJ10sXG4gICAgWydlc2EnLCAnYXBwbGljYXRpb24vdm5kLm9zZ2kuc3Vic3lzdGVtJ10sXG4gICAgWydlc2YnLCAnYXBwbGljYXRpb24vdm5kLmVwc29uLmVzZiddLFxuICAgIFsnZXQzJywgJ2FwcGxpY2F0aW9uL3ZuZC5lc3ppZ25vMyt4bWwnXSxcbiAgICBbJ2V0eCcsICd0ZXh0L3gtc2V0ZXh0J10sXG4gICAgWydldmEnLCAnYXBwbGljYXRpb24veC1ldmEnXSxcbiAgICBbJ2V2eScsICdhcHBsaWNhdGlvbi94LWVudm95J10sXG4gICAgWydleGUnLCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJ10sXG4gICAgWydleGknLCAnYXBwbGljYXRpb24vZXhpJ10sXG4gICAgWydleHAnLCAnYXBwbGljYXRpb24vZXhwcmVzcyddLFxuICAgIFsnZXhyJywgJ2ltYWdlL2FjZXMnXSxcbiAgICBbJ2V4dCcsICdhcHBsaWNhdGlvbi92bmQubm92YWRpZ20uZXh0J10sXG4gICAgWydleicsICdhcHBsaWNhdGlvbi9hbmRyZXctaW5zZXQnXSxcbiAgICBbJ2V6MicsICdhcHBsaWNhdGlvbi92bmQuZXpwaXgtYWxidW0nXSxcbiAgICBbJ2V6MycsICdhcHBsaWNhdGlvbi92bmQuZXpwaXgtcGFja2FnZSddLFxuICAgIFsnZicsICd0ZXh0L3gtZm9ydHJhbiddLFxuICAgIFsnZjR2JywgJ3ZpZGVvL21wNCddLFxuICAgIFsnZjc3JywgJ3RleHQveC1mb3J0cmFuJ10sXG4gICAgWydmOTAnLCAndGV4dC94LWZvcnRyYW4nXSxcbiAgICBbJ2ZicycsICdpbWFnZS92bmQuZmFzdGJpZHNoZWV0J10sXG4gICAgWydmY2R0JywgJ2FwcGxpY2F0aW9uL3ZuZC5hZG9iZS5mb3Jtc2NlbnRyYWwuZmNkdCddLFxuICAgIFsnZmNzJywgJ2FwcGxpY2F0aW9uL3ZuZC5pc2FjLmZjcyddLFxuICAgIFsnZmRmJywgJ2FwcGxpY2F0aW9uL3ZuZC5mZGYnXSxcbiAgICBbJ2ZkdCcsICdhcHBsaWNhdGlvbi9mZHQreG1sJ10sXG4gICAgWydmZV9sYXVuY2gnLCAnYXBwbGljYXRpb24vdm5kLmRlbm92by5mY3NlbGF5b3V0LWxpbmsnXSxcbiAgICBbJ2ZnNScsICdhcHBsaWNhdGlvbi92bmQuZnVqaXRzdS5vYXN5c2dwJ10sXG4gICAgWydmZ2QnLCAnYXBwbGljYXRpb24veC1kaXJlY3RvciddLFxuICAgIFsnZmgnLCAnaW1hZ2UveC1mcmVlaGFuZCddLFxuICAgIFsnZmg0JywgJ2ltYWdlL3gtZnJlZWhhbmQnXSxcbiAgICBbJ2ZoNScsICdpbWFnZS94LWZyZWVoYW5kJ10sXG4gICAgWydmaDcnLCAnaW1hZ2UveC1mcmVlaGFuZCddLFxuICAgIFsnZmhjJywgJ2ltYWdlL3gtZnJlZWhhbmQnXSxcbiAgICBbJ2ZpZycsICdhcHBsaWNhdGlvbi94LXhmaWcnXSxcbiAgICBbJ2ZpdHMnLCAnaW1hZ2UvZml0cyddLFxuICAgIFsnZmxhYycsICdhdWRpby94LWZsYWMnXSxcbiAgICBbJ2ZsaScsICd2aWRlby94LWZsaSddLFxuICAgIFsnZmxvJywgJ2FwcGxpY2F0aW9uL3ZuZC5taWNyb2dyYWZ4LmZsbyddLFxuICAgIFsnZmx2JywgJ3ZpZGVvL3gtZmx2J10sXG4gICAgWydmbHcnLCAnYXBwbGljYXRpb24vdm5kLmtkZS5raXZpbyddLFxuICAgIFsnZmx4JywgJ3RleHQvdm5kLmZtaS5mbGV4c3RvciddLFxuICAgIFsnZmx5JywgJ3RleHQvdm5kLmZseSddLFxuICAgIFsnZm0nLCAnYXBwbGljYXRpb24vdm5kLmZyYW1lbWFrZXInXSxcbiAgICBbJ2ZuYycsICdhcHBsaWNhdGlvbi92bmQuZnJvZ2Fucy5mbmMnXSxcbiAgICBbJ2ZvJywgJ2FwcGxpY2F0aW9uL3ZuZC5zb2Z0d2FyZTYwMi5maWxsZXIuZm9ybSt4bWwnXSxcbiAgICBbJ2ZvcicsICd0ZXh0L3gtZm9ydHJhbiddLFxuICAgIFsnZnB4JywgJ2ltYWdlL3ZuZC5mcHgnXSxcbiAgICBbJ2ZyYW1lJywgJ2FwcGxpY2F0aW9uL3ZuZC5mcmFtZW1ha2VyJ10sXG4gICAgWydmc2MnLCAnYXBwbGljYXRpb24vdm5kLmZzYy53ZWJsYXVuY2gnXSxcbiAgICBbJ2ZzdCcsICdpbWFnZS92bmQuZnN0J10sXG4gICAgWydmdGMnLCAnYXBwbGljYXRpb24vdm5kLmZsdXh0aW1lLmNsaXAnXSxcbiAgICBbJ2Z0aScsICdhcHBsaWNhdGlvbi92bmQuYW5zZXItd2ViLWZ1bmRzLXRyYW5zZmVyLWluaXRpYXRpb24nXSxcbiAgICBbJ2Z2dCcsICd2aWRlby92bmQuZnZ0J10sXG4gICAgWydmeHAnLCAnYXBwbGljYXRpb24vdm5kLmFkb2JlLmZ4cCddLFxuICAgIFsnZnhwbCcsICdhcHBsaWNhdGlvbi92bmQuYWRvYmUuZnhwJ10sXG4gICAgWydmenMnLCAnYXBwbGljYXRpb24vdm5kLmZ1enp5c2hlZXQnXSxcbiAgICBbJ2cydycsICdhcHBsaWNhdGlvbi92bmQuZ2VvcGxhbiddLFxuICAgIFsnZzMnLCAnaW1hZ2UvZzNmYXgnXSxcbiAgICBbJ2czdycsICdhcHBsaWNhdGlvbi92bmQuZ2Vvc3BhY2UnXSxcbiAgICBbJ2dhYycsICdhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLWFjY291bnQnXSxcbiAgICBbJ2dhbScsICdhcHBsaWNhdGlvbi94LXRhZHMnXSxcbiAgICBbJ2dicicsICdhcHBsaWNhdGlvbi9ycGtpLWdob3N0YnVzdGVycyddLFxuICAgIFsnZ2NhJywgJ2FwcGxpY2F0aW9uL3gtZ2NhLWNvbXByZXNzZWQnXSxcbiAgICBbJ2dkbCcsICdtb2RlbC92bmQuZ2RsJ10sXG4gICAgWydnZG9jJywgJ2FwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5kb2N1bWVudCddLFxuICAgIFsnZ2VvJywgJ2FwcGxpY2F0aW9uL3ZuZC5keW5hZ2VvJ10sXG4gICAgWydnZW9qc29uJywgJ2FwcGxpY2F0aW9uL2dlbytqc29uJ10sXG4gICAgWydnZXgnLCAnYXBwbGljYXRpb24vdm5kLmdlb21ldHJ5LWV4cGxvcmVyJ10sXG4gICAgWydnZ2InLCAnYXBwbGljYXRpb24vdm5kLmdlb2dlYnJhLmZpbGUnXSxcbiAgICBbJ2dndCcsICdhcHBsaWNhdGlvbi92bmQuZ2VvZ2VicmEudG9vbCddLFxuICAgIFsnZ2hmJywgJ2FwcGxpY2F0aW9uL3ZuZC5ncm9vdmUtaGVscCddLFxuICAgIFsnZ2lmJywgJ2ltYWdlL2dpZiddLFxuICAgIFsnZ2ltJywgJ2FwcGxpY2F0aW9uL3ZuZC5ncm9vdmUtaWRlbnRpdHktbWVzc2FnZSddLFxuICAgIFsnZ2xiJywgJ21vZGVsL2dsdGYtYmluYXJ5J10sXG4gICAgWydnbHRmJywgJ21vZGVsL2dsdGYranNvbiddLFxuICAgIFsnZ21sJywgJ2FwcGxpY2F0aW9uL2dtbCt4bWwnXSxcbiAgICBbJ2dteCcsICdhcHBsaWNhdGlvbi92bmQuZ214J10sXG4gICAgWydnbnVtZXJpYycsICdhcHBsaWNhdGlvbi94LWdudW1lcmljJ10sXG4gICAgWydncGcnLCAnYXBwbGljYXRpb24vZ3BnLWtleXMnXSxcbiAgICBbJ2dwaCcsICdhcHBsaWNhdGlvbi92bmQuZmxvZ3JhcGhpdCddLFxuICAgIFsnZ3B4JywgJ2FwcGxpY2F0aW9uL2dweCt4bWwnXSxcbiAgICBbJ2dxZicsICdhcHBsaWNhdGlvbi92bmQuZ3JhZmVxJ10sXG4gICAgWydncXMnLCAnYXBwbGljYXRpb24vdm5kLmdyYWZlcSddLFxuICAgIFsnZ3JhbScsICdhcHBsaWNhdGlvbi9zcmdzJ10sXG4gICAgWydncmFtcHMnLCAnYXBwbGljYXRpb24veC1ncmFtcHMteG1sJ10sXG4gICAgWydncmUnLCAnYXBwbGljYXRpb24vdm5kLmdlb21ldHJ5LWV4cGxvcmVyJ10sXG4gICAgWydncnYnLCAnYXBwbGljYXRpb24vdm5kLmdyb292ZS1pbmplY3RvciddLFxuICAgIFsnZ3J4bWwnLCAnYXBwbGljYXRpb24vc3Jncyt4bWwnXSxcbiAgICBbJ2dzZicsICdhcHBsaWNhdGlvbi94LWZvbnQtZ2hvc3RzY3JpcHQnXSxcbiAgICBbJ2dzaGVldCcsICdhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuc3ByZWFkc2hlZXQnXSxcbiAgICBbJ2dzbGlkZXMnLCAnYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLnByZXNlbnRhdGlvbiddLFxuICAgIFsnZ3RhcicsICdhcHBsaWNhdGlvbi94LWd0YXInXSxcbiAgICBbJ2d0bScsICdhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLXRvb2wtbWVzc2FnZSddLFxuICAgIFsnZ3R3JywgJ21vZGVsL3ZuZC5ndHcnXSxcbiAgICBbJ2d2JywgJ3RleHQvdm5kLmdyYXBodml6J10sXG4gICAgWydneGYnLCAnYXBwbGljYXRpb24vZ3hmJ10sXG4gICAgWydneHQnLCAnYXBwbGljYXRpb24vdm5kLmdlb25leHQnXSxcbiAgICBbJ2d6JywgJ2FwcGxpY2F0aW9uL2d6aXAnXSxcbiAgICBbJ2d6aXAnLCAnYXBwbGljYXRpb24vZ3ppcCddLFxuICAgIFsnaCcsICd0ZXh0L3gtYyddLFxuICAgIFsnaDI2MScsICd2aWRlby9oMjYxJ10sXG4gICAgWydoMjYzJywgJ3ZpZGVvL2gyNjMnXSxcbiAgICBbJ2gyNjQnLCAndmlkZW8vaDI2NCddLFxuICAgIFsnaGFsJywgJ2FwcGxpY2F0aW9uL3ZuZC5oYWwreG1sJ10sXG4gICAgWydoYmNpJywgJ2FwcGxpY2F0aW9uL3ZuZC5oYmNpJ10sXG4gICAgWydoYnMnLCAndGV4dC94LWhhbmRsZWJhcnMtdGVtcGxhdGUnXSxcbiAgICBbJ2hkZCcsICdhcHBsaWNhdGlvbi94LXZpcnR1YWxib3gtaGRkJ10sXG4gICAgWydoZGYnLCAnYXBwbGljYXRpb24veC1oZGYnXSxcbiAgICBbJ2hlaWMnLCAnaW1hZ2UvaGVpYyddLFxuICAgIFsnaGVpY3MnLCAnaW1hZ2UvaGVpYy1zZXF1ZW5jZSddLFxuICAgIFsnaGVpZicsICdpbWFnZS9oZWlmJ10sXG4gICAgWydoZWlmcycsICdpbWFnZS9oZWlmLXNlcXVlbmNlJ10sXG4gICAgWydoZWoyJywgJ2ltYWdlL2hlajJrJ10sXG4gICAgWydoZWxkJywgJ2FwcGxpY2F0aW9uL2F0c2MtaGVsZCt4bWwnXSxcbiAgICBbJ2hoJywgJ3RleHQveC1jJ10sXG4gICAgWydoanNvbicsICdhcHBsaWNhdGlvbi9oanNvbiddLFxuICAgIFsnaGxwJywgJ2FwcGxpY2F0aW9uL3dpbmhscCddLFxuICAgIFsnaHBnbCcsICdhcHBsaWNhdGlvbi92bmQuaHAtaHBnbCddLFxuICAgIFsnaHBpZCcsICdhcHBsaWNhdGlvbi92bmQuaHAtaHBpZCddLFxuICAgIFsnaHBzJywgJ2FwcGxpY2F0aW9uL3ZuZC5ocC1ocHMnXSxcbiAgICBbJ2hxeCcsICdhcHBsaWNhdGlvbi9tYWMtYmluaGV4NDAnXSxcbiAgICBbJ2hzajInLCAnaW1hZ2UvaHNqMiddLFxuICAgIFsnaHRjJywgJ3RleHQveC1jb21wb25lbnQnXSxcbiAgICBbJ2h0a2UnLCAnYXBwbGljYXRpb24vdm5kLmtlbmFtZWFhcHAnXSxcbiAgICBbJ2h0bScsICd0ZXh0L2h0bWwnXSxcbiAgICBbJ2h0bWwnLCAndGV4dC9odG1sJ10sXG4gICAgWydodmQnLCAnYXBwbGljYXRpb24vdm5kLnlhbWFoYS5odi1kaWMnXSxcbiAgICBbJ2h2cCcsICdhcHBsaWNhdGlvbi92bmQueWFtYWhhLmh2LXZvaWNlJ10sXG4gICAgWydodnMnLCAnYXBwbGljYXRpb24vdm5kLnlhbWFoYS5odi1zY3JpcHQnXSxcbiAgICBbJ2kyZycsICdhcHBsaWNhdGlvbi92bmQuaW50ZXJnZW8nXSxcbiAgICBbJ2ljYycsICdhcHBsaWNhdGlvbi92bmQuaWNjcHJvZmlsZSddLFxuICAgIFsnaWNlJywgJ3gtY29uZmVyZW5jZS94LWNvb2x0YWxrJ10sXG4gICAgWydpY20nLCAnYXBwbGljYXRpb24vdm5kLmljY3Byb2ZpbGUnXSxcbiAgICBbJ2ljbycsICdpbWFnZS94LWljb24nXSxcbiAgICBbJ2ljcycsICd0ZXh0L2NhbGVuZGFyJ10sXG4gICAgWydpZWYnLCAnaW1hZ2UvaWVmJ10sXG4gICAgWydpZmInLCAndGV4dC9jYWxlbmRhciddLFxuICAgIFsnaWZtJywgJ2FwcGxpY2F0aW9uL3ZuZC5zaGFuYS5pbmZvcm1lZC5mb3JtZGF0YSddLFxuICAgIFsnaWdlcycsICdtb2RlbC9pZ2VzJ10sXG4gICAgWydpZ2wnLCAnYXBwbGljYXRpb24vdm5kLmlnbG9hZGVyJ10sXG4gICAgWydpZ20nLCAnYXBwbGljYXRpb24vdm5kLmluc29ycy5pZ20nXSxcbiAgICBbJ2lncycsICdtb2RlbC9pZ2VzJ10sXG4gICAgWydpZ3gnLCAnYXBwbGljYXRpb24vdm5kLm1pY3JvZ3JhZnguaWd4J10sXG4gICAgWydpaWYnLCAnYXBwbGljYXRpb24vdm5kLnNoYW5hLmluZm9ybWVkLmludGVyY2hhbmdlJ10sXG4gICAgWydpbWcnLCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJ10sXG4gICAgWydpbXAnLCAnYXBwbGljYXRpb24vdm5kLmFjY3BhYy5zaW1wbHkuaW1wJ10sXG4gICAgWydpbXMnLCAnYXBwbGljYXRpb24vdm5kLm1zLWltcyddLFxuICAgIFsnaW4nLCAndGV4dC9wbGFpbiddLFxuICAgIFsnaW5pJywgJ3RleHQvcGxhaW4nXSxcbiAgICBbJ2luaycsICdhcHBsaWNhdGlvbi9pbmttbCt4bWwnXSxcbiAgICBbJ2lua21sJywgJ2FwcGxpY2F0aW9uL2lua21sK3htbCddLFxuICAgIFsnaW5zdGFsbCcsICdhcHBsaWNhdGlvbi94LWluc3RhbGwtaW5zdHJ1Y3Rpb25zJ10sXG4gICAgWydpb3RhJywgJ2FwcGxpY2F0aW9uL3ZuZC5hc3RyYWVhLXNvZnR3YXJlLmlvdGEnXSxcbiAgICBbJ2lwZml4JywgJ2FwcGxpY2F0aW9uL2lwZml4J10sXG4gICAgWydpcGsnLCAnYXBwbGljYXRpb24vdm5kLnNoYW5hLmluZm9ybWVkLnBhY2thZ2UnXSxcbiAgICBbJ2lybScsICdhcHBsaWNhdGlvbi92bmQuaWJtLnJpZ2h0cy1tYW5hZ2VtZW50J10sXG4gICAgWydpcnAnLCAnYXBwbGljYXRpb24vdm5kLmlyZXBvc2l0b3J5LnBhY2thZ2UreG1sJ10sXG4gICAgWydpc28nLCAnYXBwbGljYXRpb24veC1pc285NjYwLWltYWdlJ10sXG4gICAgWydpdHAnLCAnYXBwbGljYXRpb24vdm5kLnNoYW5hLmluZm9ybWVkLmZvcm10ZW1wbGF0ZSddLFxuICAgIFsnaXRzJywgJ2FwcGxpY2F0aW9uL2l0cyt4bWwnXSxcbiAgICBbJ2l2cCcsICdhcHBsaWNhdGlvbi92bmQuaW1tZXJ2aXNpb24taXZwJ10sXG4gICAgWydpdnUnLCAnYXBwbGljYXRpb24vdm5kLmltbWVydmlzaW9uLWl2dSddLFxuICAgIFsnamFkJywgJ3RleHQvdm5kLnN1bi5qMm1lLmFwcC1kZXNjcmlwdG9yJ10sXG4gICAgWydqYWRlJywgJ3RleHQvamFkZSddLFxuICAgIFsnamFtJywgJ2FwcGxpY2F0aW9uL3ZuZC5qYW0nXSxcbiAgICBbJ2phcicsICdhcHBsaWNhdGlvbi9qYXZhLWFyY2hpdmUnXSxcbiAgICBbJ2phcmRpZmYnLCAnYXBwbGljYXRpb24veC1qYXZhLWFyY2hpdmUtZGlmZiddLFxuICAgIFsnamF2YScsICd0ZXh0L3gtamF2YS1zb3VyY2UnXSxcbiAgICBbJ2poYycsICdpbWFnZS9qcGhjJ10sXG4gICAgWydqaXNwJywgJ2FwcGxpY2F0aW9uL3ZuZC5qaXNwJ10sXG4gICAgWydqbHMnLCAnaW1hZ2UvamxzJ10sXG4gICAgWydqbHQnLCAnYXBwbGljYXRpb24vdm5kLmhwLWpseXQnXSxcbiAgICBbJ2puZycsICdpbWFnZS94LWpuZyddLFxuICAgIFsnam5scCcsICdhcHBsaWNhdGlvbi94LWphdmEtam5scC1maWxlJ10sXG4gICAgWydqb2RhJywgJ2FwcGxpY2F0aW9uL3ZuZC5qb29zdC5qb2RhLWFyY2hpdmUnXSxcbiAgICBbJ2pwMicsICdpbWFnZS9qcDInXSxcbiAgICBbJ2pwZScsICdpbWFnZS9qcGVnJ10sXG4gICAgWydqcGVnJywgJ2ltYWdlL2pwZWcnXSxcbiAgICBbJ2pwZicsICdpbWFnZS9qcHgnXSxcbiAgICBbJ2pwZycsICdpbWFnZS9qcGVnJ10sXG4gICAgWydqcGcyJywgJ2ltYWdlL2pwMiddLFxuICAgIFsnanBnbScsICd2aWRlby9qcG0nXSxcbiAgICBbJ2pwZ3YnLCAndmlkZW8vanBlZyddLFxuICAgIFsnanBoJywgJ2ltYWdlL2pwaCddLFxuICAgIFsnanBtJywgJ3ZpZGVvL2pwbSddLFxuICAgIFsnanB4JywgJ2ltYWdlL2pweCddLFxuICAgIFsnanMnLCAnYXBwbGljYXRpb24vamF2YXNjcmlwdCddLFxuICAgIFsnanNvbicsICdhcHBsaWNhdGlvbi9qc29uJ10sXG4gICAgWydqc29uNScsICdhcHBsaWNhdGlvbi9qc29uNSddLFxuICAgIFsnanNvbmxkJywgJ2FwcGxpY2F0aW9uL2xkK2pzb24nXSxcbiAgICAvLyBodHRwczovL2pzb25saW5lcy5vcmcvXG4gICAgWydqc29ubCcsICdhcHBsaWNhdGlvbi9qc29ubCddLFxuICAgIFsnanNvbm1sJywgJ2FwcGxpY2F0aW9uL2pzb25tbCtqc29uJ10sXG4gICAgWydqc3gnLCAndGV4dC9qc3gnXSxcbiAgICBbJ2p4cicsICdpbWFnZS9qeHInXSxcbiAgICBbJ2p4cmEnLCAnaW1hZ2UvanhyYSddLFxuICAgIFsnanhycycsICdpbWFnZS9qeHJzJ10sXG4gICAgWydqeHMnLCAnaW1hZ2UvanhzJ10sXG4gICAgWydqeHNjJywgJ2ltYWdlL2p4c2MnXSxcbiAgICBbJ2p4c2knLCAnaW1hZ2UvanhzaSddLFxuICAgIFsnanhzcycsICdpbWFnZS9qeHNzJ10sXG4gICAgWydrYXInLCAnYXVkaW8vbWlkaSddLFxuICAgIFsna2FyYm9uJywgJ2FwcGxpY2F0aW9uL3ZuZC5rZGUua2FyYm9uJ10sXG4gICAgWydrZGInLCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJ10sXG4gICAgWydrZGJ4JywgJ2FwcGxpY2F0aW9uL3gta2VlcGFzczInXSxcbiAgICBbJ2tleScsICdhcHBsaWNhdGlvbi94LWl3b3JrLWtleW5vdGUtc2Zma2V5J10sXG4gICAgWydrZm8nLCAnYXBwbGljYXRpb24vdm5kLmtkZS5rZm9ybXVsYSddLFxuICAgIFsna2lhJywgJ2FwcGxpY2F0aW9uL3ZuZC5raWRzcGlyYXRpb24nXSxcbiAgICBbJ2ttbCcsICdhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWVhcnRoLmttbCt4bWwnXSxcbiAgICBbJ2tteicsICdhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWVhcnRoLmtteiddLFxuICAgIFsna25lJywgJ2FwcGxpY2F0aW9uL3ZuZC5raW5hciddLFxuICAgIFsna25wJywgJ2FwcGxpY2F0aW9uL3ZuZC5raW5hciddLFxuICAgIFsna29uJywgJ2FwcGxpY2F0aW9uL3ZuZC5rZGUua29udG91ciddLFxuICAgIFsna3ByJywgJ2FwcGxpY2F0aW9uL3ZuZC5rZGUua3ByZXNlbnRlciddLFxuICAgIFsna3B0JywgJ2FwcGxpY2F0aW9uL3ZuZC5rZGUua3ByZXNlbnRlciddLFxuICAgIFsna3B4eCcsICdhcHBsaWNhdGlvbi92bmQuZHMta2V5cG9pbnQnXSxcbiAgICBbJ2tzcCcsICdhcHBsaWNhdGlvbi92bmQua2RlLmtzcHJlYWQnXSxcbiAgICBbJ2t0cicsICdhcHBsaWNhdGlvbi92bmQua2Fob290eiddLFxuICAgIFsna3R4JywgJ2ltYWdlL2t0eCddLFxuICAgIFsna3R4MicsICdpbWFnZS9rdHgyJ10sXG4gICAgWydrdHonLCAnYXBwbGljYXRpb24vdm5kLmthaG9vdHonXSxcbiAgICBbJ2t3ZCcsICdhcHBsaWNhdGlvbi92bmQua2RlLmt3b3JkJ10sXG4gICAgWydrd3QnLCAnYXBwbGljYXRpb24vdm5kLmtkZS5rd29yZCddLFxuICAgIFsnbGFzeG1sJywgJ2FwcGxpY2F0aW9uL3ZuZC5sYXMubGFzK3htbCddLFxuICAgIFsnbGF0ZXgnLCAnYXBwbGljYXRpb24veC1sYXRleCddLFxuICAgIFsnbGJkJywgJ2FwcGxpY2F0aW9uL3ZuZC5sbGFtYWdyYXBoaWNzLmxpZmUtYmFsYW5jZS5kZXNrdG9wJ10sXG4gICAgWydsYmUnLCAnYXBwbGljYXRpb24vdm5kLmxsYW1hZ3JhcGhpY3MubGlmZS1iYWxhbmNlLmV4Y2hhbmdlK3htbCddLFxuICAgIFsnbGVzJywgJ2FwcGxpY2F0aW9uL3ZuZC5oaGUubGVzc29uLXBsYXllciddLFxuICAgIFsnbGVzcycsICd0ZXh0L2xlc3MnXSxcbiAgICBbJ2xncicsICdhcHBsaWNhdGlvbi9sZ3IreG1sJ10sXG4gICAgWydsaGEnLCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJ10sXG4gICAgWydsaW5rNjYnLCAnYXBwbGljYXRpb24vdm5kLnJvdXRlNjYubGluazY2K3htbCddLFxuICAgIFsnbGlzdCcsICd0ZXh0L3BsYWluJ10sXG4gICAgWydsaXN0MzgyMCcsICdhcHBsaWNhdGlvbi92bmQuaWJtLm1vZGNhcCddLFxuICAgIFsnbGlzdGFmcCcsICdhcHBsaWNhdGlvbi92bmQuaWJtLm1vZGNhcCddLFxuICAgIFsnbGl0Y29mZmVlJywgJ3RleHQvY29mZmVlc2NyaXB0J10sXG4gICAgWydsbmsnLCAnYXBwbGljYXRpb24veC1tcy1zaG9ydGN1dCddLFxuICAgIFsnbG9nJywgJ3RleHQvcGxhaW4nXSxcbiAgICBbJ2xvc3R4bWwnLCAnYXBwbGljYXRpb24vbG9zdCt4bWwnXSxcbiAgICBbJ2xyZicsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nXSxcbiAgICBbJ2xybScsICdhcHBsaWNhdGlvbi92bmQubXMtbHJtJ10sXG4gICAgWydsdGYnLCAnYXBwbGljYXRpb24vdm5kLmZyb2dhbnMubHRmJ10sXG4gICAgWydsdWEnLCAndGV4dC94LWx1YSddLFxuICAgIFsnbHVhYycsICdhcHBsaWNhdGlvbi94LWx1YS1ieXRlY29kZSddLFxuICAgIFsnbHZwJywgJ2F1ZGlvL3ZuZC5sdWNlbnQudm9pY2UnXSxcbiAgICBbJ2x3cCcsICdhcHBsaWNhdGlvbi92bmQubG90dXMtd29yZHBybyddLFxuICAgIFsnbHpoJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSddLFxuICAgIFsnbTF2JywgJ3ZpZGVvL21wZWcnXSxcbiAgICBbJ20yYScsICdhdWRpby9tcGVnJ10sXG4gICAgWydtMnYnLCAndmlkZW8vbXBlZyddLFxuICAgIFsnbTNhJywgJ2F1ZGlvL21wZWcnXSxcbiAgICBbJ20zdScsICd0ZXh0L3BsYWluJ10sXG4gICAgWydtM3U4JywgJ2FwcGxpY2F0aW9uL3ZuZC5hcHBsZS5tcGVndXJsJ10sXG4gICAgWydtNGEnLCAnYXVkaW8veC1tNGEnXSxcbiAgICBbJ200cCcsICdhcHBsaWNhdGlvbi9tcDQnXSxcbiAgICBbJ200cycsICd2aWRlby9pc28uc2VnbWVudCddLFxuICAgIFsnbTR1JywgJ2FwcGxpY2F0aW9uL3ZuZC5tcGVndXJsJ10sXG4gICAgWydtNHYnLCAndmlkZW8veC1tNHYnXSxcbiAgICBbJ20xMycsICdhcHBsaWNhdGlvbi94LW1zbWVkaWF2aWV3J10sXG4gICAgWydtMTQnLCAnYXBwbGljYXRpb24veC1tc21lZGlhdmlldyddLFxuICAgIFsnbTIxJywgJ2FwcGxpY2F0aW9uL21wMjEnXSxcbiAgICBbJ21hJywgJ2FwcGxpY2F0aW9uL21hdGhlbWF0aWNhJ10sXG4gICAgWydtYWRzJywgJ2FwcGxpY2F0aW9uL21hZHMreG1sJ10sXG4gICAgWydtYWVpJywgJ2FwcGxpY2F0aW9uL21tdC1hZWkreG1sJ10sXG4gICAgWydtYWcnLCAnYXBwbGljYXRpb24vdm5kLmVjb3dpbi5jaGFydCddLFxuICAgIFsnbWFrZXInLCAnYXBwbGljYXRpb24vdm5kLmZyYW1lbWFrZXInXSxcbiAgICBbJ21hbicsICd0ZXh0L3Ryb2ZmJ10sXG4gICAgWydtYW5pZmVzdCcsICd0ZXh0L2NhY2hlLW1hbmlmZXN0J10sXG4gICAgWydtYXAnLCAnYXBwbGljYXRpb24vanNvbiddLFxuICAgIFsnbWFyJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSddLFxuICAgIFsnbWFya2Rvd24nLCAndGV4dC9tYXJrZG93biddLFxuICAgIFsnbWF0aG1sJywgJ2FwcGxpY2F0aW9uL21hdGhtbCt4bWwnXSxcbiAgICBbJ21iJywgJ2FwcGxpY2F0aW9uL21hdGhlbWF0aWNhJ10sXG4gICAgWydtYmsnLCAnYXBwbGljYXRpb24vdm5kLm1vYml1cy5tYmsnXSxcbiAgICBbJ21ib3gnLCAnYXBwbGljYXRpb24vbWJveCddLFxuICAgIFsnbWMxJywgJ2FwcGxpY2F0aW9uL3ZuZC5tZWRjYWxjZGF0YSddLFxuICAgIFsnbWNkJywgJ2FwcGxpY2F0aW9uL3ZuZC5tY2QnXSxcbiAgICBbJ21jdXJsJywgJ3RleHQvdm5kLmN1cmwubWN1cmwnXSxcbiAgICBbJ21kJywgJ3RleHQvbWFya2Rvd24nXSxcbiAgICBbJ21kYicsICdhcHBsaWNhdGlvbi94LW1zYWNjZXNzJ10sXG4gICAgWydtZGknLCAnaW1hZ2Uvdm5kLm1zLW1vZGknXSxcbiAgICBbJ21keCcsICd0ZXh0L21keCddLFxuICAgIFsnbWUnLCAndGV4dC90cm9mZiddLFxuICAgIFsnbWVzaCcsICdtb2RlbC9tZXNoJ10sXG4gICAgWydtZXRhNCcsICdhcHBsaWNhdGlvbi9tZXRhbGluazQreG1sJ10sXG4gICAgWydtZXRhbGluaycsICdhcHBsaWNhdGlvbi9tZXRhbGluayt4bWwnXSxcbiAgICBbJ21ldHMnLCAnYXBwbGljYXRpb24vbWV0cyt4bWwnXSxcbiAgICBbJ21mbScsICdhcHBsaWNhdGlvbi92bmQubWZtcCddLFxuICAgIFsnbWZ0JywgJ2FwcGxpY2F0aW9uL3Jwa2ktbWFuaWZlc3QnXSxcbiAgICBbJ21ncCcsICdhcHBsaWNhdGlvbi92bmQub3NnZW8ubWFwZ3VpZGUucGFja2FnZSddLFxuICAgIFsnbWd6JywgJ2FwcGxpY2F0aW9uL3ZuZC5wcm90ZXVzLm1hZ2F6aW5lJ10sXG4gICAgWydtaWQnLCAnYXVkaW8vbWlkaSddLFxuICAgIFsnbWlkaScsICdhdWRpby9taWRpJ10sXG4gICAgWydtaWUnLCAnYXBwbGljYXRpb24veC1taWUnXSxcbiAgICBbJ21pZicsICdhcHBsaWNhdGlvbi92bmQubWlmJ10sXG4gICAgWydtaW1lJywgJ21lc3NhZ2UvcmZjODIyJ10sXG4gICAgWydtajInLCAndmlkZW8vbWoyJ10sXG4gICAgWydtanAyJywgJ3ZpZGVvL21qMiddLFxuICAgIFsnbWpzJywgJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnXSxcbiAgICBbJ21rM2QnLCAndmlkZW8veC1tYXRyb3NrYSddLFxuICAgIFsnbWthJywgJ2F1ZGlvL3gtbWF0cm9za2EnXSxcbiAgICBbJ21rZCcsICd0ZXh0L3gtbWFya2Rvd24nXSxcbiAgICBbJ21rcycsICd2aWRlby94LW1hdHJvc2thJ10sXG4gICAgWydta3YnLCAndmlkZW8veC1tYXRyb3NrYSddLFxuICAgIFsnbWxwJywgJ2FwcGxpY2F0aW9uL3ZuZC5kb2xieS5tbHAnXSxcbiAgICBbJ21tZCcsICdhcHBsaWNhdGlvbi92bmQuY2hpcG51dHMua2FyYW9rZS1tbWQnXSxcbiAgICBbJ21tZicsICdhcHBsaWNhdGlvbi92bmQuc21hZiddLFxuICAgIFsnbW1sJywgJ3RleHQvbWF0aG1sJ10sXG4gICAgWydtbXInLCAnaW1hZ2Uvdm5kLmZ1aml4ZXJveC5lZG1pY3MtbW1yJ10sXG4gICAgWydtbmcnLCAndmlkZW8veC1tbmcnXSxcbiAgICBbJ21ueScsICdhcHBsaWNhdGlvbi94LW1zbW9uZXknXSxcbiAgICBbJ21vYmknLCAnYXBwbGljYXRpb24veC1tb2JpcG9ja2V0LWVib29rJ10sXG4gICAgWydtb2RzJywgJ2FwcGxpY2F0aW9uL21vZHMreG1sJ10sXG4gICAgWydtb3YnLCAndmlkZW8vcXVpY2t0aW1lJ10sXG4gICAgWydtb3ZpZScsICd2aWRlby94LXNnaS1tb3ZpZSddLFxuICAgIFsnbXAyJywgJ2F1ZGlvL21wZWcnXSxcbiAgICBbJ21wMmEnLCAnYXVkaW8vbXBlZyddLFxuICAgIFsnbXAzJywgJ2F1ZGlvL21wZWcnXSxcbiAgICBbJ21wNCcsICd2aWRlby9tcDQnXSxcbiAgICBbJ21wNGEnLCAnYXVkaW8vbXA0J10sXG4gICAgWydtcDRzJywgJ2FwcGxpY2F0aW9uL21wNCddLFxuICAgIFsnbXA0dicsICd2aWRlby9tcDQnXSxcbiAgICBbJ21wMjEnLCAnYXBwbGljYXRpb24vbXAyMSddLFxuICAgIFsnbXBjJywgJ2FwcGxpY2F0aW9uL3ZuZC5tb3BodW4uY2VydGlmaWNhdGUnXSxcbiAgICBbJ21wZCcsICdhcHBsaWNhdGlvbi9kYXNoK3htbCddLFxuICAgIFsnbXBlJywgJ3ZpZGVvL21wZWcnXSxcbiAgICBbJ21wZWcnLCAndmlkZW8vbXBlZyddLFxuICAgIFsnbXBnJywgJ3ZpZGVvL21wZWcnXSxcbiAgICBbJ21wZzQnLCAndmlkZW8vbXA0J10sXG4gICAgWydtcGdhJywgJ2F1ZGlvL21wZWcnXSxcbiAgICBbJ21wa2cnLCAnYXBwbGljYXRpb24vdm5kLmFwcGxlLmluc3RhbGxlcit4bWwnXSxcbiAgICBbJ21wbScsICdhcHBsaWNhdGlvbi92bmQuYmx1ZWljZS5tdWx0aXBhc3MnXSxcbiAgICBbJ21wbicsICdhcHBsaWNhdGlvbi92bmQubW9waHVuLmFwcGxpY2F0aW9uJ10sXG4gICAgWydtcHAnLCAnYXBwbGljYXRpb24vdm5kLm1zLXByb2plY3QnXSxcbiAgICBbJ21wdCcsICdhcHBsaWNhdGlvbi92bmQubXMtcHJvamVjdCddLFxuICAgIFsnbXB5JywgJ2FwcGxpY2F0aW9uL3ZuZC5pYm0ubWluaXBheSddLFxuICAgIFsnbXF5JywgJ2FwcGxpY2F0aW9uL3ZuZC5tb2JpdXMubXF5J10sXG4gICAgWydtcmMnLCAnYXBwbGljYXRpb24vbWFyYyddLFxuICAgIFsnbXJjeCcsICdhcHBsaWNhdGlvbi9tYXJjeG1sK3htbCddLFxuICAgIFsnbXMnLCAndGV4dC90cm9mZiddLFxuICAgIFsnbXNjbWwnLCAnYXBwbGljYXRpb24vbWVkaWFzZXJ2ZXJjb250cm9sK3htbCddLFxuICAgIFsnbXNlZWQnLCAnYXBwbGljYXRpb24vdm5kLmZkc24ubXNlZWQnXSxcbiAgICBbJ21zZXEnLCAnYXBwbGljYXRpb24vdm5kLm1zZXEnXSxcbiAgICBbJ21zZicsICdhcHBsaWNhdGlvbi92bmQuZXBzb24ubXNmJ10sXG4gICAgWydtc2cnLCAnYXBwbGljYXRpb24vdm5kLm1zLW91dGxvb2snXSxcbiAgICBbJ21zaCcsICdtb2RlbC9tZXNoJ10sXG4gICAgWydtc2knLCAnYXBwbGljYXRpb24veC1tc2Rvd25sb2FkJ10sXG4gICAgWydtc2wnLCAnYXBwbGljYXRpb24vdm5kLm1vYml1cy5tc2wnXSxcbiAgICBbJ21zbScsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nXSxcbiAgICBbJ21zcCcsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nXSxcbiAgICBbJ21zdHknLCAnYXBwbGljYXRpb24vdm5kLm11dmVlLnN0eWxlJ10sXG4gICAgWydtdGwnLCAnbW9kZWwvbXRsJ10sXG4gICAgWydtdHMnLCAnbW9kZWwvdm5kLm10cyddLFxuICAgIFsnbXVzJywgJ2FwcGxpY2F0aW9uL3ZuZC5tdXNpY2lhbiddLFxuICAgIFsnbXVzZCcsICdhcHBsaWNhdGlvbi9tbXQtdXNkK3htbCddLFxuICAgIFsnbXVzaWN4bWwnLCAnYXBwbGljYXRpb24vdm5kLnJlY29yZGFyZS5tdXNpY3htbCt4bWwnXSxcbiAgICBbJ212YicsICdhcHBsaWNhdGlvbi94LW1zbWVkaWF2aWV3J10sXG4gICAgWydtdnQnLCAnYXBwbGljYXRpb24vdm5kLm1hcGJveC12ZWN0b3ItdGlsZSddLFxuICAgIFsnbXdmJywgJ2FwcGxpY2F0aW9uL3ZuZC5tZmVyJ10sXG4gICAgWydteGYnLCAnYXBwbGljYXRpb24vbXhmJ10sXG4gICAgWydteGwnLCAnYXBwbGljYXRpb24vdm5kLnJlY29yZGFyZS5tdXNpY3htbCddLFxuICAgIFsnbXhtZicsICdhdWRpby9tb2JpbGUteG1mJ10sXG4gICAgWydteG1sJywgJ2FwcGxpY2F0aW9uL3h2K3htbCddLFxuICAgIFsnbXhzJywgJ2FwcGxpY2F0aW9uL3ZuZC50cmlzY2FwZS5teHMnXSxcbiAgICBbJ214dScsICd2aWRlby92bmQubXBlZ3VybCddLFxuICAgIFsnbi1nYWdlJywgJ2FwcGxpY2F0aW9uL3ZuZC5ub2tpYS5uLWdhZ2Uuc3ltYmlhbi5pbnN0YWxsJ10sXG4gICAgWyduMycsICd0ZXh0L24zJ10sXG4gICAgWyduYicsICdhcHBsaWNhdGlvbi9tYXRoZW1hdGljYSddLFxuICAgIFsnbmJwJywgJ2FwcGxpY2F0aW9uL3ZuZC53b2xmcmFtLnBsYXllciddLFxuICAgIFsnbmMnLCAnYXBwbGljYXRpb24veC1uZXRjZGYnXSxcbiAgICBbJ25jeCcsICdhcHBsaWNhdGlvbi94LWR0Ym5jeCt4bWwnXSxcbiAgICBbJ25mbycsICd0ZXh0L3gtbmZvJ10sXG4gICAgWyduZ2RhdCcsICdhcHBsaWNhdGlvbi92bmQubm9raWEubi1nYWdlLmRhdGEnXSxcbiAgICBbJ25pdGYnLCAnYXBwbGljYXRpb24vdm5kLm5pdGYnXSxcbiAgICBbJ25sdScsICdhcHBsaWNhdGlvbi92bmQubmV1cm9sYW5ndWFnZS5ubHUnXSxcbiAgICBbJ25tbCcsICdhcHBsaWNhdGlvbi92bmQuZW5saXZlbiddLFxuICAgIFsnbm5kJywgJ2FwcGxpY2F0aW9uL3ZuZC5ub2JsZW5ldC1kaXJlY3RvcnknXSxcbiAgICBbJ25ucycsICdhcHBsaWNhdGlvbi92bmQubm9ibGVuZXQtc2VhbGVyJ10sXG4gICAgWydubncnLCAnYXBwbGljYXRpb24vdm5kLm5vYmxlbmV0LXdlYiddLFxuICAgIFsnbnB4JywgJ2ltYWdlL3ZuZC5uZXQtZnB4J10sXG4gICAgWyducScsICdhcHBsaWNhdGlvbi9uLXF1YWRzJ10sXG4gICAgWyduc2MnLCAnYXBwbGljYXRpb24veC1jb25mZXJlbmNlJ10sXG4gICAgWyduc2YnLCAnYXBwbGljYXRpb24vdm5kLmxvdHVzLW5vdGVzJ10sXG4gICAgWydudCcsICdhcHBsaWNhdGlvbi9uLXRyaXBsZXMnXSxcbiAgICBbJ250ZicsICdhcHBsaWNhdGlvbi92bmQubml0ZiddLFxuICAgIFsnbnVtYmVycycsICdhcHBsaWNhdGlvbi94LWl3b3JrLW51bWJlcnMtc2ZmbnVtYmVycyddLFxuICAgIFsnbnpiJywgJ2FwcGxpY2F0aW9uL3gtbnpiJ10sXG4gICAgWydvYTInLCAnYXBwbGljYXRpb24vdm5kLmZ1aml0c3Uub2FzeXMyJ10sXG4gICAgWydvYTMnLCAnYXBwbGljYXRpb24vdm5kLmZ1aml0c3Uub2FzeXMzJ10sXG4gICAgWydvYXMnLCAnYXBwbGljYXRpb24vdm5kLmZ1aml0c3Uub2FzeXMnXSxcbiAgICBbJ29iZCcsICdhcHBsaWNhdGlvbi94LW1zYmluZGVyJ10sXG4gICAgWydvYmd4JywgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVuYmxveC5nYW1lK3htbCddLFxuICAgIFsnb2JqJywgJ21vZGVsL29iaiddLFxuICAgIFsnb2RhJywgJ2FwcGxpY2F0aW9uL29kYSddLFxuICAgIFsnb2RiJywgJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZGF0YWJhc2UnXSxcbiAgICBbJ29kYycsICdhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmNoYXJ0J10sXG4gICAgWydvZGYnLCAnYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5mb3JtdWxhJ10sXG4gICAgWydvZGZ0JywgJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZm9ybXVsYS10ZW1wbGF0ZSddLFxuICAgIFsnb2RnJywgJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZ3JhcGhpY3MnXSxcbiAgICBbJ29kaScsICdhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmltYWdlJ10sXG4gICAgWydvZG0nLCAnYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC50ZXh0LW1hc3RlciddLFxuICAgIFsnb2RwJywgJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQucHJlc2VudGF0aW9uJ10sXG4gICAgWydvZHMnLCAnYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5zcHJlYWRzaGVldCddLFxuICAgIFsnb2R0JywgJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQudGV4dCddLFxuICAgIFsnb2dhJywgJ2F1ZGlvL29nZyddLFxuICAgIFsnb2dleCcsICdtb2RlbC92bmQub3BlbmdleCddLFxuICAgIFsnb2dnJywgJ2F1ZGlvL29nZyddLFxuICAgIFsnb2d2JywgJ3ZpZGVvL29nZyddLFxuICAgIFsnb2d4JywgJ2FwcGxpY2F0aW9uL29nZyddLFxuICAgIFsnb21kb2MnLCAnYXBwbGljYXRpb24vb21kb2MreG1sJ10sXG4gICAgWydvbmVwa2cnLCAnYXBwbGljYXRpb24vb25lbm90ZSddLFxuICAgIFsnb25ldG1wJywgJ2FwcGxpY2F0aW9uL29uZW5vdGUnXSxcbiAgICBbJ29uZXRvYycsICdhcHBsaWNhdGlvbi9vbmVub3RlJ10sXG4gICAgWydvbmV0b2MyJywgJ2FwcGxpY2F0aW9uL29uZW5vdGUnXSxcbiAgICBbJ29wZicsICdhcHBsaWNhdGlvbi9vZWJwcy1wYWNrYWdlK3htbCddLFxuICAgIFsnb3BtbCcsICd0ZXh0L3gtb3BtbCddLFxuICAgIFsnb3ByYycsICdhcHBsaWNhdGlvbi92bmQucGFsbSddLFxuICAgIFsnb3B1cycsICdhdWRpby9vZ2cnXSxcbiAgICBbJ29yZycsICd0ZXh0L3gtb3JnJ10sXG4gICAgWydvc2YnLCAnYXBwbGljYXRpb24vdm5kLnlhbWFoYS5vcGVuc2NvcmVmb3JtYXQnXSxcbiAgICBbJ29zZnB2ZycsICdhcHBsaWNhdGlvbi92bmQueWFtYWhhLm9wZW5zY29yZWZvcm1hdC5vc2ZwdmcreG1sJ10sXG4gICAgWydvc20nLCAnYXBwbGljYXRpb24vdm5kLm9wZW5zdHJlZXRtYXAuZGF0YSt4bWwnXSxcbiAgICBbJ290YycsICdhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmNoYXJ0LXRlbXBsYXRlJ10sXG4gICAgWydvdGYnLCAnZm9udC9vdGYnXSxcbiAgICBbJ290ZycsICdhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmdyYXBoaWNzLXRlbXBsYXRlJ10sXG4gICAgWydvdGgnLCAnYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC50ZXh0LXdlYiddLFxuICAgIFsnb3RpJywgJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuaW1hZ2UtdGVtcGxhdGUnXSxcbiAgICBbJ290cCcsICdhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnByZXNlbnRhdGlvbi10ZW1wbGF0ZSddLFxuICAgIFsnb3RzJywgJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuc3ByZWFkc2hlZXQtdGVtcGxhdGUnXSxcbiAgICBbJ290dCcsICdhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnRleHQtdGVtcGxhdGUnXSxcbiAgICBbJ292YScsICdhcHBsaWNhdGlvbi94LXZpcnR1YWxib3gtb3ZhJ10sXG4gICAgWydvdmYnLCAnYXBwbGljYXRpb24veC12aXJ0dWFsYm94LW92ZiddLFxuICAgIFsnb3dsJywgJ2FwcGxpY2F0aW9uL3JkZit4bWwnXSxcbiAgICBbJ294cHMnLCAnYXBwbGljYXRpb24vb3hwcyddLFxuICAgIFsnb3h0JywgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVub2ZmaWNlb3JnLmV4dGVuc2lvbiddLFxuICAgIFsncCcsICd0ZXh0L3gtcGFzY2FsJ10sXG4gICAgWydwN2EnLCAnYXBwbGljYXRpb24veC1wa2NzNy1zaWduYXR1cmUnXSxcbiAgICBbJ3A3YicsICdhcHBsaWNhdGlvbi94LXBrY3M3LWNlcnRpZmljYXRlcyddLFxuICAgIFsncDdjJywgJ2FwcGxpY2F0aW9uL3BrY3M3LW1pbWUnXSxcbiAgICBbJ3A3bScsICdhcHBsaWNhdGlvbi9wa2NzNy1taW1lJ10sXG4gICAgWydwN3InLCAnYXBwbGljYXRpb24veC1wa2NzNy1jZXJ0cmVxcmVzcCddLFxuICAgIFsncDdzJywgJ2FwcGxpY2F0aW9uL3BrY3M3LXNpZ25hdHVyZSddLFxuICAgIFsncDgnLCAnYXBwbGljYXRpb24vcGtjczgnXSxcbiAgICBbJ3AxMCcsICdhcHBsaWNhdGlvbi94LXBrY3MxMCddLFxuICAgIFsncDEyJywgJ2FwcGxpY2F0aW9uL3gtcGtjczEyJ10sXG4gICAgWydwYWMnLCAnYXBwbGljYXRpb24veC1ucy1wcm94eS1hdXRvY29uZmlnJ10sXG4gICAgWydwYWdlcycsICdhcHBsaWNhdGlvbi94LWl3b3JrLXBhZ2VzLXNmZnBhZ2VzJ10sXG4gICAgWydwYXMnLCAndGV4dC94LXBhc2NhbCddLFxuICAgIFsncGF3JywgJ2FwcGxpY2F0aW9uL3ZuZC5wYXdhYWZpbGUnXSxcbiAgICBbJ3BiZCcsICdhcHBsaWNhdGlvbi92bmQucG93ZXJidWlsZGVyNiddLFxuICAgIFsncGJtJywgJ2ltYWdlL3gtcG9ydGFibGUtYml0bWFwJ10sXG4gICAgWydwY2FwJywgJ2FwcGxpY2F0aW9uL3ZuZC50Y3BkdW1wLnBjYXAnXSxcbiAgICBbJ3BjZicsICdhcHBsaWNhdGlvbi94LWZvbnQtcGNmJ10sXG4gICAgWydwY2wnLCAnYXBwbGljYXRpb24vdm5kLmhwLXBjbCddLFxuICAgIFsncGNseGwnLCAnYXBwbGljYXRpb24vdm5kLmhwLXBjbHhsJ10sXG4gICAgWydwY3QnLCAnaW1hZ2UveC1waWN0J10sXG4gICAgWydwY3VybCcsICdhcHBsaWNhdGlvbi92bmQuY3VybC5wY3VybCddLFxuICAgIFsncGN4JywgJ2ltYWdlL3gtcGN4J10sXG4gICAgWydwZGInLCAnYXBwbGljYXRpb24veC1waWxvdCddLFxuICAgIFsncGRlJywgJ3RleHQveC1wcm9jZXNzaW5nJ10sXG4gICAgWydwZGYnLCAnYXBwbGljYXRpb24vcGRmJ10sXG4gICAgWydwZW0nLCAnYXBwbGljYXRpb24veC14NTA5LXVzZXItY2VydCddLFxuICAgIFsncGZhJywgJ2FwcGxpY2F0aW9uL3gtZm9udC10eXBlMSddLFxuICAgIFsncGZiJywgJ2FwcGxpY2F0aW9uL3gtZm9udC10eXBlMSddLFxuICAgIFsncGZtJywgJ2FwcGxpY2F0aW9uL3gtZm9udC10eXBlMSddLFxuICAgIFsncGZyJywgJ2FwcGxpY2F0aW9uL2ZvbnQtdGRwZnInXSxcbiAgICBbJ3BmeCcsICdhcHBsaWNhdGlvbi94LXBrY3MxMiddLFxuICAgIFsncGdtJywgJ2ltYWdlL3gtcG9ydGFibGUtZ3JheW1hcCddLFxuICAgIFsncGduJywgJ2FwcGxpY2F0aW9uL3gtY2hlc3MtcGduJ10sXG4gICAgWydwZ3AnLCAnYXBwbGljYXRpb24vcGdwJ10sXG4gICAgWydwaHAnLCAnYXBwbGljYXRpb24veC1odHRwZC1waHAnXSxcbiAgICBbJ3BocDMnLCAnYXBwbGljYXRpb24veC1odHRwZC1waHAnXSxcbiAgICBbJ3BocDQnLCAnYXBwbGljYXRpb24veC1odHRwZC1waHAnXSxcbiAgICBbJ3BocHMnLCAnYXBwbGljYXRpb24veC1odHRwZC1waHAtc291cmNlJ10sXG4gICAgWydwaHRtbCcsICdhcHBsaWNhdGlvbi94LWh0dHBkLXBocCddLFxuICAgIFsncGljJywgJ2ltYWdlL3gtcGljdCddLFxuICAgIFsncGtnJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSddLFxuICAgIFsncGtpJywgJ2FwcGxpY2F0aW9uL3BraXhjbXAnXSxcbiAgICBbJ3BraXBhdGgnLCAnYXBwbGljYXRpb24vcGtpeC1wa2lwYXRoJ10sXG4gICAgWydwa3Bhc3MnLCAnYXBwbGljYXRpb24vdm5kLmFwcGxlLnBrcGFzcyddLFxuICAgIFsncGwnLCAnYXBwbGljYXRpb24veC1wZXJsJ10sXG4gICAgWydwbGInLCAnYXBwbGljYXRpb24vdm5kLjNncHAucGljLWJ3LWxhcmdlJ10sXG4gICAgWydwbGMnLCAnYXBwbGljYXRpb24vdm5kLm1vYml1cy5wbGMnXSxcbiAgICBbJ3BsZicsICdhcHBsaWNhdGlvbi92bmQucG9ja2V0bGVhcm4nXSxcbiAgICBbJ3BscycsICdhcHBsaWNhdGlvbi9wbHMreG1sJ10sXG4gICAgWydwbScsICdhcHBsaWNhdGlvbi94LXBlcmwnXSxcbiAgICBbJ3BtbCcsICdhcHBsaWNhdGlvbi92bmQuY3RjLXBvc21sJ10sXG4gICAgWydwbmcnLCAnaW1hZ2UvcG5nJ10sXG4gICAgWydwbm0nLCAnaW1hZ2UveC1wb3J0YWJsZS1hbnltYXAnXSxcbiAgICBbJ3BvcnRwa2cnLCAnYXBwbGljYXRpb24vdm5kLm1hY3BvcnRzLnBvcnRwa2cnXSxcbiAgICBbJ3BvdCcsICdhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludCddLFxuICAgIFsncG90bScsICdhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludC5wcmVzZW50YXRpb24ubWFjcm9FbmFibGVkLjEyJ10sXG4gICAgWydwb3R4JywgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC50ZW1wbGF0ZSddLFxuICAgIFsncHBhJywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50J10sXG4gICAgWydwcGFtJywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50LmFkZGluLm1hY3JvRW5hYmxlZC4xMiddLFxuICAgIFsncHBkJywgJ2FwcGxpY2F0aW9uL3ZuZC5jdXBzLXBwZCddLFxuICAgIFsncHBtJywgJ2ltYWdlL3gtcG9ydGFibGUtcGl4bWFwJ10sXG4gICAgWydwcHMnLCAnYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQnXSxcbiAgICBbJ3Bwc20nLCAnYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQuc2xpZGVzaG93Lm1hY3JvRW5hYmxlZC4xMiddLFxuICAgIFsncHBzeCcsICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwuc2xpZGVzaG93J10sXG4gICAgWydwcHQnLCAnYXBwbGljYXRpb24vcG93ZXJwb2ludCddLFxuICAgIFsncHB0bScsICdhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludC5wcmVzZW50YXRpb24ubWFjcm9FbmFibGVkLjEyJ10sXG4gICAgWydwcHR4JywgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5wcmVzZW50YXRpb24nXSxcbiAgICBbJ3BxYScsICdhcHBsaWNhdGlvbi92bmQucGFsbSddLFxuICAgIFsncHJjJywgJ2FwcGxpY2F0aW9uL3gtcGlsb3QnXSxcbiAgICBbJ3ByZScsICdhcHBsaWNhdGlvbi92bmQubG90dXMtZnJlZWxhbmNlJ10sXG4gICAgWydwcmYnLCAnYXBwbGljYXRpb24vcGljcy1ydWxlcyddLFxuICAgIFsncHJvdngnLCAnYXBwbGljYXRpb24vcHJvdmVuYW5jZSt4bWwnXSxcbiAgICBbJ3BzJywgJ2FwcGxpY2F0aW9uL3Bvc3RzY3JpcHQnXSxcbiAgICBbJ3BzYicsICdhcHBsaWNhdGlvbi92bmQuM2dwcC5waWMtYnctc21hbGwnXSxcbiAgICBbJ3BzZCcsICdhcHBsaWNhdGlvbi94LXBob3Rvc2hvcCddLFxuICAgIFsncHNmJywgJ2FwcGxpY2F0aW9uL3gtZm9udC1saW51eC1wc2YnXSxcbiAgICBbJ3Bza2N4bWwnLCAnYXBwbGljYXRpb24vcHNrYyt4bWwnXSxcbiAgICBbJ3B0aScsICdpbWFnZS9wcnMucHRpJ10sXG4gICAgWydwdGlkJywgJ2FwcGxpY2F0aW9uL3ZuZC5wdmkucHRpZDEnXSxcbiAgICBbJ3B1YicsICdhcHBsaWNhdGlvbi94LW1zcHVibGlzaGVyJ10sXG4gICAgWydwdmInLCAnYXBwbGljYXRpb24vdm5kLjNncHAucGljLWJ3LXZhciddLFxuICAgIFsncHduJywgJ2FwcGxpY2F0aW9uL3ZuZC4zbS5wb3N0LWl0LW5vdGVzJ10sXG4gICAgWydweWEnLCAnYXVkaW8vdm5kLm1zLXBsYXlyZWFkeS5tZWRpYS5weWEnXSxcbiAgICBbJ3B5dicsICd2aWRlby92bmQubXMtcGxheXJlYWR5Lm1lZGlhLnB5diddLFxuICAgIFsncWFtJywgJ2FwcGxpY2F0aW9uL3ZuZC5lcHNvbi5xdWlja2FuaW1lJ10sXG4gICAgWydxYm8nLCAnYXBwbGljYXRpb24vdm5kLmludHUucWJvJ10sXG4gICAgWydxZngnLCAnYXBwbGljYXRpb24vdm5kLmludHUucWZ4J10sXG4gICAgWydxcHMnLCAnYXBwbGljYXRpb24vdm5kLnB1Ymxpc2hhcmUtZGVsdGEtdHJlZSddLFxuICAgIFsncXQnLCAndmlkZW8vcXVpY2t0aW1lJ10sXG4gICAgWydxd2QnLCAnYXBwbGljYXRpb24vdm5kLnF1YXJrLnF1YXJreHByZXNzJ10sXG4gICAgWydxd3QnLCAnYXBwbGljYXRpb24vdm5kLnF1YXJrLnF1YXJreHByZXNzJ10sXG4gICAgWydxeGInLCAnYXBwbGljYXRpb24vdm5kLnF1YXJrLnF1YXJreHByZXNzJ10sXG4gICAgWydxeGQnLCAnYXBwbGljYXRpb24vdm5kLnF1YXJrLnF1YXJreHByZXNzJ10sXG4gICAgWydxeGwnLCAnYXBwbGljYXRpb24vdm5kLnF1YXJrLnF1YXJreHByZXNzJ10sXG4gICAgWydxeHQnLCAnYXBwbGljYXRpb24vdm5kLnF1YXJrLnF1YXJreHByZXNzJ10sXG4gICAgWydyYScsICdhdWRpby94LXJlYWxhdWRpbyddLFxuICAgIFsncmFtJywgJ2F1ZGlvL3gtcG4tcmVhbGF1ZGlvJ10sXG4gICAgWydyYW1sJywgJ2FwcGxpY2F0aW9uL3JhbWwreWFtbCddLFxuICAgIFsncmFwZCcsICdhcHBsaWNhdGlvbi9yb3V0ZS1hcGQreG1sJ10sXG4gICAgWydyYXInLCAnYXBwbGljYXRpb24veC1yYXInXSxcbiAgICBbJ3JhcycsICdpbWFnZS94LWNtdS1yYXN0ZXInXSxcbiAgICBbJ3JjcHJvZmlsZScsICdhcHBsaWNhdGlvbi92bmQuaXB1bnBsdWdnZWQucmNwcm9maWxlJ10sXG4gICAgWydyZGYnLCAnYXBwbGljYXRpb24vcmRmK3htbCddLFxuICAgIFsncmR6JywgJ2FwcGxpY2F0aW9uL3ZuZC5kYXRhLXZpc2lvbi5yZHonXSxcbiAgICBbJ3JlbG8nLCAnYXBwbGljYXRpb24vcDJwLW92ZXJsYXkreG1sJ10sXG4gICAgWydyZXAnLCAnYXBwbGljYXRpb24vdm5kLmJ1c2luZXNzb2JqZWN0cyddLFxuICAgIFsncmVzJywgJ2FwcGxpY2F0aW9uL3gtZHRicmVzb3VyY2UreG1sJ10sXG4gICAgWydyZ2InLCAnaW1hZ2UveC1yZ2InXSxcbiAgICBbJ3JpZicsICdhcHBsaWNhdGlvbi9yZWdpbmZvK3htbCddLFxuICAgIFsncmlwJywgJ2F1ZGlvL3ZuZC5yaXAnXSxcbiAgICBbJ3JpcycsICdhcHBsaWNhdGlvbi94LXJlc2VhcmNoLWluZm8tc3lzdGVtcyddLFxuICAgIFsncmwnLCAnYXBwbGljYXRpb24vcmVzb3VyY2UtbGlzdHMreG1sJ10sXG4gICAgWydybGMnLCAnaW1hZ2Uvdm5kLmZ1aml4ZXJveC5lZG1pY3MtcmxjJ10sXG4gICAgWydybGQnLCAnYXBwbGljYXRpb24vcmVzb3VyY2UtbGlzdHMtZGlmZit4bWwnXSxcbiAgICBbJ3JtJywgJ2F1ZGlvL3gtcG4tcmVhbGF1ZGlvJ10sXG4gICAgWydybWknLCAnYXVkaW8vbWlkaSddLFxuICAgIFsncm1wJywgJ2F1ZGlvL3gtcG4tcmVhbGF1ZGlvLXBsdWdpbiddLFxuICAgIFsncm1zJywgJ2FwcGxpY2F0aW9uL3ZuZC5qY3AuamF2YW1lLm1pZGxldC1ybXMnXSxcbiAgICBbJ3JtdmInLCAnYXBwbGljYXRpb24vdm5kLnJuLXJlYWxtZWRpYS12YnInXSxcbiAgICBbJ3JuYycsICdhcHBsaWNhdGlvbi9yZWxheC1uZy1jb21wYWN0LXN5bnRheCddLFxuICAgIFsncm5nJywgJ2FwcGxpY2F0aW9uL3htbCddLFxuICAgIFsncm9hJywgJ2FwcGxpY2F0aW9uL3Jwa2ktcm9hJ10sXG4gICAgWydyb2ZmJywgJ3RleHQvdHJvZmYnXSxcbiAgICBbJ3JwOScsICdhcHBsaWNhdGlvbi92bmQuY2xvYW50by5ycDknXSxcbiAgICBbJ3JwbScsICdhdWRpby94LXBuLXJlYWxhdWRpby1wbHVnaW4nXSxcbiAgICBbJ3Jwc3MnLCAnYXBwbGljYXRpb24vdm5kLm5va2lhLnJhZGlvLXByZXNldHMnXSxcbiAgICBbJ3Jwc3QnLCAnYXBwbGljYXRpb24vdm5kLm5va2lhLnJhZGlvLXByZXNldCddLFxuICAgIFsncnEnLCAnYXBwbGljYXRpb24vc3BhcnFsLXF1ZXJ5J10sXG4gICAgWydycycsICdhcHBsaWNhdGlvbi9ybHMtc2VydmljZXMreG1sJ10sXG4gICAgWydyc2EnLCAnYXBwbGljYXRpb24veC1wa2NzNyddLFxuICAgIFsncnNhdCcsICdhcHBsaWNhdGlvbi9hdHNjLXJzYXQreG1sJ10sXG4gICAgWydyc2QnLCAnYXBwbGljYXRpb24vcnNkK3htbCddLFxuICAgIFsncnNoZWV0JywgJ2FwcGxpY2F0aW9uL3VyYy1yZXNzaGVldCt4bWwnXSxcbiAgICBbJ3JzcycsICdhcHBsaWNhdGlvbi9yc3MreG1sJ10sXG4gICAgWydydGYnLCAndGV4dC9ydGYnXSxcbiAgICBbJ3J0eCcsICd0ZXh0L3JpY2h0ZXh0J10sXG4gICAgWydydW4nLCAnYXBwbGljYXRpb24veC1tYWtlc2VsZiddLFxuICAgIFsncnVzZCcsICdhcHBsaWNhdGlvbi9yb3V0ZS11c2QreG1sJ10sXG4gICAgWydydicsICd2aWRlby92bmQucm4tcmVhbHZpZGVvJ10sXG4gICAgWydzJywgJ3RleHQveC1hc20nXSxcbiAgICBbJ3MzbScsICdhdWRpby9zM20nXSxcbiAgICBbJ3NhZicsICdhcHBsaWNhdGlvbi92bmQueWFtYWhhLnNtYWYtYXVkaW8nXSxcbiAgICBbJ3Nhc3MnLCAndGV4dC94LXNhc3MnXSxcbiAgICBbJ3NibWwnLCAnYXBwbGljYXRpb24vc2JtbCt4bWwnXSxcbiAgICBbJ3NjJywgJ2FwcGxpY2F0aW9uL3ZuZC5pYm0uc2VjdXJlLWNvbnRhaW5lciddLFxuICAgIFsnc2NkJywgJ2FwcGxpY2F0aW9uL3gtbXNzY2hlZHVsZSddLFxuICAgIFsnc2NtJywgJ2FwcGxpY2F0aW9uL3ZuZC5sb3R1cy1zY3JlZW5jYW0nXSxcbiAgICBbJ3NjcScsICdhcHBsaWNhdGlvbi9zY3ZwLWN2LXJlcXVlc3QnXSxcbiAgICBbJ3NjcycsICdhcHBsaWNhdGlvbi9zY3ZwLWN2LXJlc3BvbnNlJ10sXG4gICAgWydzY3NzJywgJ3RleHQveC1zY3NzJ10sXG4gICAgWydzY3VybCcsICd0ZXh0L3ZuZC5jdXJsLnNjdXJsJ10sXG4gICAgWydzZGEnLCAnYXBwbGljYXRpb24vdm5kLnN0YXJkaXZpc2lvbi5kcmF3J10sXG4gICAgWydzZGMnLCAnYXBwbGljYXRpb24vdm5kLnN0YXJkaXZpc2lvbi5jYWxjJ10sXG4gICAgWydzZGQnLCAnYXBwbGljYXRpb24vdm5kLnN0YXJkaXZpc2lvbi5pbXByZXNzJ10sXG4gICAgWydzZGtkJywgJ2FwcGxpY2F0aW9uL3ZuZC5zb2xlbnQuc2RrbSt4bWwnXSxcbiAgICBbJ3Nka20nLCAnYXBwbGljYXRpb24vdm5kLnNvbGVudC5zZGttK3htbCddLFxuICAgIFsnc2RwJywgJ2FwcGxpY2F0aW9uL3NkcCddLFxuICAgIFsnc2R3JywgJ2FwcGxpY2F0aW9uL3ZuZC5zdGFyZGl2aXNpb24ud3JpdGVyJ10sXG4gICAgWydzZWEnLCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJ10sXG4gICAgWydzZWUnLCAnYXBwbGljYXRpb24vdm5kLnNlZW1haWwnXSxcbiAgICBbJ3NlZWQnLCAnYXBwbGljYXRpb24vdm5kLmZkc24uc2VlZCddLFxuICAgIFsnc2VtYScsICdhcHBsaWNhdGlvbi92bmQuc2VtYSddLFxuICAgIFsnc2VtZCcsICdhcHBsaWNhdGlvbi92bmQuc2VtZCddLFxuICAgIFsnc2VtZicsICdhcHBsaWNhdGlvbi92bmQuc2VtZiddLFxuICAgIFsnc2VubWx4JywgJ2FwcGxpY2F0aW9uL3Nlbm1sK3htbCddLFxuICAgIFsnc2Vuc21seCcsICdhcHBsaWNhdGlvbi9zZW5zbWwreG1sJ10sXG4gICAgWydzZXInLCAnYXBwbGljYXRpb24vamF2YS1zZXJpYWxpemVkLW9iamVjdCddLFxuICAgIFsnc2V0cGF5JywgJ2FwcGxpY2F0aW9uL3NldC1wYXltZW50LWluaXRpYXRpb24nXSxcbiAgICBbJ3NldHJlZycsICdhcHBsaWNhdGlvbi9zZXQtcmVnaXN0cmF0aW9uLWluaXRpYXRpb24nXSxcbiAgICBbJ3NmZC1oZHN0eCcsICdhcHBsaWNhdGlvbi92bmQuaHlkcm9zdGF0aXguc29mLWRhdGEnXSxcbiAgICBbJ3NmcycsICdhcHBsaWNhdGlvbi92bmQuc3BvdGZpcmUuc2ZzJ10sXG4gICAgWydzZnYnLCAndGV4dC94LXNmdiddLFxuICAgIFsnc2dpJywgJ2ltYWdlL3NnaSddLFxuICAgIFsnc2dsJywgJ2FwcGxpY2F0aW9uL3ZuZC5zdGFyZGl2aXNpb24ud3JpdGVyLWdsb2JhbCddLFxuICAgIFsnc2dtJywgJ3RleHQvc2dtbCddLFxuICAgIFsnc2dtbCcsICd0ZXh0L3NnbWwnXSxcbiAgICBbJ3NoJywgJ2FwcGxpY2F0aW9uL3gtc2gnXSxcbiAgICBbJ3NoYXInLCAnYXBwbGljYXRpb24veC1zaGFyJ10sXG4gICAgWydzaGV4JywgJ3RleHQvc2hleCddLFxuICAgIFsnc2hmJywgJ2FwcGxpY2F0aW9uL3NoZit4bWwnXSxcbiAgICBbJ3NodG1sJywgJ3RleHQvaHRtbCddLFxuICAgIFsnc2lkJywgJ2ltYWdlL3gtbXJzaWQtaW1hZ2UnXSxcbiAgICBbJ3NpZXZlJywgJ2FwcGxpY2F0aW9uL3NpZXZlJ10sXG4gICAgWydzaWcnLCAnYXBwbGljYXRpb24vcGdwLXNpZ25hdHVyZSddLFxuICAgIFsnc2lsJywgJ2F1ZGlvL3NpbGsnXSxcbiAgICBbJ3NpbG8nLCAnbW9kZWwvbWVzaCddLFxuICAgIFsnc2lzJywgJ2FwcGxpY2F0aW9uL3ZuZC5zeW1iaWFuLmluc3RhbGwnXSxcbiAgICBbJ3Npc3gnLCAnYXBwbGljYXRpb24vdm5kLnN5bWJpYW4uaW5zdGFsbCddLFxuICAgIFsnc2l0JywgJ2FwcGxpY2F0aW9uL3gtc3R1ZmZpdCddLFxuICAgIFsnc2l0eCcsICdhcHBsaWNhdGlvbi94LXN0dWZmaXR4J10sXG4gICAgWydzaXYnLCAnYXBwbGljYXRpb24vc2lldmUnXSxcbiAgICBbJ3NrZCcsICdhcHBsaWNhdGlvbi92bmQua29hbiddLFxuICAgIFsnc2ttJywgJ2FwcGxpY2F0aW9uL3ZuZC5rb2FuJ10sXG4gICAgWydza3AnLCAnYXBwbGljYXRpb24vdm5kLmtvYW4nXSxcbiAgICBbJ3NrdCcsICdhcHBsaWNhdGlvbi92bmQua29hbiddLFxuICAgIFsnc2xkbScsICdhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludC5zbGlkZS5tYWNyb2VuYWJsZWQuMTInXSxcbiAgICBbJ3NsZHgnLCAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnNsaWRlJ10sXG4gICAgWydzbGltJywgJ3RleHQvc2xpbSddLFxuICAgIFsnc2xtJywgJ3RleHQvc2xpbSddLFxuICAgIFsnc2xzJywgJ2FwcGxpY2F0aW9uL3JvdXRlLXMtdHNpZCt4bWwnXSxcbiAgICBbJ3NsdCcsICdhcHBsaWNhdGlvbi92bmQuZXBzb24uc2FsdCddLFxuICAgIFsnc20nLCAnYXBwbGljYXRpb24vdm5kLnN0ZXBtYW5pYS5zdGVwY2hhcnQnXSxcbiAgICBbJ3NtZicsICdhcHBsaWNhdGlvbi92bmQuc3RhcmRpdmlzaW9uLm1hdGgnXSxcbiAgICBbJ3NtaScsICdhcHBsaWNhdGlvbi9zbWlsJ10sXG4gICAgWydzbWlsJywgJ2FwcGxpY2F0aW9uL3NtaWwnXSxcbiAgICBbJ3NtdicsICd2aWRlby94LXNtdiddLFxuICAgIFsnc216aXAnLCAnYXBwbGljYXRpb24vdm5kLnN0ZXBtYW5pYS5wYWNrYWdlJ10sXG4gICAgWydzbmQnLCAnYXVkaW8vYmFzaWMnXSxcbiAgICBbJ3NuZicsICdhcHBsaWNhdGlvbi94LWZvbnQtc25mJ10sXG4gICAgWydzbycsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nXSxcbiAgICBbJ3NwYycsICdhcHBsaWNhdGlvbi94LXBrY3M3LWNlcnRpZmljYXRlcyddLFxuICAgIFsnc3BkeCcsICd0ZXh0L3NwZHgnXSxcbiAgICBbJ3NwZicsICdhcHBsaWNhdGlvbi92bmQueWFtYWhhLnNtYWYtcGhyYXNlJ10sXG4gICAgWydzcGwnLCAnYXBwbGljYXRpb24veC1mdXR1cmVzcGxhc2gnXSxcbiAgICBbJ3Nwb3QnLCAndGV4dC92bmQuaW4zZC5zcG90J10sXG4gICAgWydzcHAnLCAnYXBwbGljYXRpb24vc2N2cC12cC1yZXNwb25zZSddLFxuICAgIFsnc3BxJywgJ2FwcGxpY2F0aW9uL3NjdnAtdnAtcmVxdWVzdCddLFxuICAgIFsnc3B4JywgJ2F1ZGlvL29nZyddLFxuICAgIFsnc3FsJywgJ2FwcGxpY2F0aW9uL3gtc3FsJ10sXG4gICAgWydzcmMnLCAnYXBwbGljYXRpb24veC13YWlzLXNvdXJjZSddLFxuICAgIFsnc3J0JywgJ2FwcGxpY2F0aW9uL3gtc3VicmlwJ10sXG4gICAgWydzcnUnLCAnYXBwbGljYXRpb24vc3J1K3htbCddLFxuICAgIFsnc3J4JywgJ2FwcGxpY2F0aW9uL3NwYXJxbC1yZXN1bHRzK3htbCddLFxuICAgIFsnc3NkbCcsICdhcHBsaWNhdGlvbi9zc2RsK3htbCddLFxuICAgIFsnc3NlJywgJ2FwcGxpY2F0aW9uL3ZuZC5rb2Rhay1kZXNjcmlwdG9yJ10sXG4gICAgWydzc2YnLCAnYXBwbGljYXRpb24vdm5kLmVwc29uLnNzZiddLFxuICAgIFsnc3NtbCcsICdhcHBsaWNhdGlvbi9zc21sK3htbCddLFxuICAgIFsnc3N0JywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSddLFxuICAgIFsnc3QnLCAnYXBwbGljYXRpb24vdm5kLnNhaWxpbmd0cmFja2VyLnRyYWNrJ10sXG4gICAgWydzdGMnLCAnYXBwbGljYXRpb24vdm5kLnN1bi54bWwuY2FsYy50ZW1wbGF0ZSddLFxuICAgIFsnc3RkJywgJ2FwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLmRyYXcudGVtcGxhdGUnXSxcbiAgICBbJ3N0ZicsICdhcHBsaWNhdGlvbi92bmQud3Quc3RmJ10sXG4gICAgWydzdGknLCAnYXBwbGljYXRpb24vdm5kLnN1bi54bWwuaW1wcmVzcy50ZW1wbGF0ZSddLFxuICAgIFsnc3RrJywgJ2FwcGxpY2F0aW9uL2h5cGVyc3R1ZGlvJ10sXG4gICAgWydzdGwnLCAnbW9kZWwvc3RsJ10sXG4gICAgWydzdHB4JywgJ21vZGVsL3N0ZXAreG1sJ10sXG4gICAgWydzdHB4eicsICdtb2RlbC9zdGVwLXhtbCt6aXAnXSxcbiAgICBbJ3N0cHonLCAnbW9kZWwvc3RlcCt6aXAnXSxcbiAgICBbJ3N0cicsICdhcHBsaWNhdGlvbi92bmQucGcuZm9ybWF0J10sXG4gICAgWydzdHcnLCAnYXBwbGljYXRpb24vdm5kLnN1bi54bWwud3JpdGVyLnRlbXBsYXRlJ10sXG4gICAgWydzdHlsJywgJ3RleHQvc3R5bHVzJ10sXG4gICAgWydzdHlsdXMnLCAndGV4dC9zdHlsdXMnXSxcbiAgICBbJ3N1YicsICd0ZXh0L3ZuZC5kdmIuc3VidGl0bGUnXSxcbiAgICBbJ3N1cycsICdhcHBsaWNhdGlvbi92bmQuc3VzLWNhbGVuZGFyJ10sXG4gICAgWydzdXNwJywgJ2FwcGxpY2F0aW9uL3ZuZC5zdXMtY2FsZW5kYXInXSxcbiAgICBbJ3N2NGNwaW8nLCAnYXBwbGljYXRpb24veC1zdjRjcGlvJ10sXG4gICAgWydzdjRjcmMnLCAnYXBwbGljYXRpb24veC1zdjRjcmMnXSxcbiAgICBbJ3N2YycsICdhcHBsaWNhdGlvbi92bmQuZHZiLnNlcnZpY2UnXSxcbiAgICBbJ3N2ZCcsICdhcHBsaWNhdGlvbi92bmQuc3ZkJ10sXG4gICAgWydzdmcnLCAnaW1hZ2Uvc3ZnK3htbCddLFxuICAgIFsnc3ZneicsICdpbWFnZS9zdmcreG1sJ10sXG4gICAgWydzd2EnLCAnYXBwbGljYXRpb24veC1kaXJlY3RvciddLFxuICAgIFsnc3dmJywgJ2FwcGxpY2F0aW9uL3gtc2hvY2t3YXZlLWZsYXNoJ10sXG4gICAgWydzd2knLCAnYXBwbGljYXRpb24vdm5kLmFyaXN0YW5ldHdvcmtzLnN3aSddLFxuICAgIFsnc3dpZHRhZycsICdhcHBsaWNhdGlvbi9zd2lkK3htbCddLFxuICAgIFsnc3hjJywgJ2FwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLmNhbGMnXSxcbiAgICBbJ3N4ZCcsICdhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC5kcmF3J10sXG4gICAgWydzeGcnLCAnYXBwbGljYXRpb24vdm5kLnN1bi54bWwud3JpdGVyLmdsb2JhbCddLFxuICAgIFsnc3hpJywgJ2FwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLmltcHJlc3MnXSxcbiAgICBbJ3N4bScsICdhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC5tYXRoJ10sXG4gICAgWydzeHcnLCAnYXBwbGljYXRpb24vdm5kLnN1bi54bWwud3JpdGVyJ10sXG4gICAgWyd0JywgJ3RleHQvdHJvZmYnXSxcbiAgICBbJ3QzJywgJ2FwcGxpY2F0aW9uL3gtdDN2bS1pbWFnZSddLFxuICAgIFsndDM4JywgJ2ltYWdlL3QzOCddLFxuICAgIFsndGFnbGV0JywgJ2FwcGxpY2F0aW9uL3ZuZC5teW5mYyddLFxuICAgIFsndGFvJywgJ2FwcGxpY2F0aW9uL3ZuZC50YW8uaW50ZW50LW1vZHVsZS1hcmNoaXZlJ10sXG4gICAgWyd0YXAnLCAnaW1hZ2Uvdm5kLnRlbmNlbnQudGFwJ10sXG4gICAgWyd0YXInLCAnYXBwbGljYXRpb24veC10YXInXSxcbiAgICBbJ3RjYXAnLCAnYXBwbGljYXRpb24vdm5kLjNncHAyLnRjYXAnXSxcbiAgICBbJ3RjbCcsICdhcHBsaWNhdGlvbi94LXRjbCddLFxuICAgIFsndGQnLCAnYXBwbGljYXRpb24vdXJjLXRhcmdldGRlc2MreG1sJ10sXG4gICAgWyd0ZWFjaGVyJywgJ2FwcGxpY2F0aW9uL3ZuZC5zbWFydC50ZWFjaGVyJ10sXG4gICAgWyd0ZWknLCAnYXBwbGljYXRpb24vdGVpK3htbCddLFxuICAgIFsndGVpY29ycHVzJywgJ2FwcGxpY2F0aW9uL3RlaSt4bWwnXSxcbiAgICBbJ3RleCcsICdhcHBsaWNhdGlvbi94LXRleCddLFxuICAgIFsndGV4aScsICdhcHBsaWNhdGlvbi94LXRleGluZm8nXSxcbiAgICBbJ3RleGluZm8nLCAnYXBwbGljYXRpb24veC10ZXhpbmZvJ10sXG4gICAgWyd0ZXh0JywgJ3RleHQvcGxhaW4nXSxcbiAgICBbJ3RmaScsICdhcHBsaWNhdGlvbi90aHJhdWQreG1sJ10sXG4gICAgWyd0Zm0nLCAnYXBwbGljYXRpb24veC10ZXgtdGZtJ10sXG4gICAgWyd0ZngnLCAnaW1hZ2UvdGlmZi1meCddLFxuICAgIFsndGdhJywgJ2ltYWdlL3gtdGdhJ10sXG4gICAgWyd0Z3onLCAnYXBwbGljYXRpb24veC10YXInXSxcbiAgICBbJ3RobXgnLCAnYXBwbGljYXRpb24vdm5kLm1zLW9mZmljZXRoZW1lJ10sXG4gICAgWyd0aWYnLCAnaW1hZ2UvdGlmZiddLFxuICAgIFsndGlmZicsICdpbWFnZS90aWZmJ10sXG4gICAgWyd0aycsICdhcHBsaWNhdGlvbi94LXRjbCddLFxuICAgIFsndG1vJywgJ2FwcGxpY2F0aW9uL3ZuZC50bW9iaWxlLWxpdmV0diddLFxuICAgIFsndG9tbCcsICdhcHBsaWNhdGlvbi90b21sJ10sXG4gICAgWyd0b3JyZW50JywgJ2FwcGxpY2F0aW9uL3gtYml0dG9ycmVudCddLFxuICAgIFsndHBsJywgJ2FwcGxpY2F0aW9uL3ZuZC5ncm9vdmUtdG9vbC10ZW1wbGF0ZSddLFxuICAgIFsndHB0JywgJ2FwcGxpY2F0aW9uL3ZuZC50cmlkLnRwdCddLFxuICAgIFsndHInLCAndGV4dC90cm9mZiddLFxuICAgIFsndHJhJywgJ2FwcGxpY2F0aW9uL3ZuZC50cnVlYXBwJ10sXG4gICAgWyd0cmlnJywgJ2FwcGxpY2F0aW9uL3RyaWcnXSxcbiAgICBbJ3RybScsICdhcHBsaWNhdGlvbi94LW1zdGVybWluYWwnXSxcbiAgICBbJ3RzJywgJ3ZpZGVvL21wMnQnXSxcbiAgICBbJ3RzZCcsICdhcHBsaWNhdGlvbi90aW1lc3RhbXBlZC1kYXRhJ10sXG4gICAgWyd0c3YnLCAndGV4dC90YWItc2VwYXJhdGVkLXZhbHVlcyddLFxuICAgIFsndHRjJywgJ2ZvbnQvY29sbGVjdGlvbiddLFxuICAgIFsndHRmJywgJ2ZvbnQvdHRmJ10sXG4gICAgWyd0dGwnLCAndGV4dC90dXJ0bGUnXSxcbiAgICBbJ3R0bWwnLCAnYXBwbGljYXRpb24vdHRtbCt4bWwnXSxcbiAgICBbJ3R3ZCcsICdhcHBsaWNhdGlvbi92bmQuc2ltdGVjaC1taW5kbWFwcGVyJ10sXG4gICAgWyd0d2RzJywgJ2FwcGxpY2F0aW9uL3ZuZC5zaW10ZWNoLW1pbmRtYXBwZXInXSxcbiAgICBbJ3R4ZCcsICdhcHBsaWNhdGlvbi92bmQuZ2Vub21hdGl4LnR1eGVkbyddLFxuICAgIFsndHhmJywgJ2FwcGxpY2F0aW9uL3ZuZC5tb2JpdXMudHhmJ10sXG4gICAgWyd0eHQnLCAndGV4dC9wbGFpbiddLFxuICAgIFsndThkc24nLCAnbWVzc2FnZS9nbG9iYWwtZGVsaXZlcnktc3RhdHVzJ10sXG4gICAgWyd1OGhkcicsICdtZXNzYWdlL2dsb2JhbC1oZWFkZXJzJ10sXG4gICAgWyd1OG1kbicsICdtZXNzYWdlL2dsb2JhbC1kaXNwb3NpdGlvbi1ub3RpZmljYXRpb24nXSxcbiAgICBbJ3U4bXNnJywgJ21lc3NhZ2UvZ2xvYmFsJ10sXG4gICAgWyd1MzInLCAnYXBwbGljYXRpb24veC1hdXRob3J3YXJlLWJpbiddLFxuICAgIFsndWJqJywgJ2FwcGxpY2F0aW9uL3VianNvbiddLFxuICAgIFsndWRlYicsICdhcHBsaWNhdGlvbi94LWRlYmlhbi1wYWNrYWdlJ10sXG4gICAgWyd1ZmQnLCAnYXBwbGljYXRpb24vdm5kLnVmZGwnXSxcbiAgICBbJ3VmZGwnLCAnYXBwbGljYXRpb24vdm5kLnVmZGwnXSxcbiAgICBbJ3VseCcsICdhcHBsaWNhdGlvbi94LWdsdWx4J10sXG4gICAgWyd1bWonLCAnYXBwbGljYXRpb24vdm5kLnVtYWppbiddLFxuICAgIFsndW5pdHl3ZWInLCAnYXBwbGljYXRpb24vdm5kLnVuaXR5J10sXG4gICAgWyd1b21sJywgJ2FwcGxpY2F0aW9uL3ZuZC51b21sK3htbCddLFxuICAgIFsndXJpJywgJ3RleHQvdXJpLWxpc3QnXSxcbiAgICBbJ3VyaXMnLCAndGV4dC91cmktbGlzdCddLFxuICAgIFsndXJscycsICd0ZXh0L3VyaS1saXN0J10sXG4gICAgWyd1c2R6JywgJ21vZGVsL3ZuZC51c2R6K3ppcCddLFxuICAgIFsndXN0YXInLCAnYXBwbGljYXRpb24veC11c3RhciddLFxuICAgIFsndXR6JywgJ2FwcGxpY2F0aW9uL3ZuZC51aXEudGhlbWUnXSxcbiAgICBbJ3V1JywgJ3RleHQveC11dWVuY29kZSddLFxuICAgIFsndXZhJywgJ2F1ZGlvL3ZuZC5kZWNlLmF1ZGlvJ10sXG4gICAgWyd1dmQnLCAnYXBwbGljYXRpb24vdm5kLmRlY2UuZGF0YSddLFxuICAgIFsndXZmJywgJ2FwcGxpY2F0aW9uL3ZuZC5kZWNlLmRhdGEnXSxcbiAgICBbJ3V2ZycsICdpbWFnZS92bmQuZGVjZS5ncmFwaGljJ10sXG4gICAgWyd1dmgnLCAndmlkZW8vdm5kLmRlY2UuaGQnXSxcbiAgICBbJ3V2aScsICdpbWFnZS92bmQuZGVjZS5ncmFwaGljJ10sXG4gICAgWyd1dm0nLCAndmlkZW8vdm5kLmRlY2UubW9iaWxlJ10sXG4gICAgWyd1dnAnLCAndmlkZW8vdm5kLmRlY2UucGQnXSxcbiAgICBbJ3V2cycsICd2aWRlby92bmQuZGVjZS5zZCddLFxuICAgIFsndXZ0JywgJ2FwcGxpY2F0aW9uL3ZuZC5kZWNlLnR0bWwreG1sJ10sXG4gICAgWyd1dnUnLCAndmlkZW8vdm5kLnV2dnUubXA0J10sXG4gICAgWyd1dnYnLCAndmlkZW8vdm5kLmRlY2UudmlkZW8nXSxcbiAgICBbJ3V2dmEnLCAnYXVkaW8vdm5kLmRlY2UuYXVkaW8nXSxcbiAgICBbJ3V2dmQnLCAnYXBwbGljYXRpb24vdm5kLmRlY2UuZGF0YSddLFxuICAgIFsndXZ2ZicsICdhcHBsaWNhdGlvbi92bmQuZGVjZS5kYXRhJ10sXG4gICAgWyd1dnZnJywgJ2ltYWdlL3ZuZC5kZWNlLmdyYXBoaWMnXSxcbiAgICBbJ3V2dmgnLCAndmlkZW8vdm5kLmRlY2UuaGQnXSxcbiAgICBbJ3V2dmknLCAnaW1hZ2Uvdm5kLmRlY2UuZ3JhcGhpYyddLFxuICAgIFsndXZ2bScsICd2aWRlby92bmQuZGVjZS5tb2JpbGUnXSxcbiAgICBbJ3V2dnAnLCAndmlkZW8vdm5kLmRlY2UucGQnXSxcbiAgICBbJ3V2dnMnLCAndmlkZW8vdm5kLmRlY2Uuc2QnXSxcbiAgICBbJ3V2dnQnLCAnYXBwbGljYXRpb24vdm5kLmRlY2UudHRtbCt4bWwnXSxcbiAgICBbJ3V2dnUnLCAndmlkZW8vdm5kLnV2dnUubXA0J10sXG4gICAgWyd1dnZ2JywgJ3ZpZGVvL3ZuZC5kZWNlLnZpZGVvJ10sXG4gICAgWyd1dnZ4JywgJ2FwcGxpY2F0aW9uL3ZuZC5kZWNlLnVuc3BlY2lmaWVkJ10sXG4gICAgWyd1dnZ6JywgJ2FwcGxpY2F0aW9uL3ZuZC5kZWNlLnppcCddLFxuICAgIFsndXZ4JywgJ2FwcGxpY2F0aW9uL3ZuZC5kZWNlLnVuc3BlY2lmaWVkJ10sXG4gICAgWyd1dnonLCAnYXBwbGljYXRpb24vdm5kLmRlY2UuemlwJ10sXG4gICAgWyd2Ym94JywgJ2FwcGxpY2F0aW9uL3gtdmlydHVhbGJveC12Ym94J10sXG4gICAgWyd2Ym94LWV4dHBhY2snLCAnYXBwbGljYXRpb24veC12aXJ0dWFsYm94LXZib3gtZXh0cGFjayddLFxuICAgIFsndmNhcmQnLCAndGV4dC92Y2FyZCddLFxuICAgIFsndmNkJywgJ2FwcGxpY2F0aW9uL3gtY2RsaW5rJ10sXG4gICAgWyd2Y2YnLCAndGV4dC94LXZjYXJkJ10sXG4gICAgWyd2Y2cnLCAnYXBwbGljYXRpb24vdm5kLmdyb292ZS12Y2FyZCddLFxuICAgIFsndmNzJywgJ3RleHQveC12Y2FsZW5kYXInXSxcbiAgICBbJ3ZjeCcsICdhcHBsaWNhdGlvbi92bmQudmN4J10sXG4gICAgWyd2ZGknLCAnYXBwbGljYXRpb24veC12aXJ0dWFsYm94LXZkaSddLFxuICAgIFsndmRzJywgJ21vZGVsL3ZuZC5zYXAudmRzJ10sXG4gICAgWyd2aGQnLCAnYXBwbGljYXRpb24veC12aXJ0dWFsYm94LXZoZCddLFxuICAgIFsndmlzJywgJ2FwcGxpY2F0aW9uL3ZuZC52aXNpb25hcnknXSxcbiAgICBbJ3ZpdicsICd2aWRlby92bmQudml2byddLFxuICAgIFsndmxjJywgJ2FwcGxpY2F0aW9uL3ZpZGVvbGFuJ10sXG4gICAgWyd2bWRrJywgJ2FwcGxpY2F0aW9uL3gtdmlydHVhbGJveC12bWRrJ10sXG4gICAgWyd2b2InLCAndmlkZW8veC1tcy12b2InXSxcbiAgICBbJ3ZvcicsICdhcHBsaWNhdGlvbi92bmQuc3RhcmRpdmlzaW9uLndyaXRlciddLFxuICAgIFsndm94JywgJ2FwcGxpY2F0aW9uL3gtYXV0aG9yd2FyZS1iaW4nXSxcbiAgICBbJ3ZybWwnLCAnbW9kZWwvdnJtbCddLFxuICAgIFsndnNkJywgJ2FwcGxpY2F0aW9uL3ZuZC52aXNpbyddLFxuICAgIFsndnNmJywgJ2FwcGxpY2F0aW9uL3ZuZC52c2YnXSxcbiAgICBbJ3ZzcycsICdhcHBsaWNhdGlvbi92bmQudmlzaW8nXSxcbiAgICBbJ3ZzdCcsICdhcHBsaWNhdGlvbi92bmQudmlzaW8nXSxcbiAgICBbJ3ZzdycsICdhcHBsaWNhdGlvbi92bmQudmlzaW8nXSxcbiAgICBbJ3Z0ZicsICdpbWFnZS92bmQudmFsdmUuc291cmNlLnRleHR1cmUnXSxcbiAgICBbJ3Z0dCcsICd0ZXh0L3Z0dCddLFxuICAgIFsndnR1JywgJ21vZGVsL3ZuZC52dHUnXSxcbiAgICBbJ3Z4bWwnLCAnYXBwbGljYXRpb24vdm9pY2V4bWwreG1sJ10sXG4gICAgWyd3M2QnLCAnYXBwbGljYXRpb24veC1kaXJlY3RvciddLFxuICAgIFsnd2FkJywgJ2FwcGxpY2F0aW9uL3gtZG9vbSddLFxuICAgIFsnd2FkbCcsICdhcHBsaWNhdGlvbi92bmQuc3VuLndhZGwreG1sJ10sXG4gICAgWyd3YXInLCAnYXBwbGljYXRpb24vamF2YS1hcmNoaXZlJ10sXG4gICAgWyd3YXNtJywgJ2FwcGxpY2F0aW9uL3dhc20nXSxcbiAgICBbJ3dhdicsICdhdWRpby94LXdhdiddLFxuICAgIFsnd2F4JywgJ2F1ZGlvL3gtbXMtd2F4J10sXG4gICAgWyd3Ym1wJywgJ2ltYWdlL3ZuZC53YXAud2JtcCddLFxuICAgIFsnd2JzJywgJ2FwcGxpY2F0aW9uL3ZuZC5jcml0aWNhbHRvb2xzLndicyt4bWwnXSxcbiAgICBbJ3dieG1sJywgJ2FwcGxpY2F0aW9uL3dieG1sJ10sXG4gICAgWyd3Y20nLCAnYXBwbGljYXRpb24vdm5kLm1zLXdvcmtzJ10sXG4gICAgWyd3ZGInLCAnYXBwbGljYXRpb24vdm5kLm1zLXdvcmtzJ10sXG4gICAgWyd3ZHAnLCAnaW1hZ2Uvdm5kLm1zLXBob3RvJ10sXG4gICAgWyd3ZWJhJywgJ2F1ZGlvL3dlYm0nXSxcbiAgICBbJ3dlYmFwcCcsICdhcHBsaWNhdGlvbi94LXdlYi1hcHAtbWFuaWZlc3QranNvbiddLFxuICAgIFsnd2VibScsICd2aWRlby93ZWJtJ10sXG4gICAgWyd3ZWJtYW5pZmVzdCcsICdhcHBsaWNhdGlvbi9tYW5pZmVzdCtqc29uJ10sXG4gICAgWyd3ZWJwJywgJ2ltYWdlL3dlYnAnXSxcbiAgICBbJ3dnJywgJ2FwcGxpY2F0aW9uL3ZuZC5wbWkud2lkZ2V0J10sXG4gICAgWyd3Z3QnLCAnYXBwbGljYXRpb24vd2lkZ2V0J10sXG4gICAgWyd3a3MnLCAnYXBwbGljYXRpb24vdm5kLm1zLXdvcmtzJ10sXG4gICAgWyd3bScsICd2aWRlby94LW1zLXdtJ10sXG4gICAgWyd3bWEnLCAnYXVkaW8veC1tcy13bWEnXSxcbiAgICBbJ3dtZCcsICdhcHBsaWNhdGlvbi94LW1zLXdtZCddLFxuICAgIFsnd21mJywgJ2ltYWdlL3dtZiddLFxuICAgIFsnd21sJywgJ3RleHQvdm5kLndhcC53bWwnXSxcbiAgICBbJ3dtbGMnLCAnYXBwbGljYXRpb24vd21sYyddLFxuICAgIFsnd21scycsICd0ZXh0L3ZuZC53YXAud21sc2NyaXB0J10sXG4gICAgWyd3bWxzYycsICdhcHBsaWNhdGlvbi92bmQud2FwLndtbHNjcmlwdGMnXSxcbiAgICBbJ3dtdicsICd2aWRlby94LW1zLXdtdiddLFxuICAgIFsnd214JywgJ3ZpZGVvL3gtbXMtd214J10sXG4gICAgWyd3bXonLCAnYXBwbGljYXRpb24veC1tc21ldGFmaWxlJ10sXG4gICAgWyd3b2ZmJywgJ2ZvbnQvd29mZiddLFxuICAgIFsnd29mZjInLCAnZm9udC93b2ZmMiddLFxuICAgIFsnd29yZCcsICdhcHBsaWNhdGlvbi9tc3dvcmQnXSxcbiAgICBbJ3dwZCcsICdhcHBsaWNhdGlvbi92bmQud29yZHBlcmZlY3QnXSxcbiAgICBbJ3dwbCcsICdhcHBsaWNhdGlvbi92bmQubXMtd3BsJ10sXG4gICAgWyd3cHMnLCAnYXBwbGljYXRpb24vdm5kLm1zLXdvcmtzJ10sXG4gICAgWyd3cWQnLCAnYXBwbGljYXRpb24vdm5kLndxZCddLFxuICAgIFsnd3JpJywgJ2FwcGxpY2F0aW9uL3gtbXN3cml0ZSddLFxuICAgIFsnd3JsJywgJ21vZGVsL3ZybWwnXSxcbiAgICBbJ3dzYycsICdtZXNzYWdlL3ZuZC53ZmEud3NjJ10sXG4gICAgWyd3c2RsJywgJ2FwcGxpY2F0aW9uL3dzZGwreG1sJ10sXG4gICAgWyd3c3BvbGljeScsICdhcHBsaWNhdGlvbi93c3BvbGljeSt4bWwnXSxcbiAgICBbJ3d0YicsICdhcHBsaWNhdGlvbi92bmQud2VidHVyYm8nXSxcbiAgICBbJ3d2eCcsICd2aWRlby94LW1zLXd2eCddLFxuICAgIFsneDNkJywgJ21vZGVsL3gzZCt4bWwnXSxcbiAgICBbJ3gzZGInLCAnbW9kZWwveDNkK2Zhc3RpbmZvc2V0J10sXG4gICAgWyd4M2RieicsICdtb2RlbC94M2QrYmluYXJ5J10sXG4gICAgWyd4M2R2JywgJ21vZGVsL3gzZC12cm1sJ10sXG4gICAgWyd4M2R2eicsICdtb2RlbC94M2QrdnJtbCddLFxuICAgIFsneDNkeicsICdtb2RlbC94M2QreG1sJ10sXG4gICAgWyd4MzInLCAnYXBwbGljYXRpb24veC1hdXRob3J3YXJlLWJpbiddLFxuICAgIFsneF9iJywgJ21vZGVsL3ZuZC5wYXJhc29saWQudHJhbnNtaXQuYmluYXJ5J10sXG4gICAgWyd4X3QnLCAnbW9kZWwvdm5kLnBhcmFzb2xpZC50cmFuc21pdC50ZXh0J10sXG4gICAgWyd4YW1sJywgJ2FwcGxpY2F0aW9uL3hhbWwreG1sJ10sXG4gICAgWyd4YXAnLCAnYXBwbGljYXRpb24veC1zaWx2ZXJsaWdodC1hcHAnXSxcbiAgICBbJ3hhcicsICdhcHBsaWNhdGlvbi92bmQueGFyYSddLFxuICAgIFsneGF2JywgJ2FwcGxpY2F0aW9uL3hjYXAtYXR0K3htbCddLFxuICAgIFsneGJhcCcsICdhcHBsaWNhdGlvbi94LW1zLXhiYXAnXSxcbiAgICBbJ3hiZCcsICdhcHBsaWNhdGlvbi92bmQuZnVqaXhlcm94LmRvY3V3b3Jrcy5iaW5kZXInXSxcbiAgICBbJ3hibScsICdpbWFnZS94LXhiaXRtYXAnXSxcbiAgICBbJ3hjYScsICdhcHBsaWNhdGlvbi94Y2FwLWNhcHMreG1sJ10sXG4gICAgWyd4Y3MnLCAnYXBwbGljYXRpb24vY2FsZW5kYXIreG1sJ10sXG4gICAgWyd4ZGYnLCAnYXBwbGljYXRpb24veGNhcC1kaWZmK3htbCddLFxuICAgIFsneGRtJywgJ2FwcGxpY2F0aW9uL3ZuZC5zeW5jbWwuZG0reG1sJ10sXG4gICAgWyd4ZHAnLCAnYXBwbGljYXRpb24vdm5kLmFkb2JlLnhkcCt4bWwnXSxcbiAgICBbJ3hkc3NjJywgJ2FwcGxpY2F0aW9uL2Rzc2MreG1sJ10sXG4gICAgWyd4ZHcnLCAnYXBwbGljYXRpb24vdm5kLmZ1aml4ZXJveC5kb2N1d29ya3MnXSxcbiAgICBbJ3hlbCcsICdhcHBsaWNhdGlvbi94Y2FwLWVsK3htbCddLFxuICAgIFsneGVuYycsICdhcHBsaWNhdGlvbi94ZW5jK3htbCddLFxuICAgIFsneGVyJywgJ2FwcGxpY2F0aW9uL3BhdGNoLW9wcy1lcnJvcit4bWwnXSxcbiAgICBbJ3hmZGYnLCAnYXBwbGljYXRpb24vdm5kLmFkb2JlLnhmZGYnXSxcbiAgICBbJ3hmZGwnLCAnYXBwbGljYXRpb24vdm5kLnhmZGwnXSxcbiAgICBbJ3hodCcsICdhcHBsaWNhdGlvbi94aHRtbCt4bWwnXSxcbiAgICBbJ3hodG1sJywgJ2FwcGxpY2F0aW9uL3hodG1sK3htbCddLFxuICAgIFsneGh2bWwnLCAnYXBwbGljYXRpb24veHYreG1sJ10sXG4gICAgWyd4aWYnLCAnaW1hZ2Uvdm5kLnhpZmYnXSxcbiAgICBbJ3hsJywgJ2FwcGxpY2F0aW9uL2V4Y2VsJ10sXG4gICAgWyd4bGEnLCAnYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsJ10sXG4gICAgWyd4bGFtJywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5hZGRpbi5tYWNyb0VuYWJsZWQuMTInXSxcbiAgICBbJ3hsYycsICdhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwnXSxcbiAgICBbJ3hsZicsICdhcHBsaWNhdGlvbi94bGlmZit4bWwnXSxcbiAgICBbJ3hsbScsICdhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwnXSxcbiAgICBbJ3hscycsICdhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwnXSxcbiAgICBbJ3hsc2InLCAnYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNoZWV0LmJpbmFyeS5tYWNyb0VuYWJsZWQuMTInXSxcbiAgICBbJ3hsc20nLCAnYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNoZWV0Lm1hY3JvRW5hYmxlZC4xMiddLFxuICAgIFsneGxzeCcsICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldCddLFxuICAgIFsneGx0JywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbCddLFxuICAgIFsneGx0bScsICdhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwudGVtcGxhdGUubWFjcm9FbmFibGVkLjEyJ10sXG4gICAgWyd4bHR4JywgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnRlbXBsYXRlJ10sXG4gICAgWyd4bHcnLCAnYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsJ10sXG4gICAgWyd4bScsICdhdWRpby94bSddLFxuICAgIFsneG1sJywgJ2FwcGxpY2F0aW9uL3htbCddLFxuICAgIFsneG5zJywgJ2FwcGxpY2F0aW9uL3hjYXAtbnMreG1sJ10sXG4gICAgWyd4bycsICdhcHBsaWNhdGlvbi92bmQub2xwYy1zdWdhciddLFxuICAgIFsneG9wJywgJ2FwcGxpY2F0aW9uL3hvcCt4bWwnXSxcbiAgICBbJ3hwaScsICdhcHBsaWNhdGlvbi94LXhwaW5zdGFsbCddLFxuICAgIFsneHBsJywgJ2FwcGxpY2F0aW9uL3hwcm9jK3htbCddLFxuICAgIFsneHBtJywgJ2ltYWdlL3gteHBpeG1hcCddLFxuICAgIFsneHByJywgJ2FwcGxpY2F0aW9uL3ZuZC5pcy14cHInXSxcbiAgICBbJ3hwcycsICdhcHBsaWNhdGlvbi92bmQubXMteHBzZG9jdW1lbnQnXSxcbiAgICBbJ3hwdycsICdhcHBsaWNhdGlvbi92bmQuaW50ZXJjb24uZm9ybW5ldCddLFxuICAgIFsneHB4JywgJ2FwcGxpY2F0aW9uL3ZuZC5pbnRlcmNvbi5mb3JtbmV0J10sXG4gICAgWyd4c2QnLCAnYXBwbGljYXRpb24veG1sJ10sXG4gICAgWyd4c2wnLCAnYXBwbGljYXRpb24veG1sJ10sXG4gICAgWyd4c2x0JywgJ2FwcGxpY2F0aW9uL3hzbHQreG1sJ10sXG4gICAgWyd4c20nLCAnYXBwbGljYXRpb24vdm5kLnN5bmNtbCt4bWwnXSxcbiAgICBbJ3hzcGYnLCAnYXBwbGljYXRpb24veHNwZit4bWwnXSxcbiAgICBbJ3h1bCcsICdhcHBsaWNhdGlvbi92bmQubW96aWxsYS54dWwreG1sJ10sXG4gICAgWyd4dm0nLCAnYXBwbGljYXRpb24veHYreG1sJ10sXG4gICAgWyd4dm1sJywgJ2FwcGxpY2F0aW9uL3h2K3htbCddLFxuICAgIFsneHdkJywgJ2ltYWdlL3gteHdpbmRvd2R1bXAnXSxcbiAgICBbJ3h5eicsICdjaGVtaWNhbC94LXh5eiddLFxuICAgIFsneHonLCAnYXBwbGljYXRpb24veC14eiddLFxuICAgIFsneWFtbCcsICd0ZXh0L3lhbWwnXSxcbiAgICBbJ3lhbmcnLCAnYXBwbGljYXRpb24veWFuZyddLFxuICAgIFsneWluJywgJ2FwcGxpY2F0aW9uL3lpbit4bWwnXSxcbiAgICBbJ3ltbCcsICd0ZXh0L3lhbWwnXSxcbiAgICBbJ3ltcCcsICd0ZXh0L3gtc3VzZS15bXAnXSxcbiAgICBbJ3onLCAnYXBwbGljYXRpb24veC1jb21wcmVzcyddLFxuICAgIFsnejEnLCAnYXBwbGljYXRpb24veC16bWFjaGluZSddLFxuICAgIFsnejInLCAnYXBwbGljYXRpb24veC16bWFjaGluZSddLFxuICAgIFsnejMnLCAnYXBwbGljYXRpb24veC16bWFjaGluZSddLFxuICAgIFsnejQnLCAnYXBwbGljYXRpb24veC16bWFjaGluZSddLFxuICAgIFsnejUnLCAnYXBwbGljYXRpb24veC16bWFjaGluZSddLFxuICAgIFsnejYnLCAnYXBwbGljYXRpb24veC16bWFjaGluZSddLFxuICAgIFsnejcnLCAnYXBwbGljYXRpb24veC16bWFjaGluZSddLFxuICAgIFsnejgnLCAnYXBwbGljYXRpb24veC16bWFjaGluZSddLFxuICAgIFsnemF6JywgJ2FwcGxpY2F0aW9uL3ZuZC56emF6ei5kZWNrK3htbCddLFxuICAgIFsnemlwJywgJ2FwcGxpY2F0aW9uL3ppcCddLFxuICAgIFsnemlyJywgJ2FwcGxpY2F0aW9uL3ZuZC56dWwnXSxcbiAgICBbJ3ppcnonLCAnYXBwbGljYXRpb24vdm5kLnp1bCddLFxuICAgIFsnem1tJywgJ2FwcGxpY2F0aW9uL3ZuZC5oYW5kaGVsZC1lbnRlcnRhaW5tZW50K3htbCddLFxuICAgIFsnenNoJywgJ3RleHQveC1zY3JpcHR6c2gnXVxuXSk7XG5leHBvcnQgZnVuY3Rpb24gdG9GaWxlV2l0aFBhdGgoZmlsZSwgcGF0aCwgaCkge1xuICAgIGNvbnN0IGYgPSB3aXRoTWltZVR5cGUoZmlsZSk7XG4gICAgY29uc3QgeyB3ZWJraXRSZWxhdGl2ZVBhdGggfSA9IGZpbGU7XG4gICAgY29uc3QgcCA9IHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJ1xuICAgICAgICA/IHBhdGhcbiAgICAgICAgLy8gSWYgPGlucHV0IHdlYmtpdGRpcmVjdG9yeT4gaXMgc2V0LFxuICAgICAgICAvLyB0aGUgRmlsZSB3aWxsIGhhdmUgYSB7d2Via2l0UmVsYXRpdmVQYXRofSBwcm9wZXJ0eVxuICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTElucHV0RWxlbWVudC93ZWJraXRkaXJlY3RvcnlcbiAgICAgICAgOiB0eXBlb2Ygd2Via2l0UmVsYXRpdmVQYXRoID09PSAnc3RyaW5nJyAmJiB3ZWJraXRSZWxhdGl2ZVBhdGgubGVuZ3RoID4gMFxuICAgICAgICAgICAgPyB3ZWJraXRSZWxhdGl2ZVBhdGhcbiAgICAgICAgICAgIDogYC4vJHtmaWxlLm5hbWV9YDtcbiAgICBpZiAodHlwZW9mIGYucGF0aCAhPT0gJ3N0cmluZycpIHsgLy8gb24gZWxlY3Ryb24sIHBhdGggaXMgYWxyZWFkeSBzZXQgdG8gdGhlIGFic29sdXRlIHBhdGhcbiAgICAgICAgc2V0T2JqUHJvcChmLCAncGF0aCcsIHApO1xuICAgIH1cbiAgICBpZiAoaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmLCAnaGFuZGxlJywge1xuICAgICAgICAgICAgdmFsdWU6IGgsXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gQWx3YXlzIHBvcHVsYXRlIGEgcmVsYXRpdmUgcGF0aCBzbyB0aGF0IGV2ZW4gZWxlY3Ryb24gYXBwcyBoYXZlIGFjY2VzcyB0byBhIHJlbGF0aXZlUGF0aCB2YWx1ZVxuICAgIHNldE9ialByb3AoZiwgJ3JlbGF0aXZlUGF0aCcsIHApO1xuICAgIHJldHVybiBmO1xufVxuZnVuY3Rpb24gd2l0aE1pbWVUeXBlKGZpbGUpIHtcbiAgICBjb25zdCB7IG5hbWUgfSA9IGZpbGU7XG4gICAgY29uc3QgaGFzRXh0ZW5zaW9uID0gbmFtZSAmJiBuYW1lLmxhc3RJbmRleE9mKCcuJykgIT09IC0xO1xuICAgIGlmIChoYXNFeHRlbnNpb24gJiYgIWZpbGUudHlwZSkge1xuICAgICAgICBjb25zdCBleHQgPSBuYW1lLnNwbGl0KCcuJylcbiAgICAgICAgICAgIC5wb3AoKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCB0eXBlID0gQ09NTU9OX01JTUVfVFlQRVMuZ2V0KGV4dCk7XG4gICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmlsZSwgJ3R5cGUnLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHR5cGUsXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZpbGU7XG59XG5mdW5jdGlvbiBzZXRPYmpQcm9wKGYsIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZiwga2V5LCB7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbGUuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyB0b0ZpbGVXaXRoUGF0aCB9IGZyb20gJy4vZmlsZSc7XG5jb25zdCBGSUxFU19UT19JR05PUkUgPSBbXG4gICAgLy8gVGh1bWJuYWlsIGNhY2hlIGZpbGVzIGZvciBtYWNPUyBhbmQgV2luZG93c1xuICAgICcuRFNfU3RvcmUnLCAvLyBtYWNPc1xuICAgICdUaHVtYnMuZGInIC8vIFdpbmRvd3Ncbl07XG4vKipcbiAqIENvbnZlcnQgYSBEcmFnRXZlbnQncyBEYXRhVHJhc2ZlciBvYmplY3QgdG8gYSBsaXN0IG9mIEZpbGUgb2JqZWN0c1xuICogTk9URTogSWYgc29tZSBvZiB0aGUgaXRlbXMgYXJlIGZvbGRlcnMsXG4gKiBldmVyeXRoaW5nIHdpbGwgYmUgZmxhdHRlbmVkIGFuZCBwbGFjZWQgaW4gdGhlIHNhbWUgbGlzdCBidXQgdGhlIHBhdGhzIHdpbGwgYmUga2VwdCBhcyBhIHtwYXRofSBwcm9wZXJ0eS5cbiAqXG4gKiBFWFBFUklNRU5UQUw6IEEgbGlzdCBvZiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRmlsZVN5c3RlbUhhbmRsZSBvYmplY3RzIGNhbiBhbHNvIGJlIHBhc3NlZCBhcyBhbiBhcmdcbiAqIGFuZCBhIGxpc3Qgb2YgRmlsZSBvYmplY3RzIHdpbGwgYmUgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIGV2dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbUV2ZW50KGV2dCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGlmIChpc09iamVjdChldnQpICYmIGlzRGF0YVRyYW5zZmVyKGV2dC5kYXRhVHJhbnNmZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RGF0YVRyYW5zZmVyRmlsZXMoZXZ0LmRhdGFUcmFuc2ZlciwgZXZ0LnR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzQ2hhbmdlRXZ0KGV2dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRJbnB1dEZpbGVzKGV2dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShldnQpICYmIGV2dC5ldmVyeShpdGVtID0+ICdnZXRGaWxlJyBpbiBpdGVtICYmIHR5cGVvZiBpdGVtLmdldEZpbGUgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RnNIYW5kbGVGaWxlcyhldnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGlzRGF0YVRyYW5zZmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGlzQ2hhbmdlRXZ0KHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHZhbHVlKSAmJiBpc09iamVjdCh2YWx1ZS50YXJnZXQpO1xufVxuZnVuY3Rpb24gaXNPYmplY3Qodikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gJ29iamVjdCcgJiYgdiAhPT0gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldElucHV0RmlsZXMoZXZ0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KGV2dC50YXJnZXQuZmlsZXMpLm1hcChmaWxlID0+IHRvRmlsZVdpdGhQYXRoKGZpbGUpKTtcbn1cbi8vIEVlIGV4cGVjdCBlYWNoIGhhbmRsZSB0byBiZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRmlsZVN5c3RlbUZpbGVIYW5kbGVcbmZ1bmN0aW9uIGdldEZzSGFuZGxlRmlsZXMoaGFuZGxlcykge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IGZpbGVzID0geWllbGQgUHJvbWlzZS5hbGwoaGFuZGxlcy5tYXAoaCA9PiBoLmdldEZpbGUoKSkpO1xuICAgICAgICByZXR1cm4gZmlsZXMubWFwKGZpbGUgPT4gdG9GaWxlV2l0aFBhdGgoZmlsZSkpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZ2V0RGF0YVRyYW5zZmVyRmlsZXMoZHQsIHR5cGUpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAvLyBJRTExIGRvZXMgbm90IHN1cHBvcnQgZGF0YVRyYW5zZmVyLml0ZW1zXG4gICAgICAgIC8vIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRGF0YVRyYW5zZmVyL2l0ZW1zI0Jyb3dzZXJfY29tcGF0aWJpbGl0eVxuICAgICAgICBpZiAoZHQuaXRlbXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gZnJvbUxpc3QoZHQuaXRlbXMpXG4gICAgICAgICAgICAgICAgLmZpbHRlcihpdGVtID0+IGl0ZW0ua2luZCA9PT0gJ2ZpbGUnKTtcbiAgICAgICAgICAgIC8vIEFjY29yZGluZyB0byBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9kbmQuaHRtbCNkbmRldmVudHMsXG4gICAgICAgICAgICAvLyBvbmx5ICdkcmFnc3RhcnQnIGFuZCAnZHJvcCcgaGFzIGFjY2VzcyB0byB0aGUgZGF0YSAoc291cmNlIG5vZGUpXG4gICAgICAgICAgICBpZiAodHlwZSAhPT0gJ2Ryb3AnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZmlsZXMgPSB5aWVsZCBQcm9taXNlLmFsbChpdGVtcy5tYXAodG9GaWxlUHJvbWlzZXMpKTtcbiAgICAgICAgICAgIHJldHVybiBub0lnbm9yZWRGaWxlcyhmbGF0dGVuKGZpbGVzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vSWdub3JlZEZpbGVzKGZyb21MaXN0KGR0LmZpbGVzKVxuICAgICAgICAgICAgLm1hcChmaWxlID0+IHRvRmlsZVdpdGhQYXRoKGZpbGUpKSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBub0lnbm9yZWRGaWxlcyhmaWxlcykge1xuICAgIHJldHVybiBmaWxlcy5maWx0ZXIoZmlsZSA9PiBGSUxFU19UT19JR05PUkUuaW5kZXhPZihmaWxlLm5hbWUpID09PSAtMSk7XG59XG4vLyBJRTExIGRvZXMgbm90IHN1cHBvcnQgQXJyYXkuZnJvbSgpXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9mcm9tI0Jyb3dzZXJfY29tcGF0aWJpbGl0eVxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ZpbGVMaXN0XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRGF0YVRyYW5zZmVySXRlbUxpc3RcbmZ1bmN0aW9uIGZyb21MaXN0KGl0ZW1zKSB7XG4gICAgaWYgKGl0ZW1zID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgZmlsZXMgPSBbXTtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZTogcHJlZmVyLWZvci1vZlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZmlsZSA9IGl0ZW1zW2ldO1xuICAgICAgICBmaWxlcy5wdXNoKGZpbGUpO1xuICAgIH1cbiAgICByZXR1cm4gZmlsZXM7XG59XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRGF0YVRyYW5zZmVySXRlbVxuZnVuY3Rpb24gdG9GaWxlUHJvbWlzZXMoaXRlbSkge1xuICAgIGlmICh0eXBlb2YgaXRlbS53ZWJraXRHZXRBc0VudHJ5ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBmcm9tRGF0YVRyYW5zZmVySXRlbShpdGVtKTtcbiAgICB9XG4gICAgY29uc3QgZW50cnkgPSBpdGVtLndlYmtpdEdldEFzRW50cnkoKTtcbiAgICAvLyBTYWZhcmkgc3VwcG9ydHMgZHJvcHBpbmcgYW4gaW1hZ2Ugbm9kZSBmcm9tIGEgZGlmZmVyZW50IHdpbmRvdyBhbmQgY2FuIGJlIHJldHJpZXZlZCB1c2luZ1xuICAgIC8vIHRoZSBEYXRhVHJhbnNmZXJJdGVtLmdldEFzRmlsZSgpIEFQSVxuICAgIC8vIE5PVEU6IEZpbGVTeXN0ZW1FbnRyeS5maWxlKCkgdGhyb3dzIGlmIHRyeWluZyB0byBnZXQgdGhlIGZpbGVcbiAgICBpZiAoZW50cnkgJiYgZW50cnkuaXNEaXJlY3RvcnkpIHtcbiAgICAgICAgcmV0dXJuIGZyb21EaXJFbnRyeShlbnRyeSk7XG4gICAgfVxuICAgIHJldHVybiBmcm9tRGF0YVRyYW5zZmVySXRlbShpdGVtLCBlbnRyeSk7XG59XG5mdW5jdGlvbiBmbGF0dGVuKGl0ZW1zKSB7XG4gICAgcmV0dXJuIGl0ZW1zLnJlZHVjZSgoYWNjLCBmaWxlcykgPT4gW1xuICAgICAgICAuLi5hY2MsXG4gICAgICAgIC4uLihBcnJheS5pc0FycmF5KGZpbGVzKSA/IGZsYXR0ZW4oZmlsZXMpIDogW2ZpbGVzXSlcbiAgICBdLCBbXSk7XG59XG5mdW5jdGlvbiBmcm9tRGF0YVRyYW5zZmVySXRlbShpdGVtLCBlbnRyeSkge1xuICAgIHZhciBfYTtcbiAgICBpZiAodHlwZW9mIGl0ZW0uZ2V0QXNGaWxlU3lzdGVtSGFuZGxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBpdGVtLmdldEFzRmlsZVN5c3RlbUhhbmRsZSgpXG4gICAgICAgICAgICAudGhlbigoaCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgZmlsZSA9IHlpZWxkIGguZ2V0RmlsZSgpO1xuICAgICAgICAgICAgZmlsZS5oYW5kbGUgPSBoO1xuICAgICAgICAgICAgcmV0dXJuIHRvRmlsZVdpdGhQYXRoKGZpbGUpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGNvbnN0IGZpbGUgPSBpdGVtLmdldEFzRmlsZSgpO1xuICAgIGlmICghZmlsZSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYCR7aXRlbX0gaXMgbm90IGEgRmlsZWApO1xuICAgIH1cbiAgICBjb25zdCBmd3AgPSB0b0ZpbGVXaXRoUGF0aChmaWxlLCAoX2EgPSBlbnRyeSA9PT0gbnVsbCB8fCBlbnRyeSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZW50cnkuZnVsbFBhdGgpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmd3ApO1xufVxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ZpbGVTeXN0ZW1FbnRyeVxuZnVuY3Rpb24gZnJvbUVudHJ5KGVudHJ5KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIGVudHJ5LmlzRGlyZWN0b3J5ID8gZnJvbURpckVudHJ5KGVudHJ5KSA6IGZyb21GaWxlRW50cnkoZW50cnkpO1xuICAgIH0pO1xufVxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ZpbGVTeXN0ZW1EaXJlY3RvcnlFbnRyeVxuZnVuY3Rpb24gZnJvbURpckVudHJ5KGVudHJ5KSB7XG4gICAgY29uc3QgcmVhZGVyID0gZW50cnkuY3JlYXRlUmVhZGVyKCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgZW50cmllcyA9IFtdO1xuICAgICAgICBmdW5jdGlvbiByZWFkRW50cmllcygpIHtcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GaWxlU3lzdGVtRGlyZWN0b3J5RW50cnkvY3JlYXRlUmVhZGVyXG4gICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRmlsZVN5c3RlbURpcmVjdG9yeVJlYWRlci9yZWFkRW50cmllc1xuICAgICAgICAgICAgcmVhZGVyLnJlYWRFbnRyaWVzKChiYXRjaCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGlmICghYmF0Y2gubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIERvbmUgcmVhZGluZyBkaXJlY3RvcnlcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVzID0geWllbGQgUHJvbWlzZS5hbGwoZW50cmllcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGZpbGVzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBQcm9taXNlLmFsbChiYXRjaC5tYXAoZnJvbUVudHJ5KSk7XG4gICAgICAgICAgICAgICAgICAgIGVudHJpZXMucHVzaChpdGVtcyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIENvbnRpbnVlIHJlYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgcmVhZEVudHJpZXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSwgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVhZEVudHJpZXMoKTtcbiAgICB9KTtcbn1cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GaWxlU3lzdGVtRmlsZUVudHJ5XG5mdW5jdGlvbiBmcm9tRmlsZUVudHJ5KGVudHJ5KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGVudHJ5LmZpbGUoKGZpbGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmd3AgPSB0b0ZpbGVXaXRoUGF0aChmaWxlLCBlbnRyeS5mdWxsUGF0aCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShmd3ApO1xuICAgICAgICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsZS1zZWxlY3Rvci5qcy5tYXAiLCIvLyBNb3N0IG9mIHRoZXNlIGFyZSBwbGFpbiBKUyBmdW5jdGlvbnMgdXNlZCBieSB0aGUgaG9vay5cbi8vIFRoZXkgZG8gbm90IG5lZWQgY29udmVyc2lvbi5cblxuZXhwb3J0IGNvbnN0IEVycm9yQ29kZSA9IHtcbiAgRmlsZUludmFsaWRUeXBlOiAnZmlsZS1pbnZhbGlkLXR5cGUnLFxuICBGaWxlVG9vTGFyZ2U6ICdmaWxlLXRvby1sYXJnZScsXG4gIEZpbGVUb29TbWFsbDogJ2ZpbGUtdG9vLXNtYWxsJyxcbiAgVG9vTWFueUZpbGVzOiAndG9vLW1hbnktZmlsZXMnXG59O1xuXG5leHBvcnQgY29uc3QgVE9PX01BTllfRklMRVNfUkVKRUNUSU9OID0ge1xuICBjb2RlOiBFcnJvckNvZGUuVG9vTWFueUZpbGVzLFxuICBtZXNzYWdlOiAnVG9vIG1hbnkgZmlsZXMnXG59O1xuXG4vLyBGaXJlZm94IHZlcnNpb25zIHByaW9yIHRvIDUzIHJldHVybiBhIGJvZ3VzIE1JTUUgdHlwZSBmb3IgZXZlcnkgZmlsZSBkcmFnLCBzbyBkcmFndHlwZSBjaGVja2luZyBpcyBkaXNjb3VyYWdlZDpcbi8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzIzNDBcbmV4cG9ydCBmdW5jdGlvbiBmaWxlQWNjZXB0ZWQoZmlsZSwgYWNjZXB0KSB7XG4gIGNvbnN0IGlzQWNjZXB0YWJsZSA9IGZpbGUudHlwZSA9PT0gJ2FwcGxpY2F0aW9uL3gtbW96LWZpbGUnIHx8IGFjY2VwdHMoZmlsZSwgYWNjZXB0KTtcbiAgcmV0dXJuIFtcbiAgICBpc0FjY2VwdGFibGUsXG4gICAgaXNBY2NlcHRhYmxlID8gbnVsbCA6IHtcbiAgICAgIGNvZGU6IEVycm9yQ29kZS5GaWxlSW52YWxpZFR5cGUsXG4gICAgICBtZXNzYWdlOiBgRmlsZSB0eXBlIG11c3QgYmUgJHthY2NlcHR9YFxuICAgIH1cbiAgXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbGVNYXRjaFNpemUoZmlsZSwgbWluU2l6ZSwgbWF4U2l6ZSkge1xuICBpZiAoaXNEZWZpbmVkKGZpbGUuc2l6ZSkpIHtcbiAgICBpZiAoaXNEZWZpbmVkKG1pblNpemUpICYmIGlzRGVmaW5lZChtYXhTaXplKSkge1xuICAgICAgaWYgKGZpbGUuc2l6ZSA+IG1heFNpemUpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb2RlOiBFcnJvckNvZGUuRmlsZVRvb0xhcmdlLFxuICAgICAgICAgICAgbWVzc2FnZTogYEZpbGUgaXMgbGFyZ2VyIHRoYW4gJHttYXhTaXplfSBieXRlc2BcbiAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgICB9XG4gICAgICBpZiAoZmlsZS5zaXplIDwgbWluU2l6ZSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvZGU6IEVycm9yQ29kZS5GaWxlVG9vU21hbGwsXG4gICAgICAgICAgICBtZXNzYWdlOiBgRmlsZSBpcyBzbWFsbGVyIHRoYW4gJHttaW5TaXplfSBieXRlc2BcbiAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0RlZmluZWQobWluU2l6ZSkgJiYgZmlsZS5zaXplIDwgbWluU2l6ZSkge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIHtcbiAgICAgICAgICBjb2RlOiBFcnJvckNvZGUuRmlsZVRvb1NtYWxsLFxuICAgICAgICAgIG1lc3NhZ2U6IGBGaWxlIGlzIHNtYWxsZXIgdGhhbiAke21pblNpemV9IGJ5dGVzYFxuICAgICAgICB9XG4gICAgICBdO1xuICAgIH0gZWxzZSBpZiAoaXNEZWZpbmVkKG1heFNpemUpICYmIGZpbGUuc2l6ZSA+IG1heFNpemUpIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIGZhbHNlLFxuICAgICAgICB7XG4gICAgICAgICAgY29kZTogRXJyb3JDb2RlLkZpbGVUb29MYXJnZSxcbiAgICAgICAgICBtZXNzYWdlOiBgRmlsZSBpcyBsYXJnZXIgdGhhbiAke21heFNpemV9IGJ5dGVzYFxuICAgICAgICB9XG4gICAgICBdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gW3RydWUsIG51bGxdO1xufVxuXG5mdW5jdGlvbiBpc0RlZmluZWQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGw7XG59XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9va29uZXQvYXR0ci1hY2NlcHQvYmxvYi9tYXN0ZXIvc3JjL2luZGV4LmpzXG4vLyBPcmlnaW5hbGx5IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LWJvb3RzdHJhcC9yZWFjdC1wcm9wLXR5cGVzL2Jsb2IvbWFzdGVyL3NyYy91dGlscy9ib290c3RyYXBVdGlscy5qc1xuZXhwb3J0IGZ1bmN0aW9uIGFjY2VwdHMoZmlsZSwgYWNjZXB0ZWRGaWxlcykge1xuICBpZiAoZmlsZSAmJiBhY2NlcHRlZEZpbGVzKSB7XG4gICAgY29uc3QgYWNjZXB0ZWRGaWxlc0FycmF5ID0gQXJyYXkuaXNBcnJheShhY2NlcHRlZEZpbGVzKSA/IGFjY2VwdGVkRmlsZXMgOiBhY2NlcHRlZEZpbGVzLnNwbGl0KCcsJyk7XG4gICAgY29uc3QgZmlsZU5hbWUgPSBmaWxlLm5hbWUgfHwgJyc7XG4gICAgY29uc3QgbWltZVR5cGUgPSAoZmlsZS50eXBlIHx8ICcnKS50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IGJhc2VNaW1lVHlwZSA9IG1pbWVUeXBlLnJlcGxhY2UoL1xcLy4qJC8sICcnKTtcblxuICAgIHJldHVybiBhY2NlcHRlZEZpbGVzQXJyYXkuc29tZSh0eXBlID0+IHtcbiAgICAgIGNvbnN0IHZhbGlkVHlwZSA9IHR5cGUudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAodmFsaWRUeXBlLmNoYXJBdCgwKSA9PT0gJy4nKSB7XG4gICAgICAgIHJldHVybiBmaWxlTmFtZS50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKHZhbGlkVHlwZSk7XG4gICAgICB9IGVsc2UgaWYgKHZhbGlkVHlwZS5lbmRzV2l0aCgnLyonKSkge1xuICAgICAgICAvLyBUaGlzIGlzIHNvbWV0aGluZyBsaWtlIGEgaW1hZ2UvKiBtaW1lIHR5cGVcbiAgICAgICAgcmV0dXJuIGJhc2VNaW1lVHlwZSA9PT0gdmFsaWRUeXBlLnJlcGxhY2UoL1xcLy4qJC8sICcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtaW1lVHlwZSA9PT0gdmFsaWRUeXBlO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWxsRmlsZXNBY2NlcHRlZCh7XG4gIGZpbGVzLFxuICBhY2NlcHQsXG4gIG1pblNpemUsXG4gIG1heFNpemUsXG4gIG11bHRpcGxlLFxuICBtYXhGaWxlcyxcbiAgdmFsaWRhdG9yXG59KSB7XG4gIGlmICghbXVsdGlwbGUgJiYgZmlsZXMubGVuZ3RoID4gMSB8fCAobXVsdGlwbGUgJiYgbWF4RmlsZXMgPj0gMSAmJiBmaWxlcy5sZW5ndGggPiBtYXhGaWxlcykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZmlsZXMuZXZlcnkoZmlsZSA9PiB7XG4gICAgY29uc3QgW2FjY2VwdGVkXSA9IGZpbGVBY2NlcHRlZChmaWxlLCBhY2NlcHQpO1xuICAgIGNvbnN0IFtzaXplTWF0Y2hdID0gZmlsZU1hdGNoU2l6ZShmaWxlLCBtaW5TaXplLCBtYXhTaXplKTtcbiAgICBjb25zdCBjdXN0b21FcnJvcnMgPSB2YWxpZGF0b3IgPyB2YWxpZGF0b3IoZmlsZSkgOiBudWxsO1xuICAgIHJldHVybiBhY2NlcHRlZCAmJiBzaXplTWF0Y2ggJiYgIWN1c3RvbUVycm9ycztcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhY2NlcHRQcm9wQXNBY2NlcHRBdHRyKGFjY2VwdCkge1xuICBpZiAoYWNjZXB0ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBPYmplY3QuZW50cmllcyhhY2NlcHQpXG4gICAgLnJlZHVjZSgoYSwgW21pbWUsIGV4dHNdKSA9PiBbLi4uYSwgbWltZSwgLi4uZXh0c10sIFtdKVxuICAgIC5qb2luKCcsJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwaWNrZXJPcHRpb25zRnJvbUFjY2VwdChhY2NlcHQpIHtcbiAgaWYgKGFjY2VwdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmVudHJpZXMoYWNjZXB0KS5tYXAoKFttaW1lLCBleHRzXSkgPT4gKHtcbiAgICBkZXNjcmlwdGlvbjogJ0ZpbGVzJyxcbiAgICBhY2NlcHQ6IHtcbiAgICAgIFttaW1lXTogZXh0c1xuICAgIH1cbiAgfSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcG9zZUV2ZW50SGFuZGxlcnMoLi4uZm5zKSB7XG4gIHJldHVybiAoZSwgLi4uYXJncykgPT4gZm5zLnNvbWUoZm4gPT4ge1xuICAgIGlmIChmbikge1xuICAgICAgZm4oZSwgLi4uYXJncyk7XG4gICAgfVxuICAgIHJldHVybiBlLmRlZmF1bHRQcmV2ZW50ZWQgfHwgZS5wcm9wYWdhdGlvblN0b3BwZWQ7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFdnRXaXRoRmlsZXMoZXZlbnQpIHtcbiAgaWYgKCFldmVudC5kYXRhVHJhbnNmZXIpIHtcbiAgICByZXR1cm4gISFldmVudC50YXJnZXQgJiYgISFldmVudC50YXJnZXQuZmlsZXM7XG4gIH1cbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RhdGFUcmFuc2Zlci90eXBlc1xuICAvLyBOb3RlOiBJbiBjYXNlIG9mIGZpbGVzIGRyYWdnZWQgZnJvbSB0aGUgZGVza3RvcCwgZGF0YVRyYW5zZmVyLnR5cGVzIGlzIG5vdCBhIHN0cmluZyBhcnJheSBidXQgYSBET01TdHJpbmdMaXN0XG4gIC8vIGFuZCBpbiBTYWZhcmkgbGlzdHMgdGhlIGZpbGVzJyBpbmRpdmlkdWFsIGZpbGUgdHlwZXMuXG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuc29tZS5jYWxsKFxuICAgIGV2ZW50LmRhdGFUcmFuc2Zlci50eXBlcyxcbiAgICB0eXBlID0+IHR5cGUgPT09ICdGaWxlcycgfHwgdHlwZSA9PT0gJ2FwcGxpY2F0aW9uL3gtbW96LWZpbGUnXG4gICk7XG59XG5cbi8vIENoZWNrIGlmIHRoZSBwcm92aWRlZCBldmVudCBpcyBhIGtleWJvYXJkIGV2ZW50LlxuZXhwb3J0IGZ1bmN0aW9uIGlzS2V5Ym9hcmRFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQua2V5ICE9PSB1bmRlZmluZWQ7XG59XG5cbi8vIENoZWNrIGlmIHRoZSBwcm92aWRlZCBldmVudCBpcyBhIGRyYWcgZXZlbnQuXG5leHBvcnQgZnVuY3Rpb24gaXNEcmFnRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LmRhdGFUcmFuc2ZlciAhPT0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQcm9wYWdhdGlvblN0b3BwZWQoZXZlbnQpIHtcbiAgaWYgKHR5cGVvZiBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBldmVudC5jYW5jZWxCdWJibGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGV2ZW50LmNhbmNlbEJ1YmJsZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBjb25zdCBvbkRvY3VtZW50RHJhZ092ZXIgPSBlID0+IHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzSWVPckVkZ2UodWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkge1xuICByZXR1cm4gdWEuaW5kZXhPZignTVNJRSAnKSA+IDAgfHwgdWEuaW5kZXhPZignVHJpZGVudC8nKSA+IDAgfHwgdWEuaW5kZXhPZignRWRnZS8nKSA+IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW5Vc2VGaWxlU3lzdGVtQWNjZXNzQVBJKCkge1xuICByZXR1cm4gJ3Nob3dPcGVuRmlsZVBpY2tlcicgaW4gd2luZG93O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBYm9ydChlcnIpIHtcbiAgcmV0dXJuIGVyci5uYW1lID09PSAnQWJvcnRFcnJvcic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NlY3VyaXR5RXJyb3IoZXJyKSB7XG4gIHJldHVybiBlcnIubmFtZSA9PT0gJ1NlY3VyaXR5RXJyb3InO1xufVxuIiwiaW1wb3J0IHtcbiAgY3JlYXRlU2lnbmFsLFxuICBjcmVhdGVFZmZlY3QsXG4gIG9uQ2xlYW51cCxcbiAgY3JlYXRlTWVtbyxcbiAgc3BsaXRQcm9wcyxcbiAgbWVyZ2VQcm9wcyxcbiAgb25Nb3VudCxcbn0gZnJvbSBcInNvbGlkLWpzXCI7XG5pbXBvcnQgeyBjcmVhdGVTdG9yZSwgcHJvZHVjZSB9IGZyb20gXCJzb2xpZC1qcy9zdG9yZVwiO1xuaW1wb3J0IHsgZnJvbUV2ZW50IH0gZnJvbSBcImZpbGUtc2VsZWN0b3JcIjtcbmltcG9ydCB7XG4gIGFjY2VwdFByb3BBc0FjY2VwdEF0dHIsXG4gIGFsbEZpbGVzQWNjZXB0ZWQsXG4gIGNvbXBvc2VFdmVudEhhbmRsZXJzLFxuICBmaWxlQWNjZXB0ZWQsXG4gIGZpbGVNYXRjaFNpemUsXG4gIGNhblVzZUZpbGVTeXN0ZW1BY2Nlc3NBUEksXG4gIGlzQWJvcnQsXG4gIGlzRXZ0V2l0aEZpbGVzLFxuICBpc0llT3JFZGdlLFxuICBpc1Byb3BhZ2F0aW9uU3RvcHBlZCxcbiAgaXNTZWN1cml0eUVycm9yLFxuICBvbkRvY3VtZW50RHJhZ092ZXIsXG4gIHBpY2tlck9wdGlvbnNGcm9tQWNjZXB0LFxuICBUT09fTUFOWV9GSUxFU19SRUpFQ1RJT04sXG59IGZyb20gXCIuL3V0aWxzL2luZGV4LmpzXCI7XG5cbmNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBnZXRGaWxlc0Zyb21FdmVudDogZnJvbUV2ZW50LFxuICBtYXhTaXplOiBJbmZpbml0eSxcbiAgbWluU2l6ZTogMCxcbiAgbXVsdGlwbGU6IHRydWUsXG4gIG1heEZpbGVzOiAwLFxuICBwcmV2ZW50RHJvcE9uRG9jdW1lbnQ6IHRydWUsXG4gIG5vQ2xpY2s6IGZhbHNlLFxuICBub0tleWJvYXJkOiBmYWxzZSxcbiAgbm9EcmFnOiBmYWxzZSxcbiAgbm9EcmFnRXZlbnRzQnViYmxpbmc6IGZhbHNlLFxuICB2YWxpZGF0b3I6IG51bGwsXG4gIHVzZUZzQWNjZXNzQXBpOiBmYWxzZSxcbiAgYXV0b0ZvY3VzOiBmYWxzZSxcbn07XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgaXNGb2N1c2VkOiBmYWxzZSxcbiAgaXNGaWxlRGlhbG9nQWN0aXZlOiBmYWxzZSxcbiAgaXNEcmFnQWN0aXZlOiBmYWxzZSxcbiAgaXNEcmFnQWNjZXB0OiBmYWxzZSxcbiAgaXNEcmFnUmVqZWN0OiBmYWxzZSxcbiAgYWNjZXB0ZWRGaWxlczogW10sXG4gIGZpbGVSZWplY3Rpb25zOiBbXSxcbn07XG5cbi8qKlxuICogQSBTb2xpZEpTIGNvbXBvc2FibGUgdGhhdCBjcmVhdGVzIGEgZHJhZyAnbicgZHJvcCBhcmVhLlxuICpcbiAqIEBmdW5jdGlvbiBjcmVhdGVEcm9wem9uZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRHJvcHpvbmUocHJvcHMgPSB7fSkge1xuICBjb25zdCBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoZGVmYXVsdFByb3BzLCBwcm9wcyk7XG5cbiAgbGV0IHJvb3RSZWY7XG4gIGxldCBpbnB1dFJlZjtcbiAgbGV0IGRyYWdUYXJnZXRzUmVmID0gW107XG5cbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSBjcmVhdGVTdG9yZShpbml0aWFsU3RhdGUpO1xuXG4gIGNvbnN0IGZzQWNjZXNzQXBpV29ya3MgPVxuICAgIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB3aW5kb3cuaXNTZWN1cmVDb250ZXh0ICYmXG4gICAgbWVyZ2VkUHJvcHMudXNlRnNBY2Nlc3NBcGkgJiZcbiAgICBjYW5Vc2VGaWxlU3lzdGVtQWNjZXNzQVBJKCk7XG4gIGNvbnN0IFt1c2VGc0FjY2Vzcywgc2V0VXNlRnNBY2Nlc3NdID0gY3JlYXRlU2lnbmFsKGZzQWNjZXNzQXBpV29ya3MpO1xuXG4gIGNvbnN0IGFjY2VwdEF0dHIgPSBjcmVhdGVNZW1vKCgpID0+XG4gICAgYWNjZXB0UHJvcEFzQWNjZXB0QXR0cihtZXJnZWRQcm9wcy5hY2NlcHQpXG4gICk7XG4gIGNvbnN0IHBpY2tlclR5cGVzID0gY3JlYXRlTWVtbygoKSA9PlxuICAgIHBpY2tlck9wdGlvbnNGcm9tQWNjZXB0KG1lcmdlZFByb3BzLmFjY2VwdClcbiAgKTtcblxuICBjb25zdCBvbkZpbGVEaWFsb2dPcGVuID0gKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgbWVyZ2VkUHJvcHMub25GaWxlRGlhbG9nT3BlbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBtZXJnZWRQcm9wcy5vbkZpbGVEaWFsb2dPcGVuKCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG9uRmlsZURpYWxvZ0NhbmNlbCA9ICgpID0+IHtcbiAgICBpZiAodHlwZW9mIG1lcmdlZFByb3BzLm9uRmlsZURpYWxvZ0NhbmNlbCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBtZXJnZWRQcm9wcy5vbkZpbGVEaWFsb2dDYW5jZWwoKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgb25XaW5kb3dGb2N1cyA9ICgpID0+IHtcbiAgICBpZiAoIXVzZUZzQWNjZXNzKCkgJiYgc3RhdGUuaXNGaWxlRGlhbG9nQWN0aXZlKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKGlucHV0UmVmKSB7XG4gICAgICAgICAgY29uc3QgeyBmaWxlcyB9ID0gaW5wdXRSZWY7XG4gICAgICAgICAgaWYgKCFmaWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNldFN0YXRlKFwiaXNGaWxlRGlhbG9nQWN0aXZlXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIG9uRmlsZURpYWxvZ0NhbmNlbCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgMzAwKTtcbiAgICB9XG4gIH07XG5cbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIG9uV2luZG93Rm9jdXMsIGZhbHNlKTtcbiAgICBvbkNsZWFudXAoKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCBvbldpbmRvd0ZvY3VzLCBmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGNvbnN0IG9uRG9jdW1lbnREcm9wID0gKGV2ZW50KSA9PiB7XG4gICAgaWYgKHJvb3RSZWYgJiYgcm9vdFJlZi5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZHJhZ1RhcmdldHNSZWYgPSBbXTtcbiAgfTtcblxuICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChtZXJnZWRQcm9wcy5wcmV2ZW50RHJvcE9uRG9jdW1lbnQpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnb3ZlclwiLCBvbkRvY3VtZW50RHJhZ092ZXIsIGZhbHNlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsIG9uRG9jdW1lbnREcm9wLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgb25DbGVhbnVwKCgpID0+IHtcbiAgICAgIGlmIChtZXJnZWRQcm9wcy5wcmV2ZW50RHJvcE9uRG9jdW1lbnQpIHtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImRyYWdvdmVyXCIsIG9uRG9jdW1lbnREcmFnT3Zlcik7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsIG9uRG9jdW1lbnREcm9wKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgb25Nb3VudCgoKSA9PiB7XG4gICAgaWYgKCFtZXJnZWRQcm9wcy5kaXNhYmxlZCAmJiBtZXJnZWRQcm9wcy5hdXRvRm9jdXMgJiYgcm9vdFJlZikge1xuICAgICAgcm9vdFJlZi5mb2N1cygpO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3Qgb25FcnIgPSAoZSkgPT4ge1xuICAgIGlmIChtZXJnZWRQcm9wcy5vbkVycm9yKSB7XG4gICAgICBtZXJnZWRQcm9wcy5vbkVycm9yKGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBvbkRyYWdFbnRlckNiID0gKGV2ZW50KSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBzdG9wUHJvcGFnYXRpb24oZXZlbnQpO1xuXG4gICAgZHJhZ1RhcmdldHNSZWYgPSBbLi4uZHJhZ1RhcmdldHNSZWYsIGV2ZW50LnRhcmdldF07XG5cbiAgICBpZiAoaXNFdnRXaXRoRmlsZXMoZXZlbnQpKSB7XG4gICAgICBQcm9taXNlLnJlc29sdmUobWVyZ2VkUHJvcHMuZ2V0RmlsZXNGcm9tRXZlbnQoZXZlbnQpKVxuICAgICAgICAudGhlbigoZmlsZXMpID0+IHtcbiAgICAgICAgICBpZiAoaXNQcm9wYWdhdGlvblN0b3BwZWQoZXZlbnQpICYmICFtZXJnZWRQcm9wcy5ub0RyYWdFdmVudHNCdWJibGluZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGZpbGVDb3VudCA9IGZpbGVzLmxlbmd0aDtcbiAgICAgICAgICBjb25zdCBpc0RyYWdBY2NlcHQgPVxuICAgICAgICAgICAgZmlsZUNvdW50ID4gMCAmJlxuICAgICAgICAgICAgYWxsRmlsZXNBY2NlcHRlZCh7XG4gICAgICAgICAgICAgIGZpbGVzLFxuICAgICAgICAgICAgICBhY2NlcHQ6IGFjY2VwdEF0dHIoKSxcbiAgICAgICAgICAgICAgbWluU2l6ZTogbWVyZ2VkUHJvcHMubWluU2l6ZSxcbiAgICAgICAgICAgICAgbWF4U2l6ZTogbWVyZ2VkUHJvcHMubWF4U2l6ZSxcbiAgICAgICAgICAgICAgbXVsdGlwbGU6IG1lcmdlZFByb3BzLm11bHRpcGxlLFxuICAgICAgICAgICAgICBtYXhGaWxlczogbWVyZ2VkUHJvcHMubWF4RmlsZXMsXG4gICAgICAgICAgICAgIHZhbGlkYXRvcjogbWVyZ2VkUHJvcHMudmFsaWRhdG9yLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgY29uc3QgaXNEcmFnUmVqZWN0ID0gZmlsZUNvdW50ID4gMCAmJiAhaXNEcmFnQWNjZXB0O1xuXG4gICAgICAgICAgc2V0U3RhdGUoXG4gICAgICAgICAgICBwcm9kdWNlKChzKSA9PiB7XG4gICAgICAgICAgICAgIHMuaXNEcmFnQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcy5pc0RyYWdBY2NlcHQgPSBpc0RyYWdBY2NlcHQ7XG4gICAgICAgICAgICAgIHMuaXNEcmFnUmVqZWN0ID0gaXNEcmFnUmVqZWN0O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKG1lcmdlZFByb3BzLm9uRHJhZ0VudGVyKSB7XG4gICAgICAgICAgICBtZXJnZWRQcm9wcy5vbkRyYWdFbnRlcihldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGUpID0+IG9uRXJyKGUpKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgb25EcmFnT3ZlckNiID0gKGV2ZW50KSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBzdG9wUHJvcGFnYXRpb24oZXZlbnQpO1xuXG4gICAgY29uc3QgaGFzRmlsZXMgPSBpc0V2dFdpdGhGaWxlcyhldmVudCk7XG4gICAgaWYgKGhhc0ZpbGVzICYmIGV2ZW50LmRhdGFUcmFuc2Zlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZXZlbnQuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSBcImNvcHlcIjtcbiAgICAgIH0gY2F0Y2gge31cbiAgICB9XG5cbiAgICBpZiAoaGFzRmlsZXMgJiYgbWVyZ2VkUHJvcHMub25EcmFnT3Zlcikge1xuICAgICAgbWVyZ2VkUHJvcHMub25EcmFnT3ZlcihldmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIGNvbnN0IG9uRHJhZ0xlYXZlQ2IgPSAoZXZlbnQpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHN0b3BQcm9wYWdhdGlvbihldmVudCk7XG5cbiAgICBjb25zdCB0YXJnZXRzID0gZHJhZ1RhcmdldHNSZWYuZmlsdGVyKFxuICAgICAgKHRhcmdldCkgPT4gcm9vdFJlZiAmJiByb290UmVmLmNvbnRhaW5zKHRhcmdldClcbiAgICApO1xuICAgIGNvbnN0IHRhcmdldElkeCA9IHRhcmdldHMuaW5kZXhPZihldmVudC50YXJnZXQpO1xuICAgIGlmICh0YXJnZXRJZHggIT09IC0xKSB7XG4gICAgICB0YXJnZXRzLnNwbGljZSh0YXJnZXRJZHgsIDEpO1xuICAgIH1cbiAgICBkcmFnVGFyZ2V0c1JlZiA9IHRhcmdldHM7XG4gICAgaWYgKHRhcmdldHMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNldFN0YXRlKFxuICAgICAgcHJvZHVjZSgocykgPT4ge1xuICAgICAgICBzLmlzRHJhZ0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBzLmlzRHJhZ0FjY2VwdCA9IGZhbHNlO1xuICAgICAgICBzLmlzRHJhZ1JlamVjdCA9IGZhbHNlO1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgaWYgKGlzRXZ0V2l0aEZpbGVzKGV2ZW50KSAmJiBtZXJnZWRQcm9wcy5vbkRyYWdMZWF2ZSkge1xuICAgICAgbWVyZ2VkUHJvcHMub25EcmFnTGVhdmUoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBzZXRGaWxlcyA9IChmaWxlcywgZXZlbnQpID0+IHtcbiAgICBjb25zdCBhY2NlcHRlZEZpbGVzID0gW107XG4gICAgY29uc3QgZmlsZVJlamVjdGlvbnMgPSBbXTtcblxuICAgIGZpbGVzLmZvckVhY2goKGZpbGUpID0+IHtcbiAgICAgIGNvbnN0IFthY2NlcHRlZCwgYWNjZXB0RXJyb3JdID0gZmlsZUFjY2VwdGVkKGZpbGUsIGFjY2VwdEF0dHIoKSk7XG4gICAgICBjb25zdCBbc2l6ZU1hdGNoLCBzaXplRXJyb3JdID0gZmlsZU1hdGNoU2l6ZShcbiAgICAgICAgZmlsZSxcbiAgICAgICAgbWVyZ2VkUHJvcHMubWluU2l6ZSxcbiAgICAgICAgbWVyZ2VkUHJvcHMubWF4U2l6ZVxuICAgICAgKTtcbiAgICAgIGNvbnN0IGN1c3RvbUVycm9ycyA9IG1lcmdlZFByb3BzLnZhbGlkYXRvclxuICAgICAgICA/IG1lcmdlZFByb3BzLnZhbGlkYXRvcihmaWxlKVxuICAgICAgICA6IG51bGw7XG5cbiAgICAgIGlmIChhY2NlcHRlZCAmJiBzaXplTWF0Y2ggJiYgIWN1c3RvbUVycm9ycykge1xuICAgICAgICBhY2NlcHRlZEZpbGVzLnB1c2goZmlsZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgZXJyb3JzID0gW2FjY2VwdEVycm9yLCBzaXplRXJyb3JdO1xuICAgICAgICBpZiAoY3VzdG9tRXJyb3JzKSB7XG4gICAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdChjdXN0b21FcnJvcnMpO1xuICAgICAgICB9XG4gICAgICAgIGZpbGVSZWplY3Rpb25zLnB1c2goeyBmaWxlLCBlcnJvcnM6IGVycm9ycy5maWx0ZXIoKGUpID0+IGUpIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKFxuICAgICAgKCFtZXJnZWRQcm9wcy5tdWx0aXBsZSAmJiBhY2NlcHRlZEZpbGVzLmxlbmd0aCA+IDEpIHx8XG4gICAgICAobWVyZ2VkUHJvcHMubXVsdGlwbGUgJiZcbiAgICAgICAgbWVyZ2VkUHJvcHMubWF4RmlsZXMgPj0gMSAmJlxuICAgICAgICBhY2NlcHRlZEZpbGVzLmxlbmd0aCA+IG1lcmdlZFByb3BzLm1heEZpbGVzKVxuICAgICkge1xuICAgICAgYWNjZXB0ZWRGaWxlcy5mb3JFYWNoKChmaWxlKSA9PiB7XG4gICAgICAgIGZpbGVSZWplY3Rpb25zLnB1c2goeyBmaWxlLCBlcnJvcnM6IFtUT09fTUFOWV9GSUxFU19SRUpFQ1RJT05dIH0pO1xuICAgICAgfSk7XG4gICAgICBhY2NlcHRlZEZpbGVzLnNwbGljZSgwKTtcbiAgICB9XG5cbiAgICBzZXRTdGF0ZShcbiAgICAgIHByb2R1Y2UoKHMpID0+IHtcbiAgICAgICAgcy5hY2NlcHRlZEZpbGVzID0gYWNjZXB0ZWRGaWxlcztcbiAgICAgICAgcy5maWxlUmVqZWN0aW9ucyA9IGZpbGVSZWplY3Rpb25zO1xuICAgICAgICBzLmlzRHJhZ1JlamVjdCA9IGZpbGVSZWplY3Rpb25zLmxlbmd0aCA+IDA7XG4gICAgICB9KVxuICAgICk7XG5cbiAgICBpZiAobWVyZ2VkUHJvcHMub25Ecm9wKSB7XG4gICAgICBtZXJnZWRQcm9wcy5vbkRyb3AoYWNjZXB0ZWRGaWxlcywgZmlsZVJlamVjdGlvbnMsIGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoZmlsZVJlamVjdGlvbnMubGVuZ3RoID4gMCAmJiBtZXJnZWRQcm9wcy5vbkRyb3BSZWplY3RlZCkge1xuICAgICAgbWVyZ2VkUHJvcHMub25Ecm9wUmVqZWN0ZWQoZmlsZVJlamVjdGlvbnMsIGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoYWNjZXB0ZWRGaWxlcy5sZW5ndGggPiAwICYmIG1lcmdlZFByb3BzLm9uRHJvcEFjY2VwdGVkKSB7XG4gICAgICBtZXJnZWRQcm9wcy5vbkRyb3BBY2NlcHRlZChhY2NlcHRlZEZpbGVzLCBldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG9uRHJvcENiID0gKGV2ZW50KSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBzdG9wUHJvcGFnYXRpb24oZXZlbnQpO1xuXG4gICAgZHJhZ1RhcmdldHNSZWYgPSBbXTtcblxuICAgIGlmIChpc0V2dFdpdGhGaWxlcyhldmVudCkpIHtcbiAgICAgIFByb21pc2UucmVzb2x2ZShtZXJnZWRQcm9wcy5nZXRGaWxlc0Zyb21FdmVudChldmVudCkpXG4gICAgICAgIC50aGVuKChmaWxlcykgPT4ge1xuICAgICAgICAgIGlmIChpc1Byb3BhZ2F0aW9uU3RvcHBlZChldmVudCkgJiYgIW1lcmdlZFByb3BzLm5vRHJhZ0V2ZW50c0J1YmJsaW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldEZpbGVzKGZpbGVzLCBldmVudCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZSkgPT4gb25FcnIoZSkpO1xuICAgIH1cbiAgICBzZXRTdGF0ZShwcm9kdWNlKChzKSA9PiBPYmplY3QuYXNzaWduKHMsIGluaXRpYWxTdGF0ZSkpKTtcbiAgfTtcblxuICBjb25zdCBvcGVuRmlsZURpYWxvZyA9ICgpID0+IHtcbiAgICBpZiAodXNlRnNBY2Nlc3MoKSkge1xuICAgICAgc2V0U3RhdGUoXCJpc0ZpbGVEaWFsb2dBY3RpdmVcIiwgdHJ1ZSk7XG4gICAgICBvbkZpbGVEaWFsb2dPcGVuKCk7XG4gICAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICBtdWx0aXBsZTogbWVyZ2VkUHJvcHMubXVsdGlwbGUsXG4gICAgICAgIHR5cGVzOiBwaWNrZXJUeXBlcygpLFxuICAgICAgfTtcbiAgICAgIHdpbmRvd1xuICAgICAgICAuc2hvd09wZW5GaWxlUGlja2VyKG9wdHMpXG4gICAgICAgIC50aGVuKChoYW5kbGVzKSA9PiBtZXJnZWRQcm9wcy5nZXRGaWxlc0Zyb21FdmVudChoYW5kbGVzKSlcbiAgICAgICAgLnRoZW4oKGZpbGVzKSA9PiB7XG4gICAgICAgICAgc2V0RmlsZXMoZmlsZXMsIG51bGwpO1xuICAgICAgICAgIHNldFN0YXRlKFwiaXNGaWxlRGlhbG9nQWN0aXZlXCIsIGZhbHNlKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgaWYgKGlzQWJvcnQoZSkpIHtcbiAgICAgICAgICAgIG9uRmlsZURpYWxvZ0NhbmNlbChlKTtcbiAgICAgICAgICAgIHNldFN0YXRlKFwiaXNGaWxlRGlhbG9nQWN0aXZlXCIsIGZhbHNlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzU2VjdXJpdHlFcnJvcihlKSkge1xuICAgICAgICAgICAgc2V0VXNlRnNBY2Nlc3MoZmFsc2UpO1xuICAgICAgICAgICAgaWYgKGlucHV0UmVmKSB7XG4gICAgICAgICAgICAgIGlucHV0UmVmLnZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgaW5wdXRSZWYuY2xpY2soKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG9uRXJyKFxuICAgICAgICAgICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAgIFwiQ2Fubm90IG9wZW4gdGhlIGZpbGUgcGlja2VyIGJlY2F1c2UgdGhlIEZpbGUgU3lzdGVtIEFjY2VzcyBBUEkgaXMgbm90IHN1cHBvcnRlZCBhbmQgbm8gPGlucHV0PiB3YXMgcHJvdmlkZWQuXCJcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9uRXJyKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlucHV0UmVmKSB7XG4gICAgICBzZXRTdGF0ZShcImlzRmlsZURpYWxvZ0FjdGl2ZVwiLCB0cnVlKTtcbiAgICAgIG9uRmlsZURpYWxvZ09wZW4oKTtcbiAgICAgIGlucHV0UmVmLnZhbHVlID0gbnVsbDtcbiAgICAgIGlucHV0UmVmLmNsaWNrKCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG9uS2V5RG93bkNiID0gKGV2ZW50KSA9PiB7XG4gICAgaWYgKCFyb290UmVmIHx8ICFyb290UmVmLmlzRXF1YWxOb2RlKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQua2V5ID09PSBcIiBcIiB8fCBldmVudC5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG9wZW5GaWxlRGlhbG9nKCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG9uRm9jdXNDYiA9ICgpID0+IHNldFN0YXRlKFwiaXNGb2N1c2VkXCIsIHRydWUpO1xuICBjb25zdCBvbkJsdXJDYiA9ICgpID0+IHNldFN0YXRlKFwiaXNGb2N1c2VkXCIsIGZhbHNlKTtcblxuICBjb25zdCBvbkNsaWNrQ2IgPSAoKSA9PiB7XG4gICAgaWYgKG1lcmdlZFByb3BzLm5vQ2xpY2spIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNJZU9yRWRnZSgpKSB7XG4gICAgICBzZXRUaW1lb3V0KG9wZW5GaWxlRGlhbG9nLCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3BlbkZpbGVEaWFsb2coKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgY29tcG9zZUhhbmRsZXIgPSAoZm4pID0+IHtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHMuZGlzYWJsZWQgPyBudWxsIDogZm47XG4gIH07XG5cbiAgY29uc3QgY29tcG9zZUtleWJvYXJkSGFuZGxlciA9IChmbikgPT4ge1xuICAgIHJldHVybiBtZXJnZWRQcm9wcy5ub0tleWJvYXJkID8gbnVsbCA6IGNvbXBvc2VIYW5kbGVyKGZuKTtcbiAgfTtcblxuICBjb25zdCBjb21wb3NlRHJhZ0hhbmRsZXIgPSAoZm4pID0+IHtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHMubm9EcmFnID8gbnVsbCA6IGNvbXBvc2VIYW5kbGVyKGZuKTtcbiAgfTtcblxuICBjb25zdCBzdG9wUHJvcGFnYXRpb24gPSAoZXZlbnQpID0+IHtcbiAgICBpZiAobWVyZ2VkUHJvcHMubm9EcmFnRXZlbnRzQnViYmxpbmcpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBnZXRSb290UHJvcHMgPSBjcmVhdGVNZW1vKCgpID0+IChyZXN0UHJvcHMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IFtfLCBvdGhlclJlc3RdID0gc3BsaXRQcm9wcyhyZXN0UHJvcHMsIFtcbiAgICAgIFwicmVmXCIsXG4gICAgICBcInJvbGVcIixcbiAgICAgIFwib25LZXlEb3duXCIsXG4gICAgICBcIm9uRm9jdXNcIixcbiAgICAgIFwib25CbHVyXCIsXG4gICAgICBcIm9uQ2xpY2tcIixcbiAgICAgIFwib25EcmFnRW50ZXJcIixcbiAgICAgIFwib25EcmFnT3ZlclwiLFxuICAgICAgXCJvbkRyYWdMZWF2ZVwiLFxuICAgICAgXCJvbkRyb3BcIixcbiAgICBdKTtcblxuICAgIHJldHVybiB7XG4gICAgICBvbktleURvd246IGNvbXBvc2VLZXlib2FyZEhhbmRsZXIoXG4gICAgICAgIGNvbXBvc2VFdmVudEhhbmRsZXJzKHJlc3RQcm9wcy5vbktleURvd24sIG9uS2V5RG93bkNiKVxuICAgICAgKSxcbiAgICAgIG9uRm9jdXM6IGNvbXBvc2VLZXlib2FyZEhhbmRsZXIoXG4gICAgICAgIGNvbXBvc2VFdmVudEhhbmRsZXJzKHJlc3RQcm9wcy5vbkZvY3VzLCBvbkZvY3VzQ2IpXG4gICAgICApLFxuICAgICAgb25CbHVyOiBjb21wb3NlS2V5Ym9hcmRIYW5kbGVyKFxuICAgICAgICBjb21wb3NlRXZlbnRIYW5kbGVycyhyZXN0UHJvcHMub25CbHVyLCBvbkJsdXJDYilcbiAgICAgICksXG4gICAgICBvbkNsaWNrOiBjb21wb3NlSGFuZGxlcihjb21wb3NlRXZlbnRIYW5kbGVycyhyZXN0UHJvcHMub25DbGljaywgb25DbGlja0NiKSksXG4gICAgICBvbkRyYWdFbnRlcjogY29tcG9zZURyYWdIYW5kbGVyKFxuICAgICAgICBjb21wb3NlRXZlbnRIYW5kbGVycyhyZXN0UHJvcHMub25EcmFnRW50ZXIsIG9uRHJhZ0VudGVyQ2IpXG4gICAgICApLFxuICAgICAgb25EcmFnT3ZlcjogY29tcG9zZURyYWdIYW5kbGVyKFxuICAgICAgICBjb21wb3NlRXZlbnRIYW5kbGVycyhyZXN0UHJvcHMub25EcmFnT3Zlciwgb25EcmFnT3ZlckNiKVxuICAgICAgKSxcbiAgICAgIG9uRHJhZ0xlYXZlOiBjb21wb3NlRHJhZ0hhbmRsZXIoXG4gICAgICAgIGNvbXBvc2VFdmVudEhhbmRsZXJzKHJlc3RQcm9wcy5vbkRyYWdMZWF2ZSwgb25EcmFnTGVhdmVDYilcbiAgICAgICksXG4gICAgICBvbkRyb3A6IGNvbXBvc2VEcmFnSGFuZGxlcihcbiAgICAgICAgY29tcG9zZUV2ZW50SGFuZGxlcnMocmVzdFByb3BzLm9uRHJvcCwgb25Ecm9wQ2IpXG4gICAgICApLFxuICAgICAgcm9sZTpcbiAgICAgICAgdHlwZW9mIHJlc3RQcm9wcy5yb2xlID09PSBcInN0cmluZ1wiICYmIHJlc3RQcm9wcy5yb2xlICE9PSBcIlwiXG4gICAgICAgICAgPyByZXN0UHJvcHMucm9sZVxuICAgICAgICAgIDogXCJwcmVzZW50YXRpb25cIixcbiAgICAgIHJlZjogKHIpID0+IChyb290UmVmID0gciksXG4gICAgICAuLi4oIW1lcmdlZFByb3BzLmRpc2FibGVkICYmICFtZXJnZWRQcm9wcy5ub0tleWJvYXJkID8geyB0YWJpbmRleDogMCB9IDoge30pLFxuICAgICAgLi4ub3RoZXJSZXN0LFxuICAgIH07XG4gIH0pO1xuXG4gIGNvbnN0IG9uSW5wdXRFbGVtZW50Q2xpY2sgPSAoZXZlbnQpID0+IHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfTtcblxuICBjb25zdCBnZXRJbnB1dFByb3BzID0gY3JlYXRlTWVtbygoKSA9PiAocmVzdFByb3BzID0ge30pID0+IHtcbiAgICBjb25zdCBbXywgb3RoZXJSZXN0XSA9IHNwbGl0UHJvcHMocmVzdFByb3BzLCBbXG4gICAgICBcInJlZlwiLFxuICAgICAgXCJvbkNoYW5nZVwiLFxuICAgICAgXCJvbkNsaWNrXCIsXG4gICAgXSk7XG4gICAgY29uc3QgaW5wdXRQcm9wcyA9IHtcbiAgICAgIGFjY2VwdDogYWNjZXB0QXR0cigpLFxuICAgICAgbXVsdGlwbGU6IG1lcmdlZFByb3BzLm11bHRpcGxlLFxuICAgICAgdHlwZTogXCJmaWxlXCIsXG4gICAgICBzdHlsZToge1xuICAgICAgICBib3JkZXI6IDAsXG4gICAgICAgIGNsaXA6IFwicmVjdCgwLCAwLCAwLCAwKVwiLFxuICAgICAgICBcImNsaXAtcGF0aFwiOiBcImluc2V0KDUwJSlcIixcbiAgICAgICAgaGVpZ2h0OiBcIjFweFwiLFxuICAgICAgICBtYXJnaW46IFwiMCAtMXB4IC0xcHggMFwiLFxuICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgd2lkdGg6IFwiMXB4XCIsXG4gICAgICAgIFwid2hpdGUtc3BhY2VcIjogXCJub3dyYXBcIixcbiAgICAgIH0sXG4gICAgICBvbkNoYW5nZTogY29tcG9zZUhhbmRsZXIoY29tcG9zZUV2ZW50SGFuZGxlcnMocmVzdFByb3BzLm9uQ2hhbmdlLCBvbkRyb3BDYikpLFxuICAgICAgb25DbGljazogY29tcG9zZUhhbmRsZXIoXG4gICAgICAgIGNvbXBvc2VFdmVudEhhbmRsZXJzKHJlc3RQcm9wcy5vbkNsaWNrLCBvbklucHV0RWxlbWVudENsaWNrKVxuICAgICAgKSxcbiAgICAgIHRhYkluZGV4OiAtMSxcbiAgICAgIHJlZjogKHIpID0+IChpbnB1dFJlZiA9IHIpLFxuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4uaW5wdXRQcm9wcyxcbiAgICAgIC4uLm90aGVyUmVzdCxcbiAgICB9O1xuICB9KTtcblxuICBjb25zdCBpc0ZvY3VzZWQgPSBjcmVhdGVNZW1vKCgpID0+IHN0YXRlLmlzRm9jdXNlZCAmJiAhbWVyZ2VkUHJvcHMuZGlzYWJsZWQpO1xuXG4gIHJldHVybiB7XG4gICAgLi4uc3RhdGUsXG4gICAgZ2V0IGlzRm9jdXNlZCgpIHtcbiAgICAgIHJldHVybiBpc0ZvY3VzZWQoKTtcbiAgICB9LFxuICAgIGdldFJvb3RQcm9wcyxcbiAgICBnZXRJbnB1dFByb3BzLFxuICAgIGdldCBvcGVuKCkge1xuICAgICAgcmV0dXJuIGNvbXBvc2VIYW5kbGVyKG9wZW5GaWxlRGlhbG9nKTtcbiAgICB9LFxuICB9O1xufVxuXG4vKipcbiAqIENvbnZlbmllbmNlIHdyYXBwZXIgY29tcG9uZW50IGZvciB0aGUgYGNyZWF0ZURyb3B6b25lYCBjb21wb3NhYmxlXG4gKi9cbmNvbnN0IERyb3B6b25lID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IFtsb2NhbCwgb3RoZXJzXSA9IHNwbGl0UHJvcHMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwicmVmXCJdKTtcbiAgY29uc3QgeyBvcGVuLCAuLi5hcGkgfSA9IGNyZWF0ZURyb3B6b25lKG90aGVycyk7XG5cbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCByZWYgPSBsb2NhbC5yZWY7XG4gICAgaWYgKHJlZikge1xuICAgICAgaWYgKHR5cGVvZiByZWYgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZWYoeyBvcGVuIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVmLm9wZW4gPSBvcGVuO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIDw+e2xvY2FsLmNoaWxkcmVuKHsgLi4uYXBpLCBvcGVuIH0pfTwvPjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IERyb3B6b25lO1xuIl0sIm5hbWVzIjpbIiRQUk9YWSIsIlN5bWJvbCIsIlNVUFBPUlRTX1BST1hZIiwiUHJveHkiLCIkVFJBQ0siLCJzaWduYWxPcHRpb25zIiwiZXF1YWxzIiwiYSIsImIiLCJydW5FZmZlY3RzIiwicnVuUXVldWUiLCJVTk9XTkVEIiwib3duZWQiLCJjbGVhbnVwcyIsImNvbnRleHQiLCJvd25lciIsIk93bmVyIiwiU3VzcGVuc2VDb250ZXh0IiwiVHJhbnNpdGlvbiIsIkxpc3RlbmVyIiwiVXBkYXRlcyIsIkVmZmVjdHMiLCJFeGVjQ291bnQiLCJjcmVhdGVTaWduYWwiLCJ2YWx1ZSIsIm9wdGlvbnMiLCJzIiwib2JzZXJ2ZXJzIiwib2JzZXJ2ZXJTbG90cyIsImNvbXBhcmF0b3IiLCJPYmplY3QiLCJhc3NpZ24iLCJ1bmRlZmluZWQiLCJyZWFkU2lnbmFsIiwiYmluZCIsIndyaXRlU2lnbmFsIiwiY3JlYXRlRWZmZWN0IiwiZm4iLCJydW5Vc2VyRWZmZWN0cyIsImMiLCJjcmVhdGVDb21wdXRhdGlvbiIsInJlbmRlciIsInVzZXIiLCJwdXNoIiwidXBkYXRlQ29tcHV0YXRpb24iLCJjcmVhdGVNZW1vIiwidW50cmFjayIsImxpc3RlbmVyIiwib25Nb3VudCIsIm9uQ2xlYW51cCIsImdldExpc3RlbmVyIiwidGhpcyIsInNvdXJjZXMiLCJ1cGRhdGVzIiwicnVuVXBkYXRlcyIsImxvb2tVcHN0cmVhbSIsInNTbG90IiwibGVuZ3RoIiwic291cmNlU2xvdHMiLCJub2RlIiwiaXNDb21wIiwiY3VycmVudCIsImkiLCJvIiwiVHJhbnNpdGlvblJ1bm5pbmciLCJkaXNwb3NlZCIsImhhcyIsInRTdGF0ZSIsInN0YXRlIiwicHVyZSIsIm1hcmtEb3duc3RyZWFtIiwiRXJyb3IiLCJjbGVhbk5vZGUiLCJ0aW1lIiwibmV4dFZhbHVlIiwiZXJyIiwiZm9yRWFjaCIsInVwZGF0ZWRBdCIsImhhbmRsZUVycm9yIiwicnVuQ29tcHV0YXRpb24iLCJpbml0IiwicnVuVG9wIiwic3VzcGVuc2UiLCJpbkZhbGxiYWNrIiwiZWZmZWN0cyIsImFuY2VzdG9ycyIsIndhaXQiLCJyZXMiLCJlIiwiY29tcGxldGVVcGRhdGVzIiwicXVldWUiLCJ1c2VyTGVuZ3RoIiwiaWdub3JlIiwic291cmNlIiwicG9wIiwiaW5kZXgiLCJvYnMiLCJuIiwidE93bmVkIiwiZXJyb3IiLCJjYXVzZSIsImNhc3RFcnJvciIsInRydWVGbiIsInByb3BUcmFwcyIsImdldCIsIl8iLCJwcm9wZXJ0eSIsInJlY2VpdmVyIiwic2V0IiwiZGVsZXRlUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwib3duS2V5cyIsImtleXMiLCJyZXNvbHZlU291cmNlIiwicmVzb2x2ZVNvdXJjZXMiLCJ2IiwibWVyZ2VQcm9wcyIsInByb3h5IiwiU2V0Iiwic291cmNlc01hcCIsImRlZmluZWQiLCJjcmVhdGUiLCJzb3VyY2VLZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImtleSIsImRlc2MiLCJ0YXJnZXQiLCJkZWZpbmVkS2V5cyIsImRlZmluZVByb3BlcnR5Iiwic3BsaXRQcm9wcyIsInByb3BzIiwiYmxvY2tlZCIsImZsYXQiLCJtYXAiLCJrIiwiaW5jbHVkZXMiLCJmaWx0ZXIiLCJvdGhlck9iamVjdCIsIm9iamVjdHMiLCJwcm9wTmFtZSIsImlzRGVmYXVsdERlc2MiLCJ3cml0YWJsZSIsIm9iamVjdEluZGV4IiwiJFJBVyIsIiROT0RFIiwiJEhBUyIsIiRTRUxGIiwid3JhcCQxIiwicCIsInByb3h5VHJhcHMkMSIsIkFycmF5IiwiaXNBcnJheSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJsIiwicHJvcCIsImlzV3JhcHBhYmxlIiwib2JqIiwicHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsInVud3JhcCIsIml0ZW0iLCJyZXN1bHQiLCJ1bndyYXBwZWQiLCJpc0Zyb3plbiIsInNsaWNlIiwiYWRkIiwiZ2V0Tm9kZXMiLCJzeW1ib2wiLCJub2RlcyIsImdldE5vZGUiLCJpbnRlcm5hbCIsIiQiLCJ0cmFja1NlbGYiLCJ0cmFja2VkIiwiaGFzT3duUHJvcGVydHkiLCJSZWZsZWN0Iiwic2V0UHJvcGVydHkiLCJkZWxldGluZyIsInByZXYiLCJsZW4iLCJtZXJnZVN0b3JlTm9kZSIsInVwZGF0ZVBhdGgiLCJwYXRoIiwidHJhdmVyc2VkIiwicGFydCIsInNoaWZ0IiwicGFydFR5cGUiLCJjb25jYXQiLCJmcm9tIiwidG8iLCJieSIsImNyZWF0ZVN0b3JlIiwic3RvcmUiLCJ1bndyYXBwZWRTdG9yZSIsImFyZ3MiLCJuZXh0IiwidXBkYXRlQXJyYXkiLCJwcm9kdWNlcnMiLCJXZWFrTWFwIiwic2V0dGVyVHJhcHMiLCJwcm9kdWNlIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwicmVqZWN0ZWQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiU3VwcHJlc3NlZEVycm9yIiwiQ09NTU9OX01JTUVfVFlQRVMiLCJNYXAiLCJ0b0ZpbGVXaXRoUGF0aCIsImZpbGUiLCJoIiwiZiIsIm5hbWUiLCJsYXN0SW5kZXhPZiIsInR5cGUiLCJleHQiLCJzcGxpdCIsInRvTG93ZXJDYXNlIiwid2l0aE1pbWVUeXBlIiwid2Via2l0UmVsYXRpdmVQYXRoIiwic2V0T2JqUHJvcCIsIkZJTEVTX1RPX0lHTk9SRSIsImlzT2JqZWN0Iiwibm9JZ25vcmVkRmlsZXMiLCJmaWxlcyIsImluZGV4T2YiLCJmcm9tTGlzdCIsIml0ZW1zIiwidG9GaWxlUHJvbWlzZXMiLCJ3ZWJraXRHZXRBc0VudHJ5IiwiZnJvbURhdGFUcmFuc2Zlckl0ZW0iLCJlbnRyeSIsImlzRGlyZWN0b3J5IiwiZnJvbURpckVudHJ5IiwiZmxhdHRlbiIsInJlZHVjZSIsImFjYyIsIl9hIiwiZ2V0QXNGaWxlU3lzdGVtSGFuZGxlIiwiZ2V0RmlsZSIsImhhbmRsZSIsImdldEFzRmlsZSIsImZ3cCIsImZ1bGxQYXRoIiwiZnJvbUVudHJ5IiwiZnJvbUZpbGVFbnRyeSIsInJlYWRlciIsImNyZWF0ZVJlYWRlciIsImVudHJpZXMiLCJyZWFkRW50cmllcyIsImJhdGNoIiwiYWxsIiwiRXJyb3JDb2RlIiwiVE9PX01BTllfRklMRVNfUkVKRUNUSU9OIiwiY29kZSIsIm1lc3NhZ2UiLCJmaWxlQWNjZXB0ZWQiLCJhY2NlcHQiLCJpc0FjY2VwdGFibGUiLCJhY2NlcHRlZEZpbGVzIiwiYWNjZXB0ZWRGaWxlc0FycmF5IiwiZmlsZU5hbWUiLCJtaW1lVHlwZSIsImJhc2VNaW1lVHlwZSIsInJlcGxhY2UiLCJzb21lIiwidmFsaWRUeXBlIiwidHJpbSIsImNoYXJBdCIsImVuZHNXaXRoIiwiYWNjZXB0cyIsImZpbGVNYXRjaFNpemUiLCJtaW5TaXplIiwibWF4U2l6ZSIsImlzRGVmaW5lZCIsInNpemUiLCJhbGxGaWxlc0FjY2VwdGVkIiwibXVsdGlwbGUiLCJtYXhGaWxlcyIsInZhbGlkYXRvciIsImV2ZXJ5IiwiYWNjZXB0ZWQiLCJzaXplTWF0Y2giLCJjdXN0b21FcnJvcnMiLCJhY2NlcHRQcm9wQXNBY2NlcHRBdHRyIiwibWltZSIsImV4dHMiLCJqb2luIiwicGlja2VyT3B0aW9uc0Zyb21BY2NlcHQiLCJkZXNjcmlwdGlvbiIsImNvbXBvc2VFdmVudEhhbmRsZXJzIiwiZm5zIiwiZGVmYXVsdFByZXZlbnRlZCIsInByb3BhZ2F0aW9uU3RvcHBlZCIsImlzRXZ0V2l0aEZpbGVzIiwiZXZlbnQiLCJkYXRhVHJhbnNmZXIiLCJjYWxsIiwidHlwZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImNhbmNlbEJ1YmJsZSIsIm9uRG9jdW1lbnREcmFnT3ZlciIsInByZXZlbnREZWZhdWx0IiwiaXNJZU9yRWRnZSIsInVhIiwid2luZG93IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiY2FuVXNlRmlsZVN5c3RlbUFjY2Vzc0FQSSIsImlzQWJvcnQiLCJpc1NlY3VyaXR5RXJyb3IiLCJkZWZhdWx0UHJvcHMiLCJkaXNhYmxlZCIsImdldEZpbGVzRnJvbUV2ZW50IiwiZXZ0IiwiZHQiLCJraW5kIiwiZ2V0RGF0YVRyYW5zZmVyRmlsZXMiLCJpc0NoYW5nZUV2dCIsImdldElucHV0RmlsZXMiLCJoYW5kbGVzIiwiZ2V0RnNIYW5kbGVGaWxlcyIsIkluZmluaXR5IiwicHJldmVudERyb3BPbkRvY3VtZW50Iiwibm9DbGljayIsIm5vS2V5Ym9hcmQiLCJub0RyYWciLCJub0RyYWdFdmVudHNCdWJibGluZyIsInVzZUZzQWNjZXNzQXBpIiwiYXV0b0ZvY3VzIiwiaW5pdGlhbFN0YXRlIiwiaXNGb2N1c2VkIiwiaXNGaWxlRGlhbG9nQWN0aXZlIiwiaXNEcmFnQWN0aXZlIiwiaXNEcmFnQWNjZXB0IiwiaXNEcmFnUmVqZWN0IiwiZmlsZVJlamVjdGlvbnMiLCJjcmVhdGVEcm9wem9uZSIsInJvb3RSZWYiLCJpbnB1dFJlZiIsIm1lcmdlZFByb3BzIiwiZHJhZ1RhcmdldHNSZWYiLCJzZXRTdGF0ZSIsImZzQWNjZXNzQXBpV29ya3MiLCJpc1NlY3VyZUNvbnRleHQiLCJ1c2VGc0FjY2VzcyIsInNldFVzZUZzQWNjZXNzIiwiYWNjZXB0QXR0ciIsInBpY2tlclR5cGVzIiwib25GaWxlRGlhbG9nT3BlbiIsIm9uRmlsZURpYWxvZ0NhbmNlbCIsIm9uV2luZG93Rm9jdXMiLCJzZXRUaW1lb3V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvbkRvY3VtZW50RHJvcCIsImNvbnRhaW5zIiwiZG9jdW1lbnQiLCJmb2N1cyIsIm9uRXJyIiwib25FcnJvciIsImNvbnNvbGUiLCJvbkRyYWdFbnRlckNiIiwic3RvcFByb3BhZ2F0aW9uIiwiZmlsZUNvdW50Iiwib25EcmFnRW50ZXIiLCJjYXRjaCIsIm9uRHJhZ092ZXJDYiIsImhhc0ZpbGVzIiwiZHJvcEVmZmVjdCIsIm9uRHJhZ092ZXIiLCJvbkRyYWdMZWF2ZUNiIiwidGFyZ2V0cyIsInRhcmdldElkeCIsInNwbGljZSIsIm9uRHJhZ0xlYXZlIiwic2V0RmlsZXMiLCJhY2NlcHRFcnJvciIsInNpemVFcnJvciIsImVycm9ycyIsIm9uRHJvcCIsIm9uRHJvcFJlamVjdGVkIiwib25Ecm9wQWNjZXB0ZWQiLCJvbkRyb3BDYiIsIm9wZW5GaWxlRGlhbG9nIiwib3B0cyIsInNob3dPcGVuRmlsZVBpY2tlciIsImNsaWNrIiwib25LZXlEb3duQ2IiLCJpc0VxdWFsTm9kZSIsIm9uRm9jdXNDYiIsIm9uQmx1ckNiIiwib25DbGlja0NiIiwiY29tcG9zZUhhbmRsZXIiLCJjb21wb3NlS2V5Ym9hcmRIYW5kbGVyIiwiY29tcG9zZURyYWdIYW5kbGVyIiwiZ2V0Um9vdFByb3BzIiwicmVzdFByb3BzIiwib3RoZXJSZXN0Iiwib25LZXlEb3duIiwib25Gb2N1cyIsIm9uQmx1ciIsIm9uQ2xpY2siLCJyb2xlIiwicmVmIiwiciIsInRhYmluZGV4Iiwib25JbnB1dEVsZW1lbnRDbGljayIsImdldElucHV0UHJvcHMiLCJpbnB1dFByb3BzIiwic3R5bGUiLCJib3JkZXIiLCJjbGlwIiwiaGVpZ2h0IiwibWFyZ2luIiwib3ZlcmZsb3ciLCJwYWRkaW5nIiwicG9zaXRpb24iLCJ3aWR0aCIsIm9uQ2hhbmdlIiwidGFiSW5kZXgiLCJvcGVuIiwibG9jYWwiLCJhcGkiLCJSZWFjdCIsImNoaWxkcmVuIl0sIm1hcHBpbmdzIjoiaWxGQWdKQSxNQUVNQSxFQUFTQyxPQUFPLGVBQ2hCQyxFQUFrQyxtQkFBVkMsTUFDeEJDLEVBQVNILE9BQU8sZUFFaEJJLEVBQWdCLENBQ3BCQyxPQU5jLENBQUNDLEVBQUdDLElBQU1ELElBQU1DLEdBU2hDLElBQUlDLEVBQWFDLEVBQ2pCLE1BRU1DLEVBQVUsQ0FDZEMsTUFBTyxLQUNQQyxTQUFVLEtBQ1ZDLFFBQVMsS0FDVEMsTUFBTyxNQUdULElBQUlDLEVBQVEsS0FDWixJQTRaSUMsRUE1WkFDLEVBQWEsS0FHYkMsRUFBVyxLQUNYQyxFQUFVLEtBQ1ZDLEVBQVUsS0FDVkMsRUFBWSxFQXNCaEIsU0FBU0MsRUFBYUMsRUFBT0MsU0FFckJDLEVBQUksQ0FDUkYsTUFBQUEsRUFDQUcsVUFBVyxLQUNYQyxjQUFlLEtBQ2ZDLFlBTEZKLEVBQVVBLEVBQVVLLE9BQU9DLE9BQU8sR0FBSTFCLEVBQWVvQixHQUFXcEIsR0FLMUNDLGFBQVUwQixTQVF6QixDQUFDQyxFQUFXQyxLQUFLUixHQU5URixJQUNRLG1CQUFWQSxJQUN1RkEsRUFBUUEsRUFBTUUsRUFBRUYsUUFFM0dXLEVBQVlULEVBQUdGLEtBWTFCLFNBQVNZLEVBQWFDLEVBQUliLEVBQU9DLEdBQy9CaEIsRUFBYTZCLFFBQ1BDLEVBQUlDLEVBQWtCSCxFQUFJYixHQUFPLEVBaEUzQixHQWlFVkUsRUFBSVQsRUFFRFEsR0FBWUEsRUFBUWdCLFNBQVFGLEVBQUVHLE1BQU8sR0FDMUNy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
